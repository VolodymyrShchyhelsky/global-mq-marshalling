

SCOPE test_gmq PROTO = GMQ;
SCOPE test_json PROTO = JSON;

MESSAGE NONEXTENDABLE test_gmq : message_two = 2 = STRUCT struct_one;
MESSAGE NONEXTENDABLE test_json : message_three = 3 = STRUCT struct_one;

MESSAGE NONEXTENDABLE test_gmq : message_four = 4 {
	STRUCT point pt;
	VECTOR<STRUCT point3D> pts3d;
};

MESSAGE NONEXTENDABLE test_json : message_five = 5 {
	STRUCT point pt;
	VECTOR<STRUCT point3D> pts3d;
};

STRUCT NONEXTENDABLE point {
  INTEGER x;
  INTEGER y;
};

STRUCT NONEXTENDABLE point3D {
  INTEGER x;
  INTEGER y;
  INTEGER z;
};

STRUCT NONEXTENDABLE struct_one {
  INTEGER firstParam;
  VECTOR<INTEGER> secondParam;
  VECTOR<STRUCT point3D> thirdParam;
  UINTEGER forthParam;
  CHARACTER-STRING fifthParam;
  VECTOR<STRUCT point> sixthParam;
  REAL seventhParam;
  STRUCT point eighthParam;
  STRUCT point3D ninethParam;
  VECTOR<REAL> tenthParam;
};



//DISCRIMINATED_UNION du_one{
//	CASE one=1: { 
//		REAL D1;
//		REAL D2;
//		REAL D3;
//	}
//	CASE two=2: { 
//		VECTOR<REAL> Data;
//	}
//};
//
//STRUCT struct_du {
//	STRUCT point3D pt;
//	DISCRIMINATED_UNION du_one disc_union;
//};

//MESSAGE test_gmq : message_du = 5 = STRUCT struct_du;


STRUCT NONEXTENDABLE BasicTypes {
  INTEGER anInt;
  UINTEGER anUInt;
  REAL aReal;
  CHARACTER-STRING aString;
};

STRUCT NONEXTENDABLE AggregateType {
  CHARACTER-STRING name;
  STRUCT BasicTypes theAggregate;
  INTEGER lastValue;
};

PUBLISHABLE NONEXTENDABLE Mock = 5 {
	CHARACTER-STRING name;
	INTEGER id;
};

PUBLISHABLE NONEXTENDABLE StructSix = 6 {
	CHARACTER-STRING name;
	STRUCT BasicTypes basic;
	STRUCT AggregateType aggregate;
};


PUBLISHABLE NONEXTENDABLE publishable_seven = 7 {
	VECTOR<INTEGER> intVec;
	VECTOR<UINTEGER> uintVec;
	VECTOR<REAL> realVec;
	VECTOR<CHARACTER-STRING> strVec;
	VECTOR<STRUCT point3D> structVec;
};

 //PUBLISHABLE publishable_eight = 8 {
 //	CHARACTER-STRING name;
 //	DISCRIMINATED_UNION du_one disc_union;
 //};


// STRUCT struct_nine {
//  DICTIONARY<CHARACTER-STRING, CHARACTER-STRING> dictio_one;
//  DICTIONARY<UINTEGER, STRUCT AggregateType> dictio_two;
//  DICTIONARY<INTEGER, STRUCT struct_du> dictio_three;
//  DICTIONARY<CHARACTER-STRING, STRUCT BasicTypes> dictio_four;
//};


//MESSAGE test_gmq : message_nine_gmq = 9 = STRUCT struct_nine;
//MESSAGE test_json : message_nine_json = 9 = STRUCT struct_nine;
//
//PUBLISHABLE publishable_nine = 9 {
//  CHARACTER-STRING name;
//  STRUCT struct_nine data;
//};
