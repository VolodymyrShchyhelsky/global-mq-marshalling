//////////////////////////////////////////////////////////////
//
//  Do not edit! file automatically generated by idl_compiler
//
//////////////////////////////////////////////////////////////

using globalmq.marshalling;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace mtest
{

//////////////////////////////////////////////////////////////
//
//                 Messages
//
//////////////////////////////////////////////////////////////

//**********************************************************************
// DISCRIMINATED_UNION "du_one" Targets: GMQ (2 cases)
//  CASE one (3 parameters)(3 parameters)
//    1. REAL D1 (REQUIRED)
//    2. REAL D2 (REQUIRED)
//    3. REAL D3 (REQUIRED)
//  CASE two (1 parameters)(1 parameters)
//    1. VECTOR<REAL> Data (REQUIRED)
//**********************************************************************

public class du_one : IEquatable<du_one>
{
	public enum Variants { one = 1, two = 2, unknown };
	Object mem;

public class CASE_one : IEquatable<CASE_one>
{
	public Double D1;
	public Double D2;
	public Double D3;

	public bool Equals(CASE_one other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.D1 == other.D1 &&
				this.D2 == other.D2 &&
				this.D3 == other.D3;
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as CASE_one);
	}
	public static bool operator ==(CASE_one left, CASE_one right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(CASE_one left, CASE_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public static void compose(ComposerBase composer, Double D1, Double D2, Double D3)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, D1, D2, D3);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, D1, D2, D3);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Double D1, Double D2, Double D3)
	{
		composer.append( "{\n  ");
		composer.addNamePart("D1");
		composer.composeReal(D1);
		composer.append( ",\n  " );
		composer.addNamePart("D2");
		composer.composeReal(D2);
		composer.append( ",\n  " );
		composer.addNamePart("D3");
		composer.composeReal(D3);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Double D1, Double D2, Double D3)
	{
		composer.composeReal(D1);
		composer.composeReal(D2);
		composer.composeReal(D3);
	}
	public static CASE_one parse(ParserBase parser)
	{
		CASE_one tmp = new CASE_one();
		parse(parser,
			D1: ref tmp.D1,
			D2: ref tmp.D2,
			D3: ref tmp.D3
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Double D1, ref Double D2, ref Double D3)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref D1, ref D2, ref D3);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref D1, ref D2, ref D3);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Double D1, ref Double D2, ref Double D3)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "D1" )
				parser.parseReal(out D1);
			else if ( key == "D2" )
				parser.parseReal(out D2);
			else if ( key == "D3" )
				parser.parseReal(out D3);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Double D1, ref Double D2, ref Double D3)
	{
		parser.parseReal(out D1);
		parser.parseReal(out D2);
		parser.parseReal(out D3);
	}
} // class CASE_one

public class CASE_two : IEquatable<CASE_two>
{
	public List<Double> Data;

	public bool Equals(CASE_two other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				Enumerable.SequenceEqual(this.Data, other.Data);
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as CASE_two);
	}
	public static bool operator ==(CASE_two left, CASE_two right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(CASE_two left, CASE_two right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public static void compose(ComposerBase composer, ICollectionCompose Data)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, Data);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, Data);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, ICollectionCompose Data)
	{
		composer.append( "{\n  ");
		composer.addNamePart("Data");
		Data.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, ICollectionCompose Data)
	{
		Data.composeGmq(composer);
	}
	public static CASE_two parse(ParserBase parser)
	{
		CASE_two tmp = new CASE_two();
		parse(parser,
			Data: new CollectionWrapperForParsing(
				() => { tmp.Data = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.Data.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ICollectionParse Data)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, Data);
		else if (parser is JsonParser jsonP)
			parse(jsonP, Data);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ICollectionParse Data)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "Data" )
				Data.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ICollectionParse Data)
	{
		Data.parseGmq(parser);
	}
} // class CASE_two

	public override bool Equals(object obj)
	{
		return Equals(obj as du_one);
	}
	public static bool operator ==(du_one left, du_one right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(du_one left, du_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(du_one other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return this.mem.Equals(other.mem);
	}
	public Variants currentVariant()
	{
		if(this.mem == null)
			return Variants.unknown;
		else if(this.mem is CASE_one)
			return Variants.one;
		else if(this.mem is CASE_two)
			return Variants.two;
		else
			return Variants.unknown;
	}

	// IDL CASE one:
	public Double D1
	{
		get { return ((CASE_one)this.mem).D1; }
		set { ((CASE_one)this.mem).D1 = value; }
	}
	public Double D2
	{
		get { return ((CASE_one)this.mem).D2; }
		set { ((CASE_one)this.mem).D2 = value; }
	}
	public Double D3
	{
		get { return ((CASE_one)this.mem).D3; }
		set { ((CASE_one)this.mem).D3 = value; }
	}

	// IDL CASE two:
	public List<Double> Data
	{
		get { return ((CASE_two)this.mem).Data; }
		set { ((CASE_two)this.mem).Data = value; }
	}
	public static du_one parse(ParserBase parser)
	{
		if (parser is GmqParser gmqP)
			return parse(gmqP);
		else if (parser is JsonParser jsonP)
			return parse(jsonP);
		else
			throw new ArgumentException();
	}
	protected static du_one parse(JsonParser parser)
	{
		du_one val = new du_one();

		parser.skipDelimiter('{');
		string key;
		parser.readKeyFromJson( out key );
		if (key != "caseid")
			throw new FormatException();
		Int64 caseID;
		parser.parseSignedInteger(out caseID);
		parser.skipSpacesEtc();
		parser.skipDelimiter(',');
		parser.readKeyFromJson(out key);
		if (key != "caseData")
			throw new FormatException();

		switch ((Variants)caseID)
		{
			case Variants.one: val.mem = CASE_one.parse(parser); break;
			case Variants.two: val.mem = CASE_two.parse(parser); break;
			default: throw new System.Exception();
		}

		parser.skipDelimiter('}');

		return val;
	}
	protected static du_one parse(GmqParser parser)
	{
		du_one val = new du_one();

		Int64 caseID;
		parser.parseSignedInteger(out caseID);

		switch ((Variants)caseID)
		{
			case Variants.one: val.mem = CASE_one.parse(parser); break;
			case Variants.two: val.mem = CASE_two.parse(parser); break;
			default: throw new System.Exception();
		}

		return val;
	}

	// IDL CASE one:
	public static void compose_one(ComposerBase composer, Double D1, Double D2, Double D3)
	{
		if (composer is GmqComposer gmqC)
			compose_one(gmqC, D1, D2, D3);
		else if (composer is JsonComposer jsonC)
			compose_one(jsonC, D1, D2, D3);
		else
			throw new ArgumentException();
	}
	public static void compose_one(JsonComposer composer, Double D1, Double D2, Double D3)
	{
		composer.append( "{\n  ");
		composer.addNamePart("caseid");
		composer.composeSignedInteger((Int64)Variants.one);
		composer.append( ",\n  " );
		composer.addNamePart("caseData");
		CASE_one.compose(composer, D1, D2, D3);
		composer.append( "\n}" );
	}
	public static void compose_one(GmqComposer composer, Double D1, Double D2, Double D3)
	{
		composer.composeSignedInteger((Int64)Variants.one);
		CASE_one.compose(composer, D1, D2, D3);
	}

	// IDL CASE two:
	public static void compose_two(ComposerBase composer, ICollectionCompose Data)
	{
		if (composer is GmqComposer gmqC)
			compose_two(gmqC, Data);
		else if (composer is JsonComposer jsonC)
			compose_two(jsonC, Data);
		else
			throw new ArgumentException();
	}
	public static void compose_two(JsonComposer composer, ICollectionCompose Data)
	{
		composer.append( "{\n  ");
		composer.addNamePart("caseid");
		composer.composeSignedInteger((Int64)Variants.two);
		composer.append( ",\n  " );
		composer.addNamePart("caseData");
		CASE_two.compose(composer, Data);
		composer.append( "\n}" );
	}
	public static void compose_two(GmqComposer composer, ICollectionCompose Data)
	{
		composer.composeSignedInteger((Int64)Variants.two);
		CASE_two.compose(composer, Data);
	}
} // class du_one

//**********************************************************************
// STRUCT "point3D" Targets: JSON GMQ (3 parameters)
//  1. INTEGER x (REQUIRED)
//  2. INTEGER y (REQUIRED)
//  3. INTEGER z (REQUIRED)
//**********************************************************************

public class point3D : IEquatable<point3D>
{
	public Int64 x;
	public Int64 y;
	public Int64 z;

	public bool Equals(point3D other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.x == other.x &&
				this.y == other.y &&
				this.z == other.z;
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as point3D);
	}
	public static bool operator ==(point3D left, point3D right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(point3D left, point3D right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public static void compose(ComposerBase composer, Int64 x, Int64 y, Int64 z)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, x, y, z);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, x, y, z);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( ",\n  " );
		composer.addNamePart("z");
		composer.composeSignedInteger(z);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
		composer.composeSignedInteger(z);
	}
	public static point3D parse(ParserBase parser)
	{
		point3D tmp = new point3D();
		parse(parser,
			x: ref tmp.x,
			y: ref tmp.y,
			z: ref tmp.z
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref x, ref y, ref z);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref x, ref y, ref z);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
				parser.parseSignedInteger(out x);
			else if ( key == "y" )
				parser.parseSignedInteger(out y);
			else if ( key == "z" )
				parser.parseSignedInteger(out z);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		parser.parseSignedInteger(out x);
		parser.parseSignedInteger(out y);
		parser.parseSignedInteger(out z);
	}
} // class point3D

//**********************************************************************
// STRUCT "point" NONEXTENDABLE Targets: JSON GMQ (2 parameters)
//  1. INTEGER x (REQUIRED)
//  2. INTEGER y (REQUIRED)
//**********************************************************************

public class point : IEquatable<point>
{
	public Int64 x;
	public Int64 y;

	public bool Equals(point other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.x == other.x &&
				this.y == other.y;
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as point);
	}
	public static bool operator ==(point left, point right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(point left, point right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public static void compose(ComposerBase composer, Int64 x, Int64 y)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, x, y);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, x, y);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 x, Int64 y)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
	}
	public static point parse(ParserBase parser)
	{
		point tmp = new point();
		parse(parser,
			x: ref tmp.x,
			y: ref tmp.y
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Int64 x, ref Int64 y)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref x, ref y);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref x, ref y);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Int64 x, ref Int64 y)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
				parser.parseSignedInteger(out x);
			else if ( key == "y" )
				parser.parseSignedInteger(out y);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Int64 x, ref Int64 y)
	{
		parser.parseSignedInteger(out x);
		parser.parseSignedInteger(out y);
	}
} // class point

//**********************************************************************
// STRUCT "struct_du" Targets: GMQ (2 parameters)
//  1. STRUCT point3D pt (REQUIRED)
//  2. DISCRIMINATED_UNION du_one disc_union (REQUIRED)
//**********************************************************************

public class struct_du : IEquatable<struct_du>
{
	public point3D pt;
	public du_one disc_union;

	public bool Equals(struct_du other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.pt.Equals(other.pt) &&
				this.disc_union.Equals(other.disc_union);
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as struct_du);
	}
	public static bool operator ==(struct_du left, struct_du right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(struct_du left, struct_du right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public static void compose(ComposerBase composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, pt, disc_union);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, pt, disc_union);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		composer.append( "{\n  ");
		composer.addNamePart("pt");
		pt.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("disc_union");
		disc_union.compose(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		pt.compose(composer);
		disc_union.compose(composer);
	}
	public static struct_du parse(ParserBase parser)
	{
		struct_du tmp = new struct_du();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point3D.parse(parser); }),
			disc_union: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.disc_union = du_one.parse(parser); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, IMessageParse pt, IMessageParse disc_union)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, pt, disc_union);
		else if (parser is JsonParser jsonP)
			parse(jsonP, pt, disc_union);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "pt" )
				pt.parse(parser);
			else if ( key == "disc_union" )
				disc_union.parse(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		pt.parse(parser);
		disc_union.parse(parser);
	}
} // class struct_du

//**********************************************************************
// STRUCT "struct_one" Targets: JSON GMQ (10 parameters)
//  1. INTEGER firstParam (REQUIRED)
//  2. VECTOR<INTEGER> secondParam (REQUIRED)
//  3. VECTOR< STRUCT point3D> thirdParam (REQUIRED)
//  4. UINTEGER forthParam (REQUIRED)
//  5. CHARACTER_STRING fifthParam (REQUIRED)
//  6. VECTOR<NONEXTENDABLE STRUCT point> sixthParam (REQUIRED)
//  7. REAL seventhParam (REQUIRED)
//  8. STRUCT NONEXTENDABLE point eighthParam (REQUIRED)
//  9. STRUCT point3D ninethParam (REQUIRED)
//  10. VECTOR<REAL> tenthParam (REQUIRED)
//**********************************************************************

public class struct_one : IEquatable<struct_one>
{
	public Int64 firstParam;
	public List<Int64> secondParam;
	public List<point3D> thirdParam;
	public UInt64 forthParam;
	public String fifthParam;
	public List<point> sixthParam;
	public Double seventhParam;
	public point eighthParam;
	public point3D ninethParam;
	public List<Double> tenthParam;

	public bool Equals(struct_one other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.firstParam == other.firstParam &&
				Enumerable.SequenceEqual(this.secondParam, other.secondParam) &&
				Enumerable.SequenceEqual(this.thirdParam, other.thirdParam) &&
				this.forthParam == other.forthParam &&
				this.fifthParam == other.fifthParam &&
				Enumerable.SequenceEqual(this.sixthParam, other.sixthParam) &&
				this.seventhParam == other.seventhParam &&
				this.eighthParam.Equals(other.eighthParam) &&
				this.ninethParam.Equals(other.ninethParam) &&
				Enumerable.SequenceEqual(this.tenthParam, other.tenthParam);
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as struct_one);
	}
	public static bool operator ==(struct_one left, struct_one right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(struct_one left, struct_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		composer.append( "{\n  ");
		composer.addNamePart("firstParam");
		composer.composeSignedInteger(firstParam);
		composer.append( ",\n  " );
		composer.addNamePart("secondParam");
		secondParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("thirdParam");
		thirdParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("forthParam");
		composer.composeUnsignedInteger(forthParam);
		composer.append( ",\n  " );
		composer.addNamePart("fifthParam");
		composer.composeString(fifthParam);
		composer.append( ",\n  " );
		composer.addNamePart("sixthParam");
		sixthParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("seventhParam");
		composer.composeReal(seventhParam);
		composer.append( ",\n  " );
		composer.addNamePart("eighthParam");
		eighthParam.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("ninethParam");
		ninethParam.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("tenthParam");
		tenthParam.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		composer.composeSignedInteger(firstParam);
		secondParam.composeGmq(composer);
		thirdParam.composeGmq(composer);
		composer.composeUnsignedInteger(forthParam);
		composer.composeString(fifthParam);
		sixthParam.composeGmq(composer);
		composer.composeReal(seventhParam);
		eighthParam.compose(composer);
		ninethParam.compose(composer);
		tenthParam.composeGmq(composer);
	}
	public static struct_one parse(ParserBase parser)
	{
		struct_one tmp = new struct_one();
		parse(parser,
			firstParam: ref tmp.firstParam,
			secondParam: new CollectionWrapperForParsing(
				() => { tmp.secondParam = new List<Int64>(); },
				(ParserBase parser, int ordinal) => { Int64 val; parser.parseSignedInteger(out val); tmp.secondParam.Add(val); }),
			thirdParam: new CollectionWrapperForParsing(
				() => { tmp.thirdParam = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.thirdParam.Add(val); }),
			forthParam: ref tmp.forthParam,
			fifthParam: ref tmp.fifthParam,
			sixthParam: new CollectionWrapperForParsing(
				() => { tmp.sixthParam = new List<point>(); },
				(ParserBase parser, int ordinal) => { point val = point.parse(parser); tmp.sixthParam.Add(val); }),
			seventhParam: ref tmp.seventhParam,
			eighthParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.eighthParam = point.parse(parser); }),
			ninethParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.ninethParam = point3D.parse(parser); }),
			tenthParam: new CollectionWrapperForParsing(
				() => { tmp.tenthParam = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.tenthParam.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "firstParam" )
				parser.parseSignedInteger(out firstParam);
			else if ( key == "secondParam" )
				secondParam.parseJson(parser);
			else if ( key == "thirdParam" )
				thirdParam.parseJson(parser);
			else if ( key == "forthParam" )
				parser.parseUnsignedInteger(out forthParam);
			else if ( key == "fifthParam" )
				parser.parseString(out fifthParam);
			else if ( key == "sixthParam" )
				sixthParam.parseJson(parser);
			else if ( key == "seventhParam" )
				parser.parseReal(out seventhParam);
			else if ( key == "eighthParam" )
				eighthParam.parse(parser);
			else if ( key == "ninethParam" )
				ninethParam.parse(parser);
			else if ( key == "tenthParam" )
				tenthParam.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		parser.parseSignedInteger(out firstParam);
		secondParam.parseGmq(parser);
		thirdParam.parseGmq(parser);
		parser.parseUnsignedInteger(out forthParam);
		parser.parseString(out fifthParam);
		sixthParam.parseGmq(parser);
		parser.parseReal(out seventhParam);
		eighthParam.parse(parser);
		ninethParam.parse(parser);
		tenthParam.parseGmq(parser);
	}
} // class struct_one

//////////////////////////////////////////////////////////////
//
//  Scopes:
//
//  test_gmq
//  {
//    message_two
//    message_four
//    message_du
//  }
//
//  test_json
//  {
//    message_three
//    message_five
//  }
//
//////////////////////////////////////////////////////////////

public class test_gmq
{
	public enum MsgId { message_two = 2, message_four = 4, message_du = 5 }

	public static MessageHandler makeMessageHandler( MsgId id, MessageHandler.HandlerDelegate handler )
	{
		return new MessageHandler((ulong)id, handler);
	}
	public static MessageHandler makeDefaultMessageHandler( MessageHandler.HandlerDelegate handler)
	{
		return new MessageHandler(MessageHandler.DefaultHandler, handler);
	}
	public static void handleMessage( BufferT buffer, params MessageHandler[] handlers )
	{
		handleMessage(buffer.getReadIterator(), handlers);
	}
	public static void handleMessage( ReadIteratorT riter, params MessageHandler[] handlers )
	{
		GmqParser parser = new GmqParser( riter );
		MessageHandler.gmq_handle( parser, handlers );
	}

//**********************************************************************
// MESSAGE "message_two" Targets: GMQ (0 parameters)
//**********************************************************************

public class message_two : struct_one
{
	public new static message_two parse(ParserBase parser)
	{
		message_two tmp = new message_two();
		parse(parser,
			firstParam: ref tmp.firstParam,
			secondParam: new CollectionWrapperForParsing(
				() => { tmp.secondParam = new List<Int64>(); },
				(ParserBase parser, int ordinal) => { Int64 val; parser.parseSignedInteger(out val); tmp.secondParam.Add(val); }),
			thirdParam: new CollectionWrapperForParsing(
				() => { tmp.thirdParam = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.thirdParam.Add(val); }),
			forthParam: ref tmp.forthParam,
			fifthParam: ref tmp.fifthParam,
			sixthParam: new CollectionWrapperForParsing(
				() => { tmp.sixthParam = new List<point>(); },
				(ParserBase parser, int ordinal) => { point val = point.parse(parser); tmp.sixthParam.Add(val); }),
			seventhParam: ref tmp.seventhParam,
			eighthParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.eighthParam = point.parse(parser); }),
			ninethParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.ninethParam = point3D.parse(parser); }),
			tenthParam: new CollectionWrapperForParsing(
				() => { tmp.tenthParam = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.tenthParam.Add(val); })
		);
		return tmp;
	}
	public new static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
} // class message_two

	public static void composeMessage_message_two(BufferT buffer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgId.message_two);
		message_two.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}

//**********************************************************************
// MESSAGE "message_four" NONEXTENDABLE Targets: GMQ (2 parameters)
//  1. STRUCT point pt (REQUIRED)
//  2. VECTOR< STRUCT point3D> pts3d (REQUIRED)
//**********************************************************************

public class message_four : IEquatable<message_four>
{
	public point pt;
	public List<point3D> pts3d;

	public bool Equals(message_four other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.pt.Equals(other.pt) &&
				Enumerable.SequenceEqual(this.pts3d, other.pts3d);
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as message_four);
	}
	public static bool operator ==(message_four left, message_four right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(message_four left, message_four right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public static void compose(ComposerBase composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, pt, pts3d);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, pt, pts3d);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		composer.append( "{\n  ");
		composer.addNamePart("pt");
		pt.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("pts3d");
		pts3d.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		pt.compose(composer);
		pts3d.composeGmq(composer);
	}
	public static message_four parse(ParserBase parser)
	{
		message_four tmp = new message_four();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point.parse(parser); }),
			pts3d: new CollectionWrapperForParsing(
				() => { tmp.pts3d = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.pts3d.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, IMessageParse pt, ICollectionParse pts3d)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, pt, pts3d);
		else if (parser is JsonParser jsonP)
			parse(jsonP, pt, pts3d);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "pt" )
				pt.parse(parser);
			else if ( key == "pts3d" )
				pts3d.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		pt.parse(parser);
		pts3d.parseGmq(parser);
	}
} // class message_four

	public static void composeMessage_message_four(BufferT buffer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgId.message_four);
		message_four.compose(composer, pt, pts3d);
	}

//**********************************************************************
// MESSAGE "message_du" Targets: GMQ (0 parameters)
//**********************************************************************

public class message_du : struct_du
{
	public new static message_du parse(ParserBase parser)
	{
		message_du tmp = new message_du();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point3D.parse(parser); }),
			disc_union: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.disc_union = du_one.parse(parser); })
		);
		return tmp;
	}
	public new static void compose(ComposerBase composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		struct_du.compose(composer, pt, disc_union);
	}
	protected new static void parse(ParserBase parser, IMessageParse pt, IMessageParse disc_union)
	{
		struct_du.parse(parser, pt, disc_union);
	}
	public new static void compose(GmqComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		struct_du.compose(composer, pt, disc_union);
	}
	protected new static void parse(GmqParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		struct_du.parse(parser, pt, disc_union);
	}
	public new static void compose(JsonComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		struct_du.compose(composer, pt, disc_union);
	}
	protected new static void parse(JsonParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		struct_du.parse(parser, pt, disc_union);
	}
} // class message_du

	public static void composeMessage_message_du(BufferT buffer, IMessageCompose pt, IMessageCompose disc_union)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgId.message_du);
		message_du.compose(composer, pt, disc_union);
	}

} // class test_gmq

public class test_json
{
	public enum MsgId { message_three = 3, message_five = 5 }

	public static MessageHandler makeMessageHandler( MsgId id, MessageHandler.HandlerDelegate handler )
	{
		return new MessageHandler((ulong)id, handler);
	}
	public static MessageHandler makeDefaultMessageHandler( MessageHandler.HandlerDelegate handler)
	{
		return new MessageHandler(MessageHandler.DefaultHandler, handler);
	}
	public static void handleMessage( BufferT buffer, params MessageHandler[] handlers )
	{
		handleMessage(buffer.getReadIterator(), handlers);
	}
	public static void handleMessage( ReadIteratorT riter, params MessageHandler[] handlers )
	{
		JsonParser parser = new JsonParser( riter );
		MessageHandler.json_handle( parser, handlers );
	}

//**********************************************************************
// MESSAGE "message_three" Targets: JSON (0 parameters)
//**********************************************************************

public class message_three : struct_one
{
	public new static message_three parse(ParserBase parser)
	{
		message_three tmp = new message_three();
		parse(parser,
			firstParam: ref tmp.firstParam,
			secondParam: new CollectionWrapperForParsing(
				() => { tmp.secondParam = new List<Int64>(); },
				(ParserBase parser, int ordinal) => { Int64 val; parser.parseSignedInteger(out val); tmp.secondParam.Add(val); }),
			thirdParam: new CollectionWrapperForParsing(
				() => { tmp.thirdParam = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.thirdParam.Add(val); }),
			forthParam: ref tmp.forthParam,
			fifthParam: ref tmp.fifthParam,
			sixthParam: new CollectionWrapperForParsing(
				() => { tmp.sixthParam = new List<point>(); },
				(ParserBase parser, int ordinal) => { point val = point.parse(parser); tmp.sixthParam.Add(val); }),
			seventhParam: ref tmp.seventhParam,
			eighthParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.eighthParam = point.parse(parser); }),
			ninethParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.ninethParam = point3D.parse(parser); }),
			tenthParam: new CollectionWrapperForParsing(
				() => { tmp.tenthParam = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.tenthParam.Add(val); })
		);
		return tmp;
	}
	public new static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
} // class message_three

	public static void composeMessage_message_three(BufferT buffer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		JsonComposer composer = new JsonComposer(buffer);

		composer.append("{\n  ");
		composer.addNamePart("msgid");
		composer.composeUnsignedInteger((UInt64)MsgId.message_three);
		composer.append(",\n  ");
		composer.addNamePart("msgbody");
		message_three.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		composer.append("\n}");
	}

//**********************************************************************
// MESSAGE "message_five" NONEXTENDABLE Targets: JSON (2 parameters)
//  1. STRUCT point pt (REQUIRED)
//  2. VECTOR< STRUCT point3D> pts3d (REQUIRED)
//**********************************************************************

public class message_five : IEquatable<message_five>
{
	public point pt;
	public List<point3D> pts3d;

	public bool Equals(message_five other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.pt.Equals(other.pt) &&
				Enumerable.SequenceEqual(this.pts3d, other.pts3d);
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as message_five);
	}
	public static bool operator ==(message_five left, message_five right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(message_five left, message_five right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public static void compose(ComposerBase composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, pt, pts3d);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, pt, pts3d);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		composer.append( "{\n  ");
		composer.addNamePart("pt");
		pt.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("pts3d");
		pts3d.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		pt.compose(composer);
		pts3d.composeGmq(composer);
	}
	public static message_five parse(ParserBase parser)
	{
		message_five tmp = new message_five();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point.parse(parser); }),
			pts3d: new CollectionWrapperForParsing(
				() => { tmp.pts3d = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.pts3d.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, IMessageParse pt, ICollectionParse pts3d)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, pt, pts3d);
		else if (parser is JsonParser jsonP)
			parse(jsonP, pt, pts3d);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "pt" )
				pt.parse(parser);
			else if ( key == "pts3d" )
				pts3d.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		pt.parse(parser);
		pts3d.parseGmq(parser);
	}
} // class message_five

	public static void composeMessage_message_five(BufferT buffer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		JsonComposer composer = new JsonComposer(buffer);

		composer.append("{\n  ");
		composer.addNamePart("msgid");
		composer.composeUnsignedInteger((UInt64)MsgId.message_five);
		composer.append(",\n  ");
		composer.addNamePart("msgbody");
		message_five.compose(composer, pt, pts3d);
		composer.append("\n}");
	}

} // class test_json

//////////////////////////////////////////////////////////////
//
//                 Publishables
//
//////////////////////////////////////////////////////////////

namespace publishable
{

public interface Property
{
	String name { get; set; }
	String value { get; set; }
} // interface Property

public class Property_impl : Property
{
	public String name { get; set; }
	public String value { get; set; }
} // class Property_impl

public class Property_subs : Property
{
	Property t;
	enum Address { name = 0, value = 1 };
	public Property_subs(Property t)
	{
		this.t = t;
	}
	public String name
	{
		get { return t.name; }
		set { throw new InvalidOperationException(); }
	}
	public String value
	{
		get { return t.value; }
		set { throw new InvalidOperationException(); }
	}
	public static void parseForStateSync(IPublishableParser parser, Property t)
	{
		t.name = parser.parseString("name");
		t.value = parser.parseString("value");
	}
	public static bool parse(IPublishableParser parser, Property t)
	{
		bool changed = false;
		{
			String newVal = parser.parseString("name");
			if(newVal != t.name)
			{
				t.name = newVal;
				changed = true;
			}
		}
		{
			String newVal = parser.parseString("value");
			if(newVal != t.value)
			{
				t.value = newVal;
				changed = true;
			}
		}
		return changed;
	}
	public static bool parse(IPublishableParser parser, Property t, UInt64[] addr, int offset)
	{
		bool changed = false;
		switch ((Address)addr[offset])
		{
			case Address.name:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
			String newVal = parser.parseString("name");
			if(newVal != t.name)
			{
				t.name = newVal;
				changed = true;
			}
			}
			break;
			case Address.value:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
			String newVal = parser.parseString("value");
			if(newVal != t.value)
			{
				t.value = newVal;
				changed = true;
			}
			}
			break;
			default:
				throw new Exception();
		}
	return changed;
	}
} // class Property_subs

public class Property_publ : Property
{
	Property t;
	IPublishableComposer composer;
	UInt64[] address;
	enum Address { name = 0, value = 1 };
	public Property_publ(Property t, IPublishableComposer composer, UInt64[] baseAddr, UInt64 id)
	{
		this.t = t;
		this.composer = composer;
		this.address = Publishable.makeAddress(baseAddr, id);
	}
	public String name
	{
		get { return t.name; }
		set
		{
			if (value != t.name)
			{
				t.name = value;
				composer.composeAddress(address, (UInt64)Address.name);
				composer.composeString("value", value, false);
				composer.composePublishableStructEnd(false);
			}
		}
	}
	public String value
	{
		get { return t.value; }
		set
		{
			if (value != t.value)
			{
				t.value = value;
				composer.composeAddress(address, (UInt64)Address.value);
				composer.composeString("value", value, false);
				composer.composePublishableStructEnd(false);
			}
		}
	}
	public static void compose(IPublishableComposer composer, Property t)
	{
		composer.composeString("name", t.name, true);
		composer.composeString("value", t.value, false);
	}
} // class Property_publ


public interface HtmlTag
{
	Property p1 { get; set; }
	Property make_p1();
	Property p2 { get; set; }
	Property make_p2();
	Int64 i1 { get; set; }
} // interface HtmlTag

public class HtmlTag_impl : HtmlTag
{
	public Property p1 { get; set; }
	public Property make_p1() { return new Property_impl(); }
	public Property p2 { get; set; }
	public Property make_p2() { return new Property_impl(); }
	public Int64 i1 { get; set; }
} // class HtmlTag_impl

public class HtmlTag_subs : HtmlTag
{
	HtmlTag t;
	enum Address { p1 = 0, p2 = 1, i1 = 2 };
	public HtmlTag_subs(HtmlTag t)
	{
		this.t = t;
	}
	public Property p1
	{
		get { return new Property_subs(t.p1); }
		set { throw new InvalidOperationException(); }
	}
	public Property make_p1() { throw new InvalidOperationException(); }
	public Property p2
	{
		get { return new Property_subs(t.p2); }
		set { throw new InvalidOperationException(); }
	}
	public Property make_p2() { throw new InvalidOperationException(); }
	public Int64 i1
	{
		get { return t.i1; }
		set { throw new InvalidOperationException(); }
	}
	public static void parseForStateSync(IPublishableParser parser, HtmlTag t)
	{
		parser.parsePublishableStructBegin("p1");
		Property_subs.parseForStateSync(parser, t.p1);
		parser.parsePublishableStructEnd();
		parser.parsePublishableStructBegin("p2");
		Property_subs.parseForStateSync(parser, t.p2);
		parser.parsePublishableStructEnd();
		t.i1 = parser.parseInteger("i1");
	}
	public static bool parse(IPublishableParser parser, HtmlTag t)
	{
		bool changed = false;
		{
			parser.parsePublishableStructBegin("p1");
			bool currentChanged = Property_subs.parse(parser, t.p1);
			parser.parsePublishableStructEnd();
			if(currentChanged)
			{
					changed = true;
					// TODO
			}
		}
		{
			parser.parsePublishableStructBegin("p2");
			bool currentChanged = Property_subs.parse(parser, t.p2);
			parser.parsePublishableStructEnd();
			if(currentChanged)
			{
					changed = true;
					// TODO
			}
		}
		{
			Int64 newVal = parser.parseInteger("i1");
			if(newVal != t.i1)
			{
				t.i1 = newVal;
				changed = true;
			}
		}
		return changed;
	}
	public static bool parse(IPublishableParser parser, HtmlTag t, UInt64[] addr, int offset)
	{
		bool changed = false;
		switch ((Address)addr[offset])
		{
			case Address.p1:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1)
				{
					parser.parsePublishableStructBegin("p1");
					currentChanged = Property_subs.parse(parser, t.p1);
					parser.parsePublishableStructEnd();
				}
				else if(addr.Length > offset + 1)
				{
					currentChanged = Property_subs.parse(parser, t.p1, addr, offset + 1);
				}
				else
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			case Address.p2:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1)
				{
					parser.parsePublishableStructBegin("p2");
					currentChanged = Property_subs.parse(parser, t.p2);
					parser.parsePublishableStructEnd();
				}
				else if(addr.Length > offset + 1)
				{
					currentChanged = Property_subs.parse(parser, t.p2, addr, offset + 1);
				}
				else
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			case Address.i1:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
			Int64 newVal = parser.parseInteger("i1");
			if(newVal != t.i1)
			{
				t.i1 = newVal;
				changed = true;
			}
			}
			break;
			default:
				throw new Exception();
		}
	return changed;
	}
} // class HtmlTag_subs

public class HtmlTag_publ : HtmlTag
{
	HtmlTag t;
	IPublishableComposer composer;
	UInt64[] address;
	enum Address { p1 = 0, p2 = 1, i1 = 2 };
	public HtmlTag_publ(HtmlTag t, IPublishableComposer composer, UInt64[] baseAddr, UInt64 id)
	{
		this.t = t;
		this.composer = composer;
		this.address = Publishable.makeAddress(baseAddr, id);
	}
	public Property p1
	{
		get { return new Property_subs(t.p1); }
		set
		{
			if (value != t.p1)
			{
				t.p1 = value;
				composer.composeAddress(address, (UInt64)Address.p1);
				composer.composePublishableStructBegin("value");
				Property_publ.compose(composer, value);
				composer.composePublishableStructEnd(false);
				composer.composePublishableStructEnd(false);
			}
		}
	}
	public Property make_p1() { return t.make_p1(); }
	public Property p2
	{
		get { return new Property_subs(t.p2); }
		set
		{
			if (value != t.p2)
			{
				t.p2 = value;
				composer.composeAddress(address, (UInt64)Address.p2);
				composer.composePublishableStructBegin("value");
				Property_publ.compose(composer, value);
				composer.composePublishableStructEnd(false);
				composer.composePublishableStructEnd(false);
			}
		}
	}
	public Property make_p2() { return t.make_p2(); }
	public Int64 i1
	{
		get { return t.i1; }
		set
		{
			if (value != t.i1)
			{
				t.i1 = value;
				composer.composeAddress(address, (UInt64)Address.i1);
				composer.composeInteger("value", value, false);
				composer.composePublishableStructEnd(false);
			}
		}
	}
	public static void compose(IPublishableComposer composer, HtmlTag t)
	{
		composer.composePublishableStructBegin("p1");
		Property_publ.compose(composer, t.p1);
		composer.composePublishableStructEnd(true);
		composer.composePublishableStructBegin("p2");
		Property_publ.compose(composer, t.p2);
		composer.composePublishableStructEnd(true);
		composer.composeInteger("i1", t.i1, false);
	}
} // class HtmlTag_publ


//**********************************************************************
// PUBLISHABLE html_data (1 parameters)
// 1. STRUCT HtmlTag tag
//**********************************************************************

public interface html_data
{
	HtmlTag tag { get; set; }
	HtmlTag make_tag();
} // interface html_data

public class html_data_impl : html_data
{
	public HtmlTag tag { get; set; }
	public HtmlTag make_tag() { return new HtmlTag_impl(); }
} // class html_data_impl

public class html_data_subs : html_data, StateSubscriberBase
{
	html_data t;
	enum Address { tag = 0 };
	public html_data_subs(html_data t)
	{
		this.t = t;
	}
	public HtmlTag tag
	{
		get { return new HtmlTag_subs(t.tag); }
		set { throw new InvalidOperationException(); }
	}
	public HtmlTag make_tag() { throw new InvalidOperationException(); }
	public static void parseForStateSync(IPublishableParser parser, html_data t)
	{
		parser.parsePublishableStructBegin("tag");
		HtmlTag_subs.parseForStateSync(parser, t.tag);
		parser.parsePublishableStructEnd();
	}
	public static bool parse(IPublishableParser parser, html_data t)
	{
		bool changed = false;
		{
			parser.parsePublishableStructBegin("tag");
			bool currentChanged = HtmlTag_subs.parse(parser, t.tag);
			parser.parsePublishableStructEnd();
			if(currentChanged)
			{
					changed = true;
					// TODO
			}
		}
		return changed;
	}
	public static bool parse(IPublishableParser parser, html_data t, UInt64[] addr, int offset)
	{
		bool changed = false;
		switch ((Address)addr[offset])
		{
			case Address.tag:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1)
				{
					parser.parsePublishableStructBegin("tag");
					currentChanged = HtmlTag_subs.parse(parser, t.tag);
					parser.parsePublishableStructEnd();
				}
				else if(addr.Length > offset + 1)
				{
					currentChanged = HtmlTag_subs.parse(parser, t.tag, addr, offset + 1);
				}
				else
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			default:
				throw new Exception();
		}
	return changed;
	}
	public String name() { return "html_data"; }
	public UInt64 stateTypeID() { return 3; }
	public void applyGmqMessageWithUpdates(IPublishableParser parser) { applyMessageWithUpdates(parser); }
	public void applyJsonMessageWithUpdates(IPublishableParser parser) { applyMessageWithUpdates(parser); }
	public void applyGmqStateSyncMessage(IPublishableParser parser) { applyStateSyncMessage(parser); }
	public void applyJsonStateSyncMessage(IPublishableParser parser) { applyStateSyncMessage(parser); }
	public void applyMessageWithUpdates(IPublishableParser parser)
	{
		parser.parseStateUpdateMessageBegin();
		UInt64[] addr = null;
		while(parser.parseAddress(ref addr))
		{
			html_data_subs.parse(parser, this, addr, 0);
			addr = null;
		}
		parser.parseStateUpdateMessageEnd();
	}
	public void applyStateSyncMessage(IPublishableParser parser)
	{
		parser.parseStructBegin();
		html_data_subs.parseForStateSync(parser, this);
		parser.parseStructEnd();
	}
} // class html_data_subs

public class html_data_publ : html_data, StatePublisherBase
{
	html_data t;
	IPublishableComposer composer;
	UInt64[] address;
	enum Address { tag = 0 };
	public html_data_publ(html_data t, IPublishableComposer composer, UInt64[] baseAddr, UInt64 id)
	{
		this.t = t;
		this.composer = composer;
		this.address = Publishable.makeAddress(baseAddr, id);
	}
	public HtmlTag tag
	{
		get { return new HtmlTag_subs(t.tag); }
		set
		{
			if (value != t.tag)
			{
				t.tag = value;
				composer.composeAddress(address, (UInt64)Address.tag);
				composer.composePublishableStructBegin("value");
				HtmlTag_publ.compose(composer, value);
				composer.composePublishableStructEnd(false);
				composer.composePublishableStructEnd(false);
			}
		}
	}
	public HtmlTag make_tag() { return t.make_tag(); }
	public static void compose(IPublishableComposer composer, html_data t)
	{
		composer.composePublishableStructBegin("tag");
		HtmlTag_publ.compose(composer, t.tag);
		composer.composePublishableStructEnd(false);
	}
	public String name() { return "html_data"; }
	public UInt64 stateTypeID() { return 3; }
	public void generateStateSyncMessage(IPublishableComposer composer)
	{
		composer.composeStructBegin();
		html_data_publ.compose(composer, this);
		composer.composeStructEnd();
	}
	public void startTick(BufferT buff)
	{
		composer.startTick(buff);
		composer.composeStateUpdateMessageBegin();
	}
	public BufferT endTick()
	{
		composer.composeStateUpdateMessageEnd();
		return composer.endTick();
	}
} // class html_data_publ



} // namespace publishable


} // namespace mtest

