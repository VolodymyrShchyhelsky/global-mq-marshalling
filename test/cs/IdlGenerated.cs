//////////////////////////////////////////////////////////////
//
//  Do not edit! file automatically generated by idl_compiler
//
//////////////////////////////////////////////////////////////

using globalmq.marshalling;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace mtest
{

//////////////////////////////////////////////////////////////
//
//                 Messages
//
//////////////////////////////////////////////////////////////

//**********************************************************************
// DISCRIMINATED_UNION "du_one" Targets: GMQ (2 cases)
//  CASE one (3 parameters)(3 parameters)
//    1. REAL D1 (REQUIRED)
//    2. REAL D2 (REQUIRED)
//    3. REAL D3 (REQUIRED)
//  CASE two (1 parameters)(1 parameters)
//    1. VECTOR<REAL> Data (REQUIRED)
//**********************************************************************

public class du_one : IEquatable<du_one>
{
	public enum Variants { one = 1, two = 2, unknown };
	Object mem;

public class CASE_one : IEquatable<CASE_one>
{
	public Double D1;
	public Double D2;
	public Double D3;

	public override bool Equals(object obj)
	{
		return obj is CASE_one d && Equals(d);
	}
	public static bool operator ==(CASE_one left, CASE_one right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(CASE_one left, CASE_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(CASE_one other)
	{
		return other != null  &&
			this.D1 == other.D1 &&
			this.D2 == other.D2 &&
			this.D3 == other.D3;
	}
	public static void compose(ComposerBase composer, Double D1, Double D2, Double D3)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, D1, D2, D3);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, D1, D2, D3);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Double D1, Double D2, Double D3)
	{
		composer.append( "{\n  ");
		composer.addNamePart("D1");
		composer.composeReal(D1);
		composer.append( ",\n  " );
		composer.addNamePart("D2");
		composer.composeReal(D2);
		composer.append( ",\n  " );
		composer.addNamePart("D3");
		composer.composeReal(D3);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Double D1, Double D2, Double D3)
	{
		composer.composeReal(D1);
		composer.composeReal(D2);
		composer.composeReal(D3);
	}
	public static CASE_one parse(ParserBase parser)
	{
		CASE_one tmp = new CASE_one();
		parse(parser,
			D1: ref tmp.D1,
			D2: ref tmp.D2,
			D3: ref tmp.D3
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Double D1, ref Double D2, ref Double D3)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref D1, ref D2, ref D3);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref D1, ref D2, ref D3);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Double D1, ref Double D2, ref Double D3)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "D1" )
				parser.parseReal(out D1);
			else if ( key == "D2" )
				parser.parseReal(out D2);
			else if ( key == "D3" )
				parser.parseReal(out D3);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Double D1, ref Double D2, ref Double D3)
	{
		parser.parseReal(out D1);
		parser.parseReal(out D2);
		parser.parseReal(out D3);
	}
} // class CASE_one

public class CASE_two : IEquatable<CASE_two>
{
	public List<Double> Data;

	public override bool Equals(object obj)
	{
		return obj is CASE_two d && Equals(d);
	}
	public static bool operator ==(CASE_two left, CASE_two right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(CASE_two left, CASE_two right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(CASE_two other)
	{
		return other != null  &&
			Enumerable.SequenceEqual(this.Data, other.Data);
	}
	public static void compose(ComposerBase composer, ICollectionCompose Data)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, Data);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, Data);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, ICollectionCompose Data)
	{
		composer.append( "{\n  ");
		composer.addNamePart("Data");
		Data.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, ICollectionCompose Data)
	{
		Data.composeGmq(composer);
	}
	public static CASE_two parse(ParserBase parser)
	{
		CASE_two tmp = new CASE_two();
		parse(parser,
			Data: new CollectionWrapperForParsing(
				() => { tmp.Data = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.Data.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ICollectionParse Data)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, Data);
		else if (parser is JsonParser jsonP)
			parse(jsonP, Data);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ICollectionParse Data)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "Data" )
				Data.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ICollectionParse Data)
	{
		Data.parseGmq(parser);
	}
} // class CASE_two

	public override bool Equals(object obj)
	{
		return obj is du_one d && Equals(d);
	}
	public static bool operator ==(du_one left, du_one right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(du_one left, du_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(du_one other)
	{
		return other != null && this.mem.Equals(other.mem);
	}
	public Variants currentVariant()
	{
		if(this.mem == null)
			return Variants.unknown;
		else if(this.mem is CASE_one)
			return Variants.one;
		else if(this.mem is CASE_two)
			return Variants.two;
		else
			return Variants.unknown;
	}

	// IDL CASE one:
	public Double D1
	{
		get { return ((CASE_one)this.mem).D1; }
		set { ((CASE_one)this.mem).D1 = value; }
	}
	public Double D2
	{
		get { return ((CASE_one)this.mem).D2; }
		set { ((CASE_one)this.mem).D2 = value; }
	}
	public Double D3
	{
		get { return ((CASE_one)this.mem).D3; }
		set { ((CASE_one)this.mem).D3 = value; }
	}

	// IDL CASE two:
	public List<Double> Data
	{
		get { return ((CASE_two)this.mem).Data; }
		set { ((CASE_two)this.mem).Data = value; }
	}
	public static du_one parse(ParserBase parser)
	{
		if (parser is GmqParser gmqP)
			return parse(gmqP);
		else if (parser is JsonParser jsonP)
			return parse(jsonP);
		else
			throw new ArgumentException();
	}
	protected static du_one parse(JsonParser parser)
	{
		du_one val = new du_one();

		parser.skipDelimiter('{');
		string key;
		parser.readKeyFromJson( out key );
		if (key != "caseid")
			throw new FormatException();
		Int64 caseID;
		parser.parseSignedInteger(out caseID);
		parser.skipSpacesEtc();
		parser.skipDelimiter(',');
		parser.readKeyFromJson(out key);
		if (key != "caseData")
			throw new FormatException();

		switch ((Variants)caseID)
		{
			case Variants.one: val.mem = CASE_one.parse(parser); break;
			case Variants.two: val.mem = CASE_two.parse(parser); break;
			default: throw new System.Exception();
		}

		parser.skipDelimiter('}');

		return val;
	}
	protected static du_one parse(GmqParser parser)
	{
		du_one val = new du_one();

		Int64 caseID;
		parser.parseSignedInteger(out caseID);

		switch ((Variants)caseID)
		{
			case Variants.one: val.mem = CASE_one.parse(parser); break;
			case Variants.two: val.mem = CASE_two.parse(parser); break;
			default: throw new System.Exception();
		}

		return val;
	}

	// IDL CASE one:
	public static void compose_one(ComposerBase composer, Double D1, Double D2, Double D3)
	{
		if (composer is GmqComposer gmqC)
			compose_one(gmqC, D1, D2, D3);
		else if (composer is JsonComposer jsonC)
			compose_one(jsonC, D1, D2, D3);
		else
			throw new ArgumentException();
	}
	public static void compose_one(JsonComposer composer, Double D1, Double D2, Double D3)
	{
		composer.append( "{\n  ");
		composer.addNamePart("caseid");
		composer.composeSignedInteger((Int64)Variants.one);
		composer.append( ",\n  " );
		composer.addNamePart("caseData");
		CASE_one.compose(composer, D1, D2, D3);
		composer.append( "\n}" );
	}
	public static void compose_one(GmqComposer composer, Double D1, Double D2, Double D3)
	{
		composer.composeSignedInteger((Int64)Variants.one);
		CASE_one.compose(composer, D1, D2, D3);
	}

	// IDL CASE two:
	public static void compose_two(ComposerBase composer, ICollectionCompose Data)
	{
		if (composer is GmqComposer gmqC)
			compose_two(gmqC, Data);
		else if (composer is JsonComposer jsonC)
			compose_two(jsonC, Data);
		else
			throw new ArgumentException();
	}
	public static void compose_two(JsonComposer composer, ICollectionCompose Data)
	{
		composer.append( "{\n  ");
		composer.addNamePart("caseid");
		composer.composeSignedInteger((Int64)Variants.two);
		composer.append( ",\n  " );
		composer.addNamePart("caseData");
		CASE_two.compose(composer, Data);
		composer.append( "\n}" );
	}
	public static void compose_two(GmqComposer composer, ICollectionCompose Data)
	{
		composer.composeSignedInteger((Int64)Variants.two);
		CASE_two.compose(composer, Data);
	}
} // class du_one

//**********************************************************************
// STRUCT "point3D" Targets: JSON GMQ (3 parameters)
//  1. INTEGER x (REQUIRED)
//  2. INTEGER y (REQUIRED)
//  3. INTEGER z (REQUIRED)
//**********************************************************************

public class point3D : IEquatable<point3D>
{
	public Int64 x;
	public Int64 y;
	public Int64 z;

	public override bool Equals(object obj)
	{
		return obj is point3D d && Equals(d);
	}
	public static bool operator ==(point3D left, point3D right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(point3D left, point3D right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(point3D other)
	{
		return other != null  &&
			this.x == other.x &&
			this.y == other.y &&
			this.z == other.z;
	}
	public static void compose(ComposerBase composer, Int64 x, Int64 y, Int64 z)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, x, y, z);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, x, y, z);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( ",\n  " );
		composer.addNamePart("z");
		composer.composeSignedInteger(z);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
		composer.composeSignedInteger(z);
	}
	public static point3D parse(ParserBase parser)
	{
		point3D tmp = new point3D();
		parse(parser,
			x: ref tmp.x,
			y: ref tmp.y,
			z: ref tmp.z
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref x, ref y, ref z);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref x, ref y, ref z);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
				parser.parseSignedInteger(out x);
			else if ( key == "y" )
				parser.parseSignedInteger(out y);
			else if ( key == "z" )
				parser.parseSignedInteger(out z);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		parser.parseSignedInteger(out x);
		parser.parseSignedInteger(out y);
		parser.parseSignedInteger(out z);
	}
} // class point3D

//**********************************************************************
// STRUCT "point" NONEXTENDABLE Targets: JSON GMQ (2 parameters)
//  1. INTEGER x (REQUIRED)
//  2. INTEGER y (REQUIRED)
//**********************************************************************

public class point : IEquatable<point>
{
	public Int64 x;
	public Int64 y;

	public override bool Equals(object obj)
	{
		return obj is point d && Equals(d);
	}
	public static bool operator ==(point left, point right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(point left, point right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(point other)
	{
		return other != null  &&
			this.x == other.x &&
			this.y == other.y;
	}
	public static void compose(ComposerBase composer, Int64 x, Int64 y)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, x, y);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, x, y);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 x, Int64 y)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
	}
	public static point parse(ParserBase parser)
	{
		point tmp = new point();
		parse(parser,
			x: ref tmp.x,
			y: ref tmp.y
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Int64 x, ref Int64 y)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref x, ref y);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref x, ref y);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Int64 x, ref Int64 y)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
				parser.parseSignedInteger(out x);
			else if ( key == "y" )
				parser.parseSignedInteger(out y);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Int64 x, ref Int64 y)
	{
		parser.parseSignedInteger(out x);
		parser.parseSignedInteger(out y);
	}
} // class point

//**********************************************************************
// STRUCT "struct_du" Targets: GMQ (2 parameters)
//  1. STRUCT point3D pt (REQUIRED)
//  2. DISCRIMINATED_UNION du_one disc_union (REQUIRED)
//**********************************************************************

public class struct_du : IEquatable<struct_du>
{
	public point3D pt;
	public du_one disc_union;

	public override bool Equals(object obj)
	{
		return obj is struct_du d && Equals(d);
	}
	public static bool operator ==(struct_du left, struct_du right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(struct_du left, struct_du right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(struct_du other)
	{
		return other != null  &&
			this.pt.Equals(other.pt) &&
			this.disc_union.Equals(other.disc_union);
	}
	public static void compose(ComposerBase composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, pt, disc_union);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, pt, disc_union);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		composer.append( "{\n  ");
		composer.addNamePart("pt");
		pt.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("disc_union");
		disc_union.compose(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		pt.compose(composer);
		disc_union.compose(composer);
	}
	public static struct_du parse(ParserBase parser)
	{
		struct_du tmp = new struct_du();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point3D.parse(parser); }),
			disc_union: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.disc_union = du_one.parse(parser); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, IMessageParse pt, IMessageParse disc_union)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, pt, disc_union);
		else if (parser is JsonParser jsonP)
			parse(jsonP, pt, disc_union);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "pt" )
				pt.parse(parser);
			else if ( key == "disc_union" )
				disc_union.parse(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		pt.parse(parser);
		disc_union.parse(parser);
	}
} // class struct_du

//**********************************************************************
// STRUCT "struct_one" Targets: JSON GMQ (10 parameters)
//  1. INTEGER firstParam (REQUIRED)
//  2. VECTOR<INTEGER> secondParam (REQUIRED)
//  3. VECTOR< STRUCT point3D> thirdParam (REQUIRED)
//  4. UINTEGER forthParam (REQUIRED)
//  5. CHARACTER_STRING fifthParam (REQUIRED)
//  6. VECTOR<NONEXTENDABLE STRUCT point> sixthParam (REQUIRED)
//  7. REAL seventhParam (REQUIRED)
//  8. STRUCT NONEXTENDABLE point eighthParam (REQUIRED)
//  9. STRUCT point3D ninethParam (REQUIRED)
//  10. VECTOR<REAL> tenthParam (REQUIRED)
//**********************************************************************

public class struct_one : IEquatable<struct_one>
{
	public Int64 firstParam;
	public List<Int64> secondParam;
	public List<point3D> thirdParam;
	public UInt64 forthParam;
	public String fifthParam;
	public List<point> sixthParam;
	public Double seventhParam;
	public point eighthParam;
	public point3D ninethParam;
	public List<Double> tenthParam;

	public override bool Equals(object obj)
	{
		return obj is struct_one d && Equals(d);
	}
	public static bool operator ==(struct_one left, struct_one right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(struct_one left, struct_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(struct_one other)
	{
		return other != null  &&
			this.firstParam == other.firstParam &&
			Enumerable.SequenceEqual(this.secondParam, other.secondParam) &&
			Enumerable.SequenceEqual(this.thirdParam, other.thirdParam) &&
			this.forthParam == other.forthParam &&
			this.fifthParam == other.fifthParam &&
			Enumerable.SequenceEqual(this.sixthParam, other.sixthParam) &&
			this.seventhParam == other.seventhParam &&
			this.eighthParam.Equals(other.eighthParam) &&
			this.ninethParam.Equals(other.ninethParam) &&
			Enumerable.SequenceEqual(this.tenthParam, other.tenthParam);
	}
	public static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		composer.append( "{\n  ");
		composer.addNamePart("firstParam");
		composer.composeSignedInteger(firstParam);
		composer.append( ",\n  " );
		composer.addNamePart("secondParam");
		secondParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("thirdParam");
		thirdParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("forthParam");
		composer.composeUnsignedInteger(forthParam);
		composer.append( ",\n  " );
		composer.addNamePart("fifthParam");
		composer.composeString(fifthParam);
		composer.append( ",\n  " );
		composer.addNamePart("sixthParam");
		sixthParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("seventhParam");
		composer.composeReal(seventhParam);
		composer.append( ",\n  " );
		composer.addNamePart("eighthParam");
		eighthParam.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("ninethParam");
		ninethParam.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("tenthParam");
		tenthParam.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		composer.composeSignedInteger(firstParam);
		secondParam.composeGmq(composer);
		thirdParam.composeGmq(composer);
		composer.composeUnsignedInteger(forthParam);
		composer.composeString(fifthParam);
		sixthParam.composeGmq(composer);
		composer.composeReal(seventhParam);
		eighthParam.compose(composer);
		ninethParam.compose(composer);
		tenthParam.composeGmq(composer);
	}
	public static struct_one parse(ParserBase parser)
	{
		struct_one tmp = new struct_one();
		parse(parser,
			firstParam: ref tmp.firstParam,
			secondParam: new CollectionWrapperForParsing(
				() => { tmp.secondParam = new List<Int64>(); },
				(ParserBase parser, int ordinal) => { Int64 val; parser.parseSignedInteger(out val); tmp.secondParam.Add(val); }),
			thirdParam: new CollectionWrapperForParsing(
				() => { tmp.thirdParam = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.thirdParam.Add(val); }),
			forthParam: ref tmp.forthParam,
			fifthParam: ref tmp.fifthParam,
			sixthParam: new CollectionWrapperForParsing(
				() => { tmp.sixthParam = new List<point>(); },
				(ParserBase parser, int ordinal) => { point val = point.parse(parser); tmp.sixthParam.Add(val); }),
			seventhParam: ref tmp.seventhParam,
			eighthParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.eighthParam = point.parse(parser); }),
			ninethParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.ninethParam = point3D.parse(parser); }),
			tenthParam: new CollectionWrapperForParsing(
				() => { tmp.tenthParam = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.tenthParam.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "firstParam" )
				parser.parseSignedInteger(out firstParam);
			else if ( key == "secondParam" )
				secondParam.parseJson(parser);
			else if ( key == "thirdParam" )
				thirdParam.parseJson(parser);
			else if ( key == "forthParam" )
				parser.parseUnsignedInteger(out forthParam);
			else if ( key == "fifthParam" )
				parser.parseString(out fifthParam);
			else if ( key == "sixthParam" )
				sixthParam.parseJson(parser);
			else if ( key == "seventhParam" )
				parser.parseReal(out seventhParam);
			else if ( key == "eighthParam" )
				eighthParam.parse(parser);
			else if ( key == "ninethParam" )
				ninethParam.parse(parser);
			else if ( key == "tenthParam" )
				tenthParam.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		parser.parseSignedInteger(out firstParam);
		secondParam.parseGmq(parser);
		thirdParam.parseGmq(parser);
		parser.parseUnsignedInteger(out forthParam);
		parser.parseString(out fifthParam);
		sixthParam.parseGmq(parser);
		parser.parseReal(out seventhParam);
		eighthParam.parse(parser);
		ninethParam.parse(parser);
		tenthParam.parseGmq(parser);
	}
} // class struct_one

//////////////////////////////////////////////////////////////
//
//  Scopes:
//
//  test_gmq
//  {
//    message_one
//    message_four
//    message_du
//  }
//
//  test_json
//  {
//    message_one
//    message_four
//  }
//
//////////////////////////////////////////////////////////////

public class test_gmq
{
public enum MsgIds { message_one = 1, message_four = 2, message_du = 5 }

	public static void handleMessage( BufferT buffer, MessageHandlerArray handlers )
	{
		handleMessage(buffer.getReadIterator(), handlers);
	}
	public static void handleMessage( ReadIteratorT riter, MessageHandlerArray handlers )
	{
		GmqParser parser = new GmqParser( riter );
		handlers.gmq_handle(parser);
	}

//**********************************************************************
// MESSAGE "message_one" Targets: GMQ (0 parameters)
//**********************************************************************

public class message_one : struct_one
{
	public new static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
} // class message_one

	public static void composeMessage_message_one(BufferT buffer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgIds.message_one);
		message_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}

//**********************************************************************
// MESSAGE "message_four" NONEXTENDABLE Targets: GMQ (2 parameters)
//  1. STRUCT point pt (REQUIRED)
//  2. VECTOR< STRUCT point3D> pts3d (REQUIRED)
//**********************************************************************

public class message_four : IEquatable<message_four>
{
	public point pt;
	public List<point3D> pts3d;

	public override bool Equals(object obj)
	{
		return obj is message_four d && Equals(d);
	}
	public static bool operator ==(message_four left, message_four right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(message_four left, message_four right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(message_four other)
	{
		return other != null  &&
			this.pt.Equals(other.pt) &&
			Enumerable.SequenceEqual(this.pts3d, other.pts3d);
	}
	public static void compose(ComposerBase composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, pt, pts3d);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, pt, pts3d);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		composer.append( "{\n  ");
		composer.addNamePart("pt");
		pt.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("pts3d");
		pts3d.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		pt.compose(composer);
		pts3d.composeGmq(composer);
	}
	public static message_four parse(ParserBase parser)
	{
		message_four tmp = new message_four();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point.parse(parser); }),
			pts3d: new CollectionWrapperForParsing(
				() => { tmp.pts3d = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.pts3d.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, IMessageParse pt, ICollectionParse pts3d)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, pt, pts3d);
		else if (parser is JsonParser jsonP)
			parse(jsonP, pt, pts3d);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "pt" )
				pt.parse(parser);
			else if ( key == "pts3d" )
				pts3d.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		pt.parse(parser);
		pts3d.parseGmq(parser);
	}
} // class message_four

	public static void composeMessage_message_four(BufferT buffer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgIds.message_four);
		message_four.compose(composer, pt, pts3d);
	}

//**********************************************************************
// MESSAGE "message_du" Targets: GMQ (0 parameters)
//**********************************************************************

public class message_du : struct_du
{
	public new static void compose(ComposerBase composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		struct_du.compose(composer, pt, disc_union);
	}
	protected new static void parse(ParserBase parser, IMessageParse pt, IMessageParse disc_union)
	{
		struct_du.parse(parser, pt, disc_union);
	}
	public new static void compose(GmqComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		struct_du.compose(composer, pt, disc_union);
	}
	protected new static void parse(GmqParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		struct_du.parse(parser, pt, disc_union);
	}
	public new static void compose(JsonComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		struct_du.compose(composer, pt, disc_union);
	}
	protected new static void parse(JsonParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		struct_du.parse(parser, pt, disc_union);
	}
} // class message_du

	public static void composeMessage_message_du(BufferT buffer, IMessageCompose pt, IMessageCompose disc_union)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgIds.message_du);
		message_du.compose(composer, pt, disc_union);
	}

} // class test_gmq

public class test_json
{
public enum MsgIds { message_one = 1, message_four = 2 }

	public static void handleMessage( BufferT buffer, MessageHandlerArray handlers )
	{
		handleMessage(buffer.getReadIterator(), handlers);
	}
	public static void handleMessage( ReadIteratorT riter, MessageHandlerArray handlers )
	{
		JsonParser parser = new JsonParser( riter );
		handlers.json_handle(parser);
	}

//**********************************************************************
// MESSAGE "message_one" Targets: JSON (0 parameters)
//**********************************************************************

public class message_one : struct_one
{
	public new static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
} // class message_one

	public static void composeMessage_message_one(BufferT buffer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		JsonComposer composer = new JsonComposer(buffer);

		composer.append("{\n  ");
		composer.addNamePart("msgid");
		composer.composeUnsignedInteger((UInt64)MsgIds.message_one);
		composer.append(",\n  ");
		composer.addNamePart("msgbody");
		message_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		composer.append("\n}");
	}

//**********************************************************************
// MESSAGE "message_four" NONEXTENDABLE Targets: JSON (2 parameters)
//  1. STRUCT point pt (REQUIRED)
//  2. VECTOR< STRUCT point3D> pts3d (REQUIRED)
//**********************************************************************

public class message_four : IEquatable<message_four>
{
	public point pt;
	public List<point3D> pts3d;

	public override bool Equals(object obj)
	{
		return obj is message_four d && Equals(d);
	}
	public static bool operator ==(message_four left, message_four right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(message_four left, message_four right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(message_four other)
	{
		return other != null  &&
			this.pt.Equals(other.pt) &&
			Enumerable.SequenceEqual(this.pts3d, other.pts3d);
	}
	public static void compose(ComposerBase composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, pt, pts3d);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, pt, pts3d);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		composer.append( "{\n  ");
		composer.addNamePart("pt");
		pt.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("pts3d");
		pts3d.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		pt.compose(composer);
		pts3d.composeGmq(composer);
	}
	public static message_four parse(ParserBase parser)
	{
		message_four tmp = new message_four();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point.parse(parser); }),
			pts3d: new CollectionWrapperForParsing(
				() => { tmp.pts3d = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.pts3d.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, IMessageParse pt, ICollectionParse pts3d)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, pt, pts3d);
		else if (parser is JsonParser jsonP)
			parse(jsonP, pt, pts3d);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "pt" )
				pt.parse(parser);
			else if ( key == "pts3d" )
				pts3d.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		pt.parse(parser);
		pts3d.parseGmq(parser);
	}
} // class message_four

	public static void composeMessage_message_four(BufferT buffer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		JsonComposer composer = new JsonComposer(buffer);

		composer.append("{\n  ");
		composer.addNamePart("msgid");
		composer.composeUnsignedInteger((UInt64)MsgIds.message_four);
		composer.append(",\n  ");
		composer.addNamePart("msgbody");
		message_four.compose(composer, pt, pts3d);
		composer.append("\n}");
	}

} // class test_json


} // namespace mtest

