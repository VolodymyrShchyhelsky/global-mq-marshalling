//////////////////////////////////////////////////////////////
//
//  Do not edit! file automatically generated by idl_compiler
//
//////////////////////////////////////////////////////////////

using globalmq.marshalling;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace mtest
{

//////////////////////////////////////////////////////////////
//
//                 Messages
//
//////////////////////////////////////////////////////////////

//**********************************************************************
// DISCRIMINATED_UNION "du_one" Targets: GMQ (2 cases)
//  CASE one (3 parameters)(3 parameters)
//    1. REAL D1 (REQUIRED)
//    2. REAL D2 (REQUIRED)
//    3. REAL D3 (REQUIRED)
//  CASE two (1 parameters)(1 parameters)
//    1. VECTOR<REAL> Data (REQUIRED)
//**********************************************************************

public class du_one : IEquatable<du_one>
{
	public enum Variants { one = 1, two = 2, unknown };
	Object mem;

public class CASE_one : IEquatable<CASE_one>
{
	public Double D1;
	public Double D2;
	public Double D3;

	public override bool Equals(object obj)
	{
		return Equals(obj as CASE_one);
	}
	public static bool operator ==(CASE_one left, CASE_one right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(CASE_one left, CASE_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(CASE_one other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.D1 == other.D1 &&
				this.D2 == other.D2 &&
				this.D3 == other.D3;
	}
	public static void compose(ComposerBase composer, Double D1, Double D2, Double D3)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, D1, D2, D3);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, D1, D2, D3);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Double D1, Double D2, Double D3)
	{
		composer.append( "{\n  ");
		composer.addNamePart("D1");
		composer.composeReal(D1);
		composer.append( ",\n  " );
		composer.addNamePart("D2");
		composer.composeReal(D2);
		composer.append( ",\n  " );
		composer.addNamePart("D3");
		composer.composeReal(D3);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Double D1, Double D2, Double D3)
	{
		composer.composeReal(D1);
		composer.composeReal(D2);
		composer.composeReal(D3);
	}
	public static CASE_one parse(ParserBase parser)
	{
		CASE_one tmp = new CASE_one();
		parse(parser,
			D1: ref tmp.D1,
			D2: ref tmp.D2,
			D3: ref tmp.D3
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Double D1, ref Double D2, ref Double D3)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref D1, ref D2, ref D3);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref D1, ref D2, ref D3);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Double D1, ref Double D2, ref Double D3)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "D1" )
				parser.parseReal(out D1);
			else if ( key == "D2" )
				parser.parseReal(out D2);
			else if ( key == "D3" )
				parser.parseReal(out D3);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Double D1, ref Double D2, ref Double D3)
	{
		parser.parseReal(out D1);
		parser.parseReal(out D2);
		parser.parseReal(out D3);
	}
} // class CASE_one

public class CASE_two : IEquatable<CASE_two>
{
	public List<Double> Data;

	public override bool Equals(object obj)
	{
		return Equals(obj as CASE_two);
	}
	public static bool operator ==(CASE_two left, CASE_two right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(CASE_two left, CASE_two right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(CASE_two other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				Enumerable.SequenceEqual(this.Data, other.Data);
	}
	public static void compose(ComposerBase composer, ICollectionCompose Data)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, Data);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, Data);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, ICollectionCompose Data)
	{
		composer.append( "{\n  ");
		composer.addNamePart("Data");
		Data.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, ICollectionCompose Data)
	{
		Data.composeGmq(composer);
	}
	public static CASE_two parse(ParserBase parser)
	{
		CASE_two tmp = new CASE_two();
		parse(parser,
			Data: new CollectionWrapperForParsing(
				() => { tmp.Data = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.Data.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ICollectionParse Data)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, Data);
		else if (parser is JsonParser jsonP)
			parse(jsonP, Data);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ICollectionParse Data)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "Data" )
				Data.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ICollectionParse Data)
	{
		Data.parseGmq(parser);
	}
} // class CASE_two

	public override bool Equals(object obj)
	{
		return Equals(obj as du_one);
	}
	public static bool operator ==(du_one left, du_one right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(du_one left, du_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(du_one other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return this.mem.Equals(other.mem);
	}
	public Variants currentVariant()
	{
		if(this.mem == null)
			return Variants.unknown;
		else if(this.mem is CASE_one)
			return Variants.one;
		else if(this.mem is CASE_two)
			return Variants.two;
		else
			return Variants.unknown;
	}

	// IDL CASE one:
	public Double D1
	{
		get { return ((CASE_one)this.mem).D1; }
		set { ((CASE_one)this.mem).D1 = value; }
	}
	public Double D2
	{
		get { return ((CASE_one)this.mem).D2; }
		set { ((CASE_one)this.mem).D2 = value; }
	}
	public Double D3
	{
		get { return ((CASE_one)this.mem).D3; }
		set { ((CASE_one)this.mem).D3 = value; }
	}

	// IDL CASE two:
	public List<Double> Data
	{
		get { return ((CASE_two)this.mem).Data; }
		set { ((CASE_two)this.mem).Data = value; }
	}
	public static du_one parse(ParserBase parser)
	{
		if (parser is GmqParser gmqP)
			return parse(gmqP);
		else if (parser is JsonParser jsonP)
			return parse(jsonP);
		else
			throw new ArgumentException();
	}
	protected static du_one parse(JsonParser parser)
	{
		du_one val = new du_one();

		parser.skipDelimiter('{');
		string key;
		parser.readKeyFromJson( out key );
		if (key != "caseid")
			throw new FormatException();
		Int64 caseID;
		parser.parseSignedInteger(out caseID);
		parser.skipSpacesEtc();
		parser.skipDelimiter(',');
		parser.readKeyFromJson(out key);
		if (key != "caseData")
			throw new FormatException();

		switch ((Variants)caseID)
		{
			case Variants.one: val.mem = CASE_one.parse(parser); break;
			case Variants.two: val.mem = CASE_two.parse(parser); break;
			default: throw new System.Exception();
		}

		parser.skipDelimiter('}');

		return val;
	}
	protected static du_one parse(GmqParser parser)
	{
		du_one val = new du_one();

		Int64 caseID;
		parser.parseSignedInteger(out caseID);

		switch ((Variants)caseID)
		{
			case Variants.one: val.mem = CASE_one.parse(parser); break;
			case Variants.two: val.mem = CASE_two.parse(parser); break;
			default: throw new System.Exception();
		}

		return val;
	}

	// IDL CASE one:
	public static void compose_one(ComposerBase composer, Double D1, Double D2, Double D3)
	{
		if (composer is GmqComposer gmqC)
			compose_one(gmqC, D1, D2, D3);
		else if (composer is JsonComposer jsonC)
			compose_one(jsonC, D1, D2, D3);
		else
			throw new ArgumentException();
	}
	public static void compose_one(JsonComposer composer, Double D1, Double D2, Double D3)
	{
		composer.append( "{\n  ");
		composer.addNamePart("caseid");
		composer.composeSignedInteger((Int64)Variants.one);
		composer.append( ",\n  " );
		composer.addNamePart("caseData");
		CASE_one.compose(composer, D1, D2, D3);
		composer.append( "\n}" );
	}
	public static void compose_one(GmqComposer composer, Double D1, Double D2, Double D3)
	{
		composer.composeSignedInteger((Int64)Variants.one);
		CASE_one.compose(composer, D1, D2, D3);
	}

	// IDL CASE two:
	public static void compose_two(ComposerBase composer, ICollectionCompose Data)
	{
		if (composer is GmqComposer gmqC)
			compose_two(gmqC, Data);
		else if (composer is JsonComposer jsonC)
			compose_two(jsonC, Data);
		else
			throw new ArgumentException();
	}
	public static void compose_two(JsonComposer composer, ICollectionCompose Data)
	{
		composer.append( "{\n  ");
		composer.addNamePart("caseid");
		composer.composeSignedInteger((Int64)Variants.two);
		composer.append( ",\n  " );
		composer.addNamePart("caseData");
		CASE_two.compose(composer, Data);
		composer.append( "\n}" );
	}
	public static void compose_two(GmqComposer composer, ICollectionCompose Data)
	{
		composer.composeSignedInteger((Int64)Variants.two);
		CASE_two.compose(composer, Data);
	}
} // class du_one

//**********************************************************************
// STRUCT "point3D" Targets: JSON GMQ (3 parameters)
//  1. INTEGER x (REQUIRED)
//  2. INTEGER y (REQUIRED)
//  3. INTEGER z (REQUIRED)
//**********************************************************************

public class point3D : IEquatable<point3D>
{
	public Int64 x;
	public Int64 y;
	public Int64 z;

	public override bool Equals(object obj)
	{
		return Equals(obj as point3D);
	}
	public static bool operator ==(point3D left, point3D right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(point3D left, point3D right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(point3D other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.x == other.x &&
				this.y == other.y &&
				this.z == other.z;
	}
	public static void compose(ComposerBase composer, Int64 x, Int64 y, Int64 z)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, x, y, z);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, x, y, z);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( ",\n  " );
		composer.addNamePart("z");
		composer.composeSignedInteger(z);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
		composer.composeSignedInteger(z);
	}
	public static point3D parse(ParserBase parser)
	{
		point3D tmp = new point3D();
		parse(parser,
			x: ref tmp.x,
			y: ref tmp.y,
			z: ref tmp.z
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref x, ref y, ref z);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref x, ref y, ref z);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
				parser.parseSignedInteger(out x);
			else if ( key == "y" )
				parser.parseSignedInteger(out y);
			else if ( key == "z" )
				parser.parseSignedInteger(out z);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		parser.parseSignedInteger(out x);
		parser.parseSignedInteger(out y);
		parser.parseSignedInteger(out z);
	}
} // class point3D

//**********************************************************************
// STRUCT "point" NONEXTENDABLE Targets: JSON GMQ (2 parameters)
//  1. INTEGER x (REQUIRED)
//  2. INTEGER y (REQUIRED)
//**********************************************************************

public class point : IEquatable<point>
{
	public Int64 x;
	public Int64 y;

	public override bool Equals(object obj)
	{
		return Equals(obj as point);
	}
	public static bool operator ==(point left, point right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(point left, point right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(point other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.x == other.x &&
				this.y == other.y;
	}
	public static void compose(ComposerBase composer, Int64 x, Int64 y)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, x, y);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, x, y);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 x, Int64 y)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
	}
	public static point parse(ParserBase parser)
	{
		point tmp = new point();
		parse(parser,
			x: ref tmp.x,
			y: ref tmp.y
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Int64 x, ref Int64 y)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref x, ref y);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref x, ref y);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Int64 x, ref Int64 y)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
				parser.parseSignedInteger(out x);
			else if ( key == "y" )
				parser.parseSignedInteger(out y);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Int64 x, ref Int64 y)
	{
		parser.parseSignedInteger(out x);
		parser.parseSignedInteger(out y);
	}
} // class point

//**********************************************************************
// STRUCT "struct_du" Targets: GMQ (2 parameters)
//  1. STRUCT point3D pt (REQUIRED)
//  2. DISCRIMINATED_UNION du_one disc_union (REQUIRED)
//**********************************************************************

public class struct_du : IEquatable<struct_du>
{
	public point3D pt;
	public du_one disc_union;

	public override bool Equals(object obj)
	{
		return Equals(obj as struct_du);
	}
	public static bool operator ==(struct_du left, struct_du right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(struct_du left, struct_du right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(struct_du other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.pt.Equals(other.pt) &&
				this.disc_union.Equals(other.disc_union);
	}
	public static void compose(ComposerBase composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, pt, disc_union);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, pt, disc_union);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		composer.append( "{\n  ");
		composer.addNamePart("pt");
		pt.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("disc_union");
		disc_union.compose(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		pt.compose(composer);
		disc_union.compose(composer);
	}
	public static struct_du parse(ParserBase parser)
	{
		struct_du tmp = new struct_du();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point3D.parse(parser); }),
			disc_union: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.disc_union = du_one.parse(parser); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, IMessageParse pt, IMessageParse disc_union)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, pt, disc_union);
		else if (parser is JsonParser jsonP)
			parse(jsonP, pt, disc_union);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "pt" )
				pt.parse(parser);
			else if ( key == "disc_union" )
				disc_union.parse(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		pt.parse(parser);
		disc_union.parse(parser);
	}
} // class struct_du

//**********************************************************************
// STRUCT "struct_one" Targets: JSON GMQ (10 parameters)
//  1. INTEGER firstParam (REQUIRED)
//  2. VECTOR<INTEGER> secondParam (REQUIRED)
//  3. VECTOR< STRUCT point3D> thirdParam (REQUIRED)
//  4. UINTEGER forthParam (REQUIRED)
//  5. CHARACTER_STRING fifthParam (REQUIRED)
//  6. VECTOR<NONEXTENDABLE STRUCT point> sixthParam (REQUIRED)
//  7. REAL seventhParam (REQUIRED)
//  8. STRUCT NONEXTENDABLE point eighthParam (REQUIRED)
//  9. STRUCT point3D ninethParam (REQUIRED)
//  10. VECTOR<REAL> tenthParam (REQUIRED)
//**********************************************************************

public class struct_one : IEquatable<struct_one>
{
	public Int64 firstParam;
	public List<Int64> secondParam;
	public List<point3D> thirdParam;
	public UInt64 forthParam;
	public String fifthParam;
	public List<point> sixthParam;
	public Double seventhParam;
	public point eighthParam;
	public point3D ninethParam;
	public List<Double> tenthParam;

	public override bool Equals(object obj)
	{
		return Equals(obj as struct_one);
	}
	public static bool operator ==(struct_one left, struct_one right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(struct_one left, struct_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(struct_one other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.firstParam == other.firstParam &&
				Enumerable.SequenceEqual(this.secondParam, other.secondParam) &&
				Enumerable.SequenceEqual(this.thirdParam, other.thirdParam) &&
				this.forthParam == other.forthParam &&
				this.fifthParam == other.fifthParam &&
				Enumerable.SequenceEqual(this.sixthParam, other.sixthParam) &&
				this.seventhParam == other.seventhParam &&
				this.eighthParam.Equals(other.eighthParam) &&
				this.ninethParam.Equals(other.ninethParam) &&
				Enumerable.SequenceEqual(this.tenthParam, other.tenthParam);
	}
	public static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		composer.append( "{\n  ");
		composer.addNamePart("firstParam");
		composer.composeSignedInteger(firstParam);
		composer.append( ",\n  " );
		composer.addNamePart("secondParam");
		secondParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("thirdParam");
		thirdParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("forthParam");
		composer.composeUnsignedInteger(forthParam);
		composer.append( ",\n  " );
		composer.addNamePart("fifthParam");
		composer.composeString(fifthParam);
		composer.append( ",\n  " );
		composer.addNamePart("sixthParam");
		sixthParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("seventhParam");
		composer.composeReal(seventhParam);
		composer.append( ",\n  " );
		composer.addNamePart("eighthParam");
		eighthParam.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("ninethParam");
		ninethParam.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("tenthParam");
		tenthParam.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		composer.composeSignedInteger(firstParam);
		secondParam.composeGmq(composer);
		thirdParam.composeGmq(composer);
		composer.composeUnsignedInteger(forthParam);
		composer.composeString(fifthParam);
		sixthParam.composeGmq(composer);
		composer.composeReal(seventhParam);
		eighthParam.compose(composer);
		ninethParam.compose(composer);
		tenthParam.composeGmq(composer);
	}
	public static struct_one parse(ParserBase parser)
	{
		struct_one tmp = new struct_one();
		parse(parser,
			firstParam: ref tmp.firstParam,
			secondParam: new CollectionWrapperForParsing(
				() => { tmp.secondParam = new List<Int64>(); },
				(ParserBase parser, int ordinal) => { Int64 val; parser.parseSignedInteger(out val); tmp.secondParam.Add(val); }),
			thirdParam: new CollectionWrapperForParsing(
				() => { tmp.thirdParam = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.thirdParam.Add(val); }),
			forthParam: ref tmp.forthParam,
			fifthParam: ref tmp.fifthParam,
			sixthParam: new CollectionWrapperForParsing(
				() => { tmp.sixthParam = new List<point>(); },
				(ParserBase parser, int ordinal) => { point val = point.parse(parser); tmp.sixthParam.Add(val); }),
			seventhParam: ref tmp.seventhParam,
			eighthParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.eighthParam = point.parse(parser); }),
			ninethParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.ninethParam = point3D.parse(parser); }),
			tenthParam: new CollectionWrapperForParsing(
				() => { tmp.tenthParam = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.tenthParam.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "firstParam" )
				parser.parseSignedInteger(out firstParam);
			else if ( key == "secondParam" )
				secondParam.parseJson(parser);
			else if ( key == "thirdParam" )
				thirdParam.parseJson(parser);
			else if ( key == "forthParam" )
				parser.parseUnsignedInteger(out forthParam);
			else if ( key == "fifthParam" )
				parser.parseString(out fifthParam);
			else if ( key == "sixthParam" )
				sixthParam.parseJson(parser);
			else if ( key == "seventhParam" )
				parser.parseReal(out seventhParam);
			else if ( key == "eighthParam" )
				eighthParam.parse(parser);
			else if ( key == "ninethParam" )
				ninethParam.parse(parser);
			else if ( key == "tenthParam" )
				tenthParam.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		parser.parseSignedInteger(out firstParam);
		secondParam.parseGmq(parser);
		thirdParam.parseGmq(parser);
		parser.parseUnsignedInteger(out forthParam);
		parser.parseString(out fifthParam);
		sixthParam.parseGmq(parser);
		parser.parseReal(out seventhParam);
		eighthParam.parse(parser);
		ninethParam.parse(parser);
		tenthParam.parseGmq(parser);
	}
} // class struct_one

//////////////////////////////////////////////////////////////
//
//  Scopes:
//
//  test_gmq
//  {
//    message_two
//    message_four
//    message_du
//  }
//
//  test_json
//  {
//    message_three
//    message_five
//  }
//
//////////////////////////////////////////////////////////////

public class test_gmq
{
	public enum MsgId { message_two = 2, message_four = 4, message_du = 5 }

	public static MessageHandler makeMessageHandler( MsgId id, MessageHandler.HandlerDelegate handler )
	{
		return new MessageHandler((ulong)id, handler);
	}
	public static MessageHandler makeDefaultMessageHandler( MessageHandler.HandlerDelegate handler)
	{
		return new MessageHandler(MessageHandler.DefaultHandler, handler);
	}
	public static void handleMessage( BufferT buffer, params MessageHandler[] handlers )
	{
		handleMessage(buffer.getReadIterator(), handlers);
	}
	public static void handleMessage( ReadIteratorT riter, params MessageHandler[] handlers )
	{
		GmqParser parser = new GmqParser( riter );
		MessageHandler.gmq_handle( parser, handlers );
	}

//**********************************************************************
// MESSAGE "message_two" Targets: GMQ (0 parameters)
//**********************************************************************

public class message_two : struct_one
{
	public new static message_two parse(ParserBase parser)
	{
		message_two tmp = new message_two();
		parse(parser,
			firstParam: ref tmp.firstParam,
			secondParam: new CollectionWrapperForParsing(
				() => { tmp.secondParam = new List<Int64>(); },
				(ParserBase parser, int ordinal) => { Int64 val; parser.parseSignedInteger(out val); tmp.secondParam.Add(val); }),
			thirdParam: new CollectionWrapperForParsing(
				() => { tmp.thirdParam = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.thirdParam.Add(val); }),
			forthParam: ref tmp.forthParam,
			fifthParam: ref tmp.fifthParam,
			sixthParam: new CollectionWrapperForParsing(
				() => { tmp.sixthParam = new List<point>(); },
				(ParserBase parser, int ordinal) => { point val = point.parse(parser); tmp.sixthParam.Add(val); }),
			seventhParam: ref tmp.seventhParam,
			eighthParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.eighthParam = point.parse(parser); }),
			ninethParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.ninethParam = point3D.parse(parser); }),
			tenthParam: new CollectionWrapperForParsing(
				() => { tmp.tenthParam = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.tenthParam.Add(val); })
		);
		return tmp;
	}
	public new static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
} // class message_two

	public static void composeMessage_message_two(BufferT buffer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgId.message_two);
		message_two.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}

//**********************************************************************
// MESSAGE "message_four" NONEXTENDABLE Targets: GMQ (2 parameters)
//  1. STRUCT point pt (REQUIRED)
//  2. VECTOR< STRUCT point3D> pts3d (REQUIRED)
//**********************************************************************

public class message_four : IEquatable<message_four>
{
	public point pt;
	public List<point3D> pts3d;

	public override bool Equals(object obj)
	{
		return Equals(obj as message_four);
	}
	public static bool operator ==(message_four left, message_four right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(message_four left, message_four right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(message_four other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.pt.Equals(other.pt) &&
				Enumerable.SequenceEqual(this.pts3d, other.pts3d);
	}
	public static void compose(ComposerBase composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, pt, pts3d);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, pt, pts3d);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		composer.append( "{\n  ");
		composer.addNamePart("pt");
		pt.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("pts3d");
		pts3d.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		pt.compose(composer);
		pts3d.composeGmq(composer);
	}
	public static message_four parse(ParserBase parser)
	{
		message_four tmp = new message_four();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point.parse(parser); }),
			pts3d: new CollectionWrapperForParsing(
				() => { tmp.pts3d = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.pts3d.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, IMessageParse pt, ICollectionParse pts3d)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, pt, pts3d);
		else if (parser is JsonParser jsonP)
			parse(jsonP, pt, pts3d);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "pt" )
				pt.parse(parser);
			else if ( key == "pts3d" )
				pts3d.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		pt.parse(parser);
		pts3d.parseGmq(parser);
	}
} // class message_four

	public static void composeMessage_message_four(BufferT buffer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgId.message_four);
		message_four.compose(composer, pt, pts3d);
	}

//**********************************************************************
// MESSAGE "message_du" Targets: GMQ (0 parameters)
//**********************************************************************

public class message_du : struct_du
{
	public new static message_du parse(ParserBase parser)
	{
		message_du tmp = new message_du();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point3D.parse(parser); }),
			disc_union: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.disc_union = du_one.parse(parser); })
		);
		return tmp;
	}
	public new static void compose(ComposerBase composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		struct_du.compose(composer, pt, disc_union);
	}
	protected new static void parse(ParserBase parser, IMessageParse pt, IMessageParse disc_union)
	{
		struct_du.parse(parser, pt, disc_union);
	}
	public new static void compose(GmqComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		struct_du.compose(composer, pt, disc_union);
	}
	protected new static void parse(GmqParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		struct_du.parse(parser, pt, disc_union);
	}
	public new static void compose(JsonComposer composer, IMessageCompose pt, IMessageCompose disc_union)
	{
		struct_du.compose(composer, pt, disc_union);
	}
	protected new static void parse(JsonParser parser, IMessageParse pt, IMessageParse disc_union)
	{
		struct_du.parse(parser, pt, disc_union);
	}
} // class message_du

	public static void composeMessage_message_du(BufferT buffer, IMessageCompose pt, IMessageCompose disc_union)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgId.message_du);
		message_du.compose(composer, pt, disc_union);
	}

} // class test_gmq

public class test_json
{
	public enum MsgId { message_three = 3, message_five = 5 }

	public static MessageHandler makeMessageHandler( MsgId id, MessageHandler.HandlerDelegate handler )
	{
		return new MessageHandler((ulong)id, handler);
	}
	public static MessageHandler makeDefaultMessageHandler( MessageHandler.HandlerDelegate handler)
	{
		return new MessageHandler(MessageHandler.DefaultHandler, handler);
	}
	public static void handleMessage( BufferT buffer, params MessageHandler[] handlers )
	{
		handleMessage(buffer.getReadIterator(), handlers);
	}
	public static void handleMessage( ReadIteratorT riter, params MessageHandler[] handlers )
	{
		JsonParser parser = new JsonParser( riter );
		MessageHandler.json_handle( parser, handlers );
	}

//**********************************************************************
// MESSAGE "message_three" Targets: JSON (0 parameters)
//**********************************************************************

public class message_three : struct_one
{
	public new static message_three parse(ParserBase parser)
	{
		message_three tmp = new message_three();
		parse(parser,
			firstParam: ref tmp.firstParam,
			secondParam: new CollectionWrapperForParsing(
				() => { tmp.secondParam = new List<Int64>(); },
				(ParserBase parser, int ordinal) => { Int64 val; parser.parseSignedInteger(out val); tmp.secondParam.Add(val); }),
			thirdParam: new CollectionWrapperForParsing(
				() => { tmp.thirdParam = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.thirdParam.Add(val); }),
			forthParam: ref tmp.forthParam,
			fifthParam: ref tmp.fifthParam,
			sixthParam: new CollectionWrapperForParsing(
				() => { tmp.sixthParam = new List<point>(); },
				(ParserBase parser, int ordinal) => { point val = point.parse(parser); tmp.sixthParam.Add(val); }),
			seventhParam: ref tmp.seventhParam,
			eighthParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.eighthParam = point.parse(parser); }),
			ninethParam: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.ninethParam = point3D.parse(parser); }),
			tenthParam: new CollectionWrapperForParsing(
				() => { tmp.tenthParam = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.tenthParam.Add(val); })
		);
		return tmp;
	}
	public new static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		struct_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	protected new static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		struct_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
} // class message_three

	public static void composeMessage_message_three(BufferT buffer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		JsonComposer composer = new JsonComposer(buffer);

		composer.append("{\n  ");
		composer.addNamePart("msgid");
		composer.composeUnsignedInteger((UInt64)MsgId.message_three);
		composer.append(",\n  ");
		composer.addNamePart("msgbody");
		message_three.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		composer.append("\n}");
	}

//**********************************************************************
// MESSAGE "message_five" NONEXTENDABLE Targets: JSON (2 parameters)
//  1. STRUCT point pt (REQUIRED)
//  2. VECTOR< STRUCT point3D> pts3d (REQUIRED)
//**********************************************************************

public class message_five : IEquatable<message_five>
{
	public point pt;
	public List<point3D> pts3d;

	public override bool Equals(object obj)
	{
		return Equals(obj as message_five);
	}
	public static bool operator ==(message_five left, message_five right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(message_five left, message_five right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(message_five other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.pt.Equals(other.pt) &&
				Enumerable.SequenceEqual(this.pts3d, other.pts3d);
	}
	public static void compose(ComposerBase composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, pt, pts3d);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, pt, pts3d);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		composer.append( "{\n  ");
		composer.addNamePart("pt");
		pt.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("pts3d");
		pts3d.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		pt.compose(composer);
		pts3d.composeGmq(composer);
	}
	public static message_five parse(ParserBase parser)
	{
		message_five tmp = new message_five();
		parse(parser,
			pt: new MessageWrapperForParsing(
				(ParserBase parser) => { tmp.pt = point.parse(parser); }),
			pts3d: new CollectionWrapperForParsing(
				() => { tmp.pts3d = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.pts3d.Add(val); })
		);
		return tmp;
	}
	protected static void parse(ParserBase parser, IMessageParse pt, ICollectionParse pts3d)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, pt, pts3d);
		else if (parser is JsonParser jsonP)
			parse(jsonP, pt, pts3d);
		else
			throw new ArgumentException();
	}
	protected static void parse(JsonParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "pt" )
				pt.parse(parser);
			else if ( key == "pts3d" )
				pts3d.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	protected static void parse(GmqParser parser, IMessageParse pt, ICollectionParse pts3d)
	{
		pt.parse(parser);
		pts3d.parseGmq(parser);
	}
} // class message_five

	public static void composeMessage_message_five(BufferT buffer, IMessageCompose pt, ICollectionCompose pts3d)
	{
		JsonComposer composer = new JsonComposer(buffer);

		composer.append("{\n  ");
		composer.addNamePart("msgid");
		composer.composeUnsignedInteger((UInt64)MsgId.message_five);
		composer.append(",\n  ");
		composer.addNamePart("msgbody");
		message_five.compose(composer, pt, pts3d);
		composer.append("\n}");
	}

} // class test_json

//////////////////////////////////////////////////////////////
//
//                 Publishables
//
//////////////////////////////////////////////////////////////

namespace publishable
{

public interface BasicTypes
{
	Int64 anInt { get; set; }
	UInt64 anUInt { get; set; }
	Double aReal { get; set; }
	String aString { get; set; }
} // interface BasicTypes

public class BasicTypes_impl : BasicTypes, IEquatable<BasicTypes_impl>
{
	public Int64 anInt { get; set; }
	public UInt64 anUInt { get; set; }
	public Double aReal { get; set; }
	public String aString { get; set; }
	public override bool Equals(object obj)
	{
		return Equals(obj as BasicTypes_impl);
	}
	public static bool operator ==(BasicTypes_impl left, BasicTypes_impl right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(BasicTypes_impl left, BasicTypes_impl right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(BasicTypes_impl other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.anInt == other.anInt &&
				this.anUInt == other.anUInt &&
				this.aReal == other.aReal &&
				this.aString == other.aString;
	}
} // class BasicTypes_impl

public class BasicTypes_subs : BasicTypes
{
	BasicTypes t;
	enum Address { anInt = 0, anUInt = 1, aReal = 2, aString = 3 };
	public BasicTypes_subs(BasicTypes t)
	{
		this.t = t;
	}
	public Int64 anInt
	{
		get { return t.anInt; }
		set { throw new InvalidOperationException(); }
	}
	public UInt64 anUInt
	{
		get { return t.anUInt; }
		set { throw new InvalidOperationException(); }
	}
	public Double aReal
	{
		get { return t.aReal; }
		set { throw new InvalidOperationException(); }
	}
	public String aString
	{
		get { return t.aString; }
		set { throw new InvalidOperationException(); }
	}
	public static void parseForStateSync(IPublishableParser parser, BasicTypes t)
	{
		t.anInt = parser.parseInteger("anInt");
		t.anUInt = parser.parseUnsigned("anUInt");
		t.aReal = parser.parseReal("aReal");
		t.aString = parser.parseString("aString");
	}
	public static bool parse(IPublishableParser parser, BasicTypes t)
	{
		bool changed = false;
		{
			Int64 newVal = parser.parseInteger("anInt");
			if(newVal != t.anInt)
			{
				t.anInt = newVal;
				changed = true;
			}
		}
		{
			UInt64 newVal = parser.parseUnsigned("anUInt");
			if(newVal != t.anUInt)
			{
				t.anUInt = newVal;
				changed = true;
			}
		}
		{
			Double newVal = parser.parseReal("aReal");
			if(newVal != t.aReal)
			{
				t.aReal = newVal;
				changed = true;
			}
		}
		{
			String newVal = parser.parseString("aString");
			if(newVal != t.aString)
			{
				t.aString = newVal;
				changed = true;
			}
		}
		return changed;
	}
	public static bool parse(IPublishableParser parser, BasicTypes t, UInt64[] addr, int offset)
	{
		bool changed = false;
		switch ((Address)addr[offset])
		{
			case Address.anInt:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				Int64 newVal = parser.parseInteger("value");
				if(newVal != t.anInt)
				{
					t.anInt = newVal;
					changed = true;
				}
			}
			break;
			case Address.anUInt:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				UInt64 newVal = parser.parseUnsigned("value");
				if(newVal != t.anUInt)
				{
					t.anUInt = newVal;
					changed = true;
				}
			}
			break;
			case Address.aReal:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				Double newVal = parser.parseReal("value");
				if(newVal != t.aReal)
				{
					t.aReal = newVal;
					changed = true;
				}
			}
			break;
			case Address.aString:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				String newVal = parser.parseString("value");
				if(newVal != t.aString)
				{
					t.aString = newVal;
					changed = true;
				}
			}
			break;
			default:
				throw new Exception();
		}
		return changed;
	}
} // class BasicTypes_subs

public class BasicTypes_publ : BasicTypes
{
	BasicTypes t;
	IPublishableComposer composer;
	UInt64[] address;
	enum Address { anInt = 0, anUInt = 1, aReal = 2, aString = 3 };
	public BasicTypes_publ(BasicTypes t, IPublishableComposer composer, UInt64[] address)
	{
		this.t = t;
		this.composer = composer;
		this.address = address;
	}
	public Int64 anInt
	{
		get { return t.anInt; }
		set
		{
			t.anInt = value;
			composer.composeAddress(address, (UInt64)Address.anInt);
			composer.composeInteger("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public UInt64 anUInt
	{
		get { return t.anUInt; }
		set
		{
			t.anUInt = value;
			composer.composeAddress(address, (UInt64)Address.anUInt);
			composer.composeUnsigned("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public Double aReal
	{
		get { return t.aReal; }
		set
		{
			t.aReal = value;
			composer.composeAddress(address, (UInt64)Address.aReal);
			composer.composeReal("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public String aString
	{
		get { return t.aString; }
		set
		{
			t.aString = value;
			composer.composeAddress(address, (UInt64)Address.aString);
			composer.composeString("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public static void compose(IPublishableComposer composer, BasicTypes t)
	{
		composer.composeInteger("anInt", t.anInt, true);
		composer.composeUnsigned("anUInt", t.anUInt, true);
		composer.composeReal("aReal", t.aReal, true);
		composer.composeString("aString", t.aString, false);
	}
} // class BasicTypes_publ


public interface point3D
{
	Int64 x { get; set; }
	Int64 y { get; set; }
	Int64 z { get; set; }
} // interface point3D

public class point3D_impl : point3D, IEquatable<point3D_impl>
{
	public Int64 x { get; set; }
	public Int64 y { get; set; }
	public Int64 z { get; set; }
	public override bool Equals(object obj)
	{
		return Equals(obj as point3D_impl);
	}
	public static bool operator ==(point3D_impl left, point3D_impl right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(point3D_impl left, point3D_impl right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(point3D_impl other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.x == other.x &&
				this.y == other.y &&
				this.z == other.z;
	}
} // class point3D_impl

public class point3D_subs : point3D
{
	point3D t;
	enum Address { x = 0, y = 1, z = 2 };
	public point3D_subs(point3D t)
	{
		this.t = t;
	}
	public Int64 x
	{
		get { return t.x; }
		set { throw new InvalidOperationException(); }
	}
	public Int64 y
	{
		get { return t.y; }
		set { throw new InvalidOperationException(); }
	}
	public Int64 z
	{
		get { return t.z; }
		set { throw new InvalidOperationException(); }
	}
	public static void parseForStateSync(IPublishableParser parser, point3D t)
	{
		t.x = parser.parseInteger("x");
		t.y = parser.parseInteger("y");
		t.z = parser.parseInteger("z");
	}
	public static bool parse(IPublishableParser parser, point3D t)
	{
		bool changed = false;
		{
			Int64 newVal = parser.parseInteger("x");
			if(newVal != t.x)
			{
				t.x = newVal;
				changed = true;
			}
		}
		{
			Int64 newVal = parser.parseInteger("y");
			if(newVal != t.y)
			{
				t.y = newVal;
				changed = true;
			}
		}
		{
			Int64 newVal = parser.parseInteger("z");
			if(newVal != t.z)
			{
				t.z = newVal;
				changed = true;
			}
		}
		return changed;
	}
	public static bool parse(IPublishableParser parser, point3D t, UInt64[] addr, int offset)
	{
		bool changed = false;
		switch ((Address)addr[offset])
		{
			case Address.x:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				Int64 newVal = parser.parseInteger("value");
				if(newVal != t.x)
				{
					t.x = newVal;
					changed = true;
				}
			}
			break;
			case Address.y:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				Int64 newVal = parser.parseInteger("value");
				if(newVal != t.y)
				{
					t.y = newVal;
					changed = true;
				}
			}
			break;
			case Address.z:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				Int64 newVal = parser.parseInteger("value");
				if(newVal != t.z)
				{
					t.z = newVal;
					changed = true;
				}
			}
			break;
			default:
				throw new Exception();
		}
		return changed;
	}
} // class point3D_subs

public class point3D_publ : point3D
{
	point3D t;
	IPublishableComposer composer;
	UInt64[] address;
	enum Address { x = 0, y = 1, z = 2 };
	public point3D_publ(point3D t, IPublishableComposer composer, UInt64[] address)
	{
		this.t = t;
		this.composer = composer;
		this.address = address;
	}
	public Int64 x
	{
		get { return t.x; }
		set
		{
			t.x = value;
			composer.composeAddress(address, (UInt64)Address.x);
			composer.composeInteger("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public Int64 y
	{
		get { return t.y; }
		set
		{
			t.y = value;
			composer.composeAddress(address, (UInt64)Address.y);
			composer.composeInteger("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public Int64 z
	{
		get { return t.z; }
		set
		{
			t.z = value;
			composer.composeAddress(address, (UInt64)Address.z);
			composer.composeInteger("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public static void compose(IPublishableComposer composer, point3D t)
	{
		composer.composeInteger("x", t.x, true);
		composer.composeInteger("y", t.y, true);
		composer.composeInteger("z", t.z, false);
	}
} // class point3D_publ


public interface AggregateType
{
	String name { get; set; }
	BasicTypes theAggregate { get; set; }
	BasicTypes make_theAggregate();
	Int64 lastValue { get; set; }
} // interface AggregateType

public class AggregateType_impl : AggregateType, IEquatable<AggregateType_impl>
{
	public String name { get; set; }
	public BasicTypes theAggregate { get; set; }
	public BasicTypes make_theAggregate() { return new BasicTypes_impl(); }
	public Int64 lastValue { get; set; }
	public override bool Equals(object obj)
	{
		return Equals(obj as AggregateType_impl);
	}
	public static bool operator ==(AggregateType_impl left, AggregateType_impl right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(AggregateType_impl left, AggregateType_impl right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(AggregateType_impl other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.name == other.name &&
				this.theAggregate.Equals(other.theAggregate) &&
				this.lastValue == other.lastValue;
	}
} // class AggregateType_impl

public class AggregateType_subs : AggregateType
{
	AggregateType t;
	enum Address { name = 0, theAggregate = 1, lastValue = 2 };
	public AggregateType_subs(AggregateType t)
	{
		this.t = t;
	}
	public String name
	{
		get { return t.name; }
		set { throw new InvalidOperationException(); }
	}
	public BasicTypes theAggregate
	{
		get { return new BasicTypes_subs(t.theAggregate); }
		set { throw new InvalidOperationException(); }
	}
	public BasicTypes make_theAggregate() { throw new InvalidOperationException(); }
	public Int64 lastValue
	{
		get { return t.lastValue; }
		set { throw new InvalidOperationException(); }
	}
	public static void parseForStateSync(IPublishableParser parser, AggregateType t)
	{
		t.name = parser.parseString("name");
		parser.parsePublishableStructBegin("theAggregate");
		t.theAggregate = t.make_theAggregate();
		BasicTypes_subs.parseForStateSync(parser, t.theAggregate);
		parser.parsePublishableStructEnd();
		t.lastValue = parser.parseInteger("lastValue");
	}
	public static bool parse(IPublishableParser parser, AggregateType t)
	{
		bool changed = false;
		{
			String newVal = parser.parseString("name");
			if(newVal != t.name)
			{
				t.name = newVal;
				changed = true;
			}
		}
		{
			parser.parsePublishableStructBegin("theAggregate");
			bool currentChanged = BasicTypes_subs.parse(parser, t.theAggregate);
			parser.parsePublishableStructEnd();
			if(currentChanged)
			{
					changed = true;
					// TODO
			}
		}
		{
			Int64 newVal = parser.parseInteger("lastValue");
			if(newVal != t.lastValue)
			{
				t.lastValue = newVal;
				changed = true;
			}
		}
		return changed;
	}
	public static bool parse(IPublishableParser parser, AggregateType t, UInt64[] addr, int offset)
	{
		bool changed = false;
		switch ((Address)addr[offset])
		{
			case Address.name:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				String newVal = parser.parseString("value");
				if(newVal != t.name)
				{
					t.name = newVal;
					changed = true;
				}
			}
			break;
			case Address.theAggregate:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1) // full element replace
				{
					parser.parsePublishableStructBegin("value");
					currentChanged = BasicTypes_subs.parse(parser, t.theAggregate);
					parser.parsePublishableStructEnd();
				}
				else if(addr.Length > offset + 1) // let child continue parsing
				{
					currentChanged = BasicTypes_subs.parse(parser, t.theAggregate, addr, offset + 1);
				}
				else
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			case Address.lastValue:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				Int64 newVal = parser.parseInteger("value");
				if(newVal != t.lastValue)
				{
					t.lastValue = newVal;
					changed = true;
				}
			}
			break;
			default:
				throw new Exception();
		}
		return changed;
	}
} // class AggregateType_subs

public class AggregateType_publ : AggregateType
{
	AggregateType t;
	IPublishableComposer composer;
	UInt64[] address;
	enum Address { name = 0, theAggregate = 1, lastValue = 2 };
	public AggregateType_publ(AggregateType t, IPublishableComposer composer, UInt64[] address)
	{
		this.t = t;
		this.composer = composer;
		this.address = address;
	}
	public String name
	{
		get { return t.name; }
		set
		{
			t.name = value;
			composer.composeAddress(address, (UInt64)Address.name);
			composer.composeString("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public BasicTypes theAggregate
	{
		get { return new BasicTypes_publ(t.theAggregate, composer, Publishable.makeAddress(address, (UInt64)Address.theAggregate)); }
		set
		{
			t.theAggregate = value;
			composer.composeAddress(address, (UInt64)Address.theAggregate);
			composer.composePublishableStructBegin("value");
			BasicTypes_publ.compose(composer, value);
			composer.composePublishableStructEnd(false);
			composer.composeAddressEnd();
		}
	}
	public BasicTypes make_theAggregate() { return t.make_theAggregate(); }
	public Int64 lastValue
	{
		get { return t.lastValue; }
		set
		{
			t.lastValue = value;
			composer.composeAddress(address, (UInt64)Address.lastValue);
			composer.composeInteger("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public static void compose(IPublishableComposer composer, AggregateType t)
	{
		composer.composeString("name", t.name, true);
		composer.composePublishableStructBegin("theAggregate");
		BasicTypes_publ.compose(composer, t.theAggregate);
		composer.composePublishableStructEnd(true);
		composer.composeInteger("lastValue", t.lastValue, false);
	}
} // class AggregateType_publ


//**********************************************************************
// PUBLISHABLE StructSix (3 parameters)
// 1. CHARACTER_STRING name
// 2. STRUCT BasicTypes basic
// 3. STRUCT AggregateType aggregate
//**********************************************************************

public interface StructSix
{
	String name { get; set; }
	BasicTypes basic { get; set; }
	BasicTypes make_basic();
	AggregateType aggregate { get; set; }
	AggregateType make_aggregate();
} // interface StructSix

public class StructSix_impl : StructSix, IEquatable<StructSix_impl>
{
	public String name { get; set; }
	public BasicTypes basic { get; set; }
	public BasicTypes make_basic() { return new BasicTypes_impl(); }
	public AggregateType aggregate { get; set; }
	public AggregateType make_aggregate() { return new AggregateType_impl(); }
	public override bool Equals(object obj)
	{
		return Equals(obj as StructSix_impl);
	}
	public static bool operator ==(StructSix_impl left, StructSix_impl right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(StructSix_impl left, StructSix_impl right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(StructSix_impl other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.name == other.name &&
				this.basic.Equals(other.basic) &&
				this.aggregate.Equals(other.aggregate);
	}
} // class StructSix_impl

public class StructSix_subs : StructSix, StateSubscriberBase
{
	StructSix t;
	enum Address { name = 0, basic = 1, aggregate = 2 };
	public StructSix_subs(StructSix t)
	{
		this.t = t;
	}
	public String name
	{
		get { return t.name; }
		set { throw new InvalidOperationException(); }
	}
	public BasicTypes basic
	{
		get { return new BasicTypes_subs(t.basic); }
		set { throw new InvalidOperationException(); }
	}
	public BasicTypes make_basic() { throw new InvalidOperationException(); }
	public AggregateType aggregate
	{
		get { return new AggregateType_subs(t.aggregate); }
		set { throw new InvalidOperationException(); }
	}
	public AggregateType make_aggregate() { throw new InvalidOperationException(); }
	public static void parseForStateSync(IPublishableParser parser, StructSix t)
	{
		t.name = parser.parseString("name");
		parser.parsePublishableStructBegin("basic");
		t.basic = t.make_basic();
		BasicTypes_subs.parseForStateSync(parser, t.basic);
		parser.parsePublishableStructEnd();
		parser.parsePublishableStructBegin("aggregate");
		t.aggregate = t.make_aggregate();
		AggregateType_subs.parseForStateSync(parser, t.aggregate);
		parser.parsePublishableStructEnd();
	}
	public static bool parse(IPublishableParser parser, StructSix t)
	{
		bool changed = false;
		{
			String newVal = parser.parseString("name");
			if(newVal != t.name)
			{
				t.name = newVal;
				changed = true;
			}
		}
		{
			parser.parsePublishableStructBegin("basic");
			bool currentChanged = BasicTypes_subs.parse(parser, t.basic);
			parser.parsePublishableStructEnd();
			if(currentChanged)
			{
					changed = true;
					// TODO
			}
		}
		{
			parser.parsePublishableStructBegin("aggregate");
			bool currentChanged = AggregateType_subs.parse(parser, t.aggregate);
			parser.parsePublishableStructEnd();
			if(currentChanged)
			{
					changed = true;
					// TODO
			}
		}
		return changed;
	}
	public static bool parse(IPublishableParser parser, StructSix t, UInt64[] addr, int offset)
	{
		bool changed = false;
		switch ((Address)addr[offset])
		{
			case Address.name:
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				String newVal = parser.parseString("value");
				if(newVal != t.name)
				{
					t.name = newVal;
					changed = true;
				}
			}
			break;
			case Address.basic:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1) // full element replace
				{
					parser.parsePublishableStructBegin("value");
					currentChanged = BasicTypes_subs.parse(parser, t.basic);
					parser.parsePublishableStructEnd();
				}
				else if(addr.Length > offset + 1) // let child continue parsing
				{
					currentChanged = BasicTypes_subs.parse(parser, t.basic, addr, offset + 1);
				}
				else
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			case Address.aggregate:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1) // full element replace
				{
					parser.parsePublishableStructBegin("value");
					currentChanged = AggregateType_subs.parse(parser, t.aggregate);
					parser.parsePublishableStructEnd();
				}
				else if(addr.Length > offset + 1) // let child continue parsing
				{
					currentChanged = AggregateType_subs.parse(parser, t.aggregate, addr, offset + 1);
				}
				else
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			default:
				throw new Exception();
		}
		return changed;
	}
	public String stateSubscriberName() { return "StructSix"; }
	public UInt64 stateTypeID() { return 6; }
	public void applyGmqMessageWithUpdates(IPublishableParser parser) { applyMessageWithUpdates(parser); }
	public void applyJsonMessageWithUpdates(IPublishableParser parser) { applyMessageWithUpdates(parser); }
	public void applyGmqStateSyncMessage(IPublishableParser parser) { applyStateSyncMessage(parser); }
	public void applyJsonStateSyncMessage(IPublishableParser parser) { applyStateSyncMessage(parser); }
	public void applyMessageWithUpdates(IPublishableParser parser)
	{
		parser.parseStateUpdateMessageBegin();
		UInt64[] addr = null;
		while(parser.parseAddress(ref addr))
		{
			StructSix_subs.parse(parser, this.t, addr, 0);
			parser.parseAddressEnd();
			addr = null;
		}
		parser.parseStateUpdateMessageEnd();
	}
	public void applyStateSyncMessage(IPublishableParser parser)
	{
		parser.parseStructBegin();
		StructSix_subs.parseForStateSync(parser, this.t);
		parser.parseStructEnd();
	}
} // class StructSix_subs

public class StructSix_publ : StructSix, StatePublisherBase
{
	StructSix t;
	IPublishableComposer composer;
	UInt64[] address;
	enum Address { name = 0, basic = 1, aggregate = 2 };
	public StructSix_publ(StructSix t, IPublishableComposer composer, UInt64[] address)
	{
		this.t = t;
		this.composer = composer;
		this.address = address;
	}
	public String name
	{
		get { return t.name; }
		set
		{
			t.name = value;
			composer.composeAddress(address, (UInt64)Address.name);
			composer.composeString("value", value, false);
			composer.composeAddressEnd();
		}
	}
	public BasicTypes basic
	{
		get { return new BasicTypes_publ(t.basic, composer, Publishable.makeAddress(address, (UInt64)Address.basic)); }
		set
		{
			t.basic = value;
			composer.composeAddress(address, (UInt64)Address.basic);
			composer.composePublishableStructBegin("value");
			BasicTypes_publ.compose(composer, value);
			composer.composePublishableStructEnd(false);
			composer.composeAddressEnd();
		}
	}
	public BasicTypes make_basic() { return t.make_basic(); }
	public AggregateType aggregate
	{
		get { return new AggregateType_publ(t.aggregate, composer, Publishable.makeAddress(address, (UInt64)Address.aggregate)); }
		set
		{
			t.aggregate = value;
			composer.composeAddress(address, (UInt64)Address.aggregate);
			composer.composePublishableStructBegin("value");
			AggregateType_publ.compose(composer, value);
			composer.composePublishableStructEnd(false);
			composer.composeAddressEnd();
		}
	}
	public AggregateType make_aggregate() { return t.make_aggregate(); }
	public static void compose(IPublishableComposer composer, StructSix t)
	{
		composer.composeString("name", t.name, true);
		composer.composePublishableStructBegin("basic");
		BasicTypes_publ.compose(composer, t.basic);
		composer.composePublishableStructEnd(true);
		composer.composePublishableStructBegin("aggregate");
		AggregateType_publ.compose(composer, t.aggregate);
		composer.composePublishableStructEnd(false);
	}
	public String statePublisherName() { return "StructSix"; }
	public UInt64 stateTypeID() { return 6; }
	public void generateStateSyncMessage(IPublishableComposer composer)
	{
		composer.composeStructBegin();
		StructSix_publ.compose(composer, this);
		composer.composeStructEnd();
	}
	public void startTick(BufferT buff)
	{
		composer.startTick(buff);
		composer.composeStateUpdateMessageBegin();
	}
	public BufferT endTick()
	{
		composer.composeStateUpdateMessageEnd();
		return composer.endTick();
	}
} // class StructSix_publ


//**********************************************************************
// PUBLISHABLE publishable_seven (5 parameters)
// 1. VECTOR<INTEGER> intVec
// 2. VECTOR<UINTEGER> uintVec
// 3. VECTOR<REAL> realVec
// 4. VECTOR<CHARACTER_STRING> strVec
// 5. VECTOR< STRUCT point3D> structVec
//**********************************************************************

public interface publishable_seven
{
	IList<Int64> intVec { get; set; }
	IList<Int64> make_intVec();
	IList<UInt64> uintVec { get; set; }
	IList<UInt64> make_uintVec();
	IList<Double> realVec { get; set; }
	IList<Double> make_realVec();
	IList<String> strVec { get; set; }
	IList<String> make_strVec();
	IList<point3D> structVec { get; set; }
	IList<point3D> make_structVec();
	point3D make_structVec_element();
} // interface publishable_seven

public class publishable_seven_impl : publishable_seven, IEquatable<publishable_seven_impl>
{
	public IList<Int64> intVec { get; set; }
	public IList<Int64> make_intVec() { return new List<Int64>(); }
	public IList<UInt64> uintVec { get; set; }
	public IList<UInt64> make_uintVec() { return new List<UInt64>(); }
	public IList<Double> realVec { get; set; }
	public IList<Double> make_realVec() { return new List<Double>(); }
	public IList<String> strVec { get; set; }
	public IList<String> make_strVec() { return new List<String>(); }
	public IList<point3D> structVec { get; set; }
	public IList<point3D> make_structVec() { return new List<point3D>(); }
	public point3D make_structVec_element() { return new point3D_impl(); }
	public override bool Equals(object obj)
	{
		return Equals(obj as publishable_seven_impl);
	}
	public static bool operator ==(publishable_seven_impl left, publishable_seven_impl right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(publishable_seven_impl left, publishable_seven_impl right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(publishable_seven_impl other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				Enumerable.SequenceEqual(this.intVec, other.intVec) &&
				Enumerable.SequenceEqual(this.uintVec, other.uintVec) &&
				Enumerable.SequenceEqual(this.realVec, other.realVec) &&
				Enumerable.SequenceEqual(this.strVec, other.strVec) &&
				Enumerable.SequenceEqual(this.structVec, other.structVec);
	}
} // class publishable_seven_impl

public class publishable_seven_subs : publishable_seven, StateSubscriberBase
{
	publishable_seven t;
	enum Address { intVec = 0, uintVec = 1, realVec = 2, strVec = 3, structVec = 4 };
	public publishable_seven_subs(publishable_seven t)
	{
		this.t = t;
	}
	public IList<Int64> intVec
	{
		get { return new SubscriberVectorWrapper<Int64>(t.intVec); }
		set { throw new InvalidOperationException(); }
	}
	public IList<Int64> make_intVec() { throw new InvalidOperationException(); }
	public IList<UInt64> uintVec
	{
		get { return new SubscriberVectorWrapper<UInt64>(t.uintVec); }
		set { throw new InvalidOperationException(); }
	}
	public IList<UInt64> make_uintVec() { throw new InvalidOperationException(); }
	public IList<Double> realVec
	{
		get { return new SubscriberVectorWrapper<Double>(t.realVec); }
		set { throw new InvalidOperationException(); }
	}
	public IList<Double> make_realVec() { throw new InvalidOperationException(); }
	public IList<String> strVec
	{
		get { return new SubscriberVectorWrapper<String>(t.strVec); }
		set { throw new InvalidOperationException(); }
	}
	public IList<String> make_strVec() { throw new InvalidOperationException(); }
	public IList<point3D> structVec
	{
		get { return new SubscriberVectorWrapper<point3D>(t.structVec); }
		set { throw new InvalidOperationException(); }
	}
	public IList<point3D> make_structVec() { throw new InvalidOperationException(); }
	public point3D make_structVec_element() { throw new InvalidOperationException(); }
	public static void parseForStateSync(IPublishableParser parser, publishable_seven t)
	{
		t.intVec = t.make_intVec();
		parser.parseSimpleVector("intVec", Publishable.makeParser(t.intVec));
		t.uintVec = t.make_uintVec();
		parser.parseSimpleVector("uintVec", Publishable.makeParser(t.uintVec));
		t.realVec = t.make_realVec();
		parser.parseSimpleVector("realVec", Publishable.makeParser(t.realVec));
		t.strVec = t.make_strVec();
		parser.parseSimpleVector("strVec", Publishable.makeParser(t.strVec));
		t.structVec = t.make_structVec();
		parser.parseVector("structVec", (IPublishableParser parser, int index) =>
			{
				parser.parseStructBegin();
				point3D val = t.make_structVec_element();
				point3D_subs.parseForStateSync(parser, val);
				t.structVec.Add(val);
				parser.parseStructEnd();
			}
		);
	}
	public static bool parse(IPublishableParser parser, publishable_seven t)
	{
		bool changed = false;
		{
		IList<Int64> newVal = t.make_intVec();
		parser.parseSimpleVector("intVec", Publishable.makeParser(newVal));
		if(!Enumerable.SequenceEqual(newVal, t.intVec))
		{
			t.intVec = newVal;
			changed = true;
		}
		}
		{
		IList<UInt64> newVal = t.make_uintVec();
		parser.parseSimpleVector("uintVec", Publishable.makeParser(newVal));
		if(!Enumerable.SequenceEqual(newVal, t.uintVec))
		{
			t.uintVec = newVal;
			changed = true;
		}
		}
		{
		IList<Double> newVal = t.make_realVec();
		parser.parseSimpleVector("realVec", Publishable.makeParser(newVal));
		if(!Enumerable.SequenceEqual(newVal, t.realVec))
		{
			t.realVec = newVal;
			changed = true;
		}
		}
		{
		IList<String> newVal = t.make_strVec();
		parser.parseSimpleVector("strVec", Publishable.makeParser(newVal));
		if(!Enumerable.SequenceEqual(newVal, t.strVec))
		{
			t.strVec = newVal;
			changed = true;
		}
		}
		{
		IList<point3D> newVal = t.make_structVec();
		parser.parseVector("structVec", (IPublishableParser parser, int index) =>
			{
				parser.parseStructBegin();
				point3D val = t.make_structVec_element();
				point3D_subs.parseForStateSync(parser, val);
				t.structVec.Add(val);
				parser.parseStructEnd();
			}
		);
		if(!Enumerable.SequenceEqual(newVal, t.structVec))
		{
			t.structVec = newVal;
			changed = true;
		}
		}
		return changed;
	}
	public static bool parse(IPublishableParser parser, publishable_seven t, UInt64[] addr, int offset)
	{
		bool changed = false;
		switch ((Address)addr[offset])
		{
			case Address.intVec:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1) // full vector replace
				{
					IList<Int64> newVal = t.make_intVec();
					parser.parseSimpleVector("value", Publishable.makeParser(newVal));
					if(!Enumerable.SequenceEqual(newVal, t.intVec))
					{
						t.intVec = newVal;
						currentChanged = true;
					}
				}
				else if(addr.Length == offset + 2) // action over one of the elements
				{
					int index = (int)addr[offset + 1];
					currentChanged = PublisherVectorWrapper<Int64>.parseVectorActionSimple(parser, t.intVec, index,
						(IPublishableParser parser) => { return parser.parseInteger("value"); });
				}
				else // simple type can't handle deeper address
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			case Address.uintVec:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1) // full vector replace
				{
					IList<UInt64> newVal = t.make_uintVec();
					parser.parseSimpleVector("value", Publishable.makeParser(newVal));
					if(!Enumerable.SequenceEqual(newVal, t.uintVec))
					{
						t.uintVec = newVal;
						currentChanged = true;
					}
				}
				else if(addr.Length == offset + 2) // action over one of the elements
				{
					int index = (int)addr[offset + 1];
					currentChanged = PublisherVectorWrapper<UInt64>.parseVectorActionSimple(parser, t.uintVec, index,
						(IPublishableParser parser) => { return parser.parseUnsigned("value"); });
				}
				else // simple type can't handle deeper address
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			case Address.realVec:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1) // full vector replace
				{
					IList<Double> newVal = t.make_realVec();
					parser.parseSimpleVector("value", Publishable.makeParser(newVal));
					if(!Enumerable.SequenceEqual(newVal, t.realVec))
					{
						t.realVec = newVal;
						currentChanged = true;
					}
				}
				else if(addr.Length == offset + 2) // action over one of the elements
				{
					int index = (int)addr[offset + 1];
					currentChanged = PublisherVectorWrapper<Double>.parseVectorActionSimple(parser, t.realVec, index,
						(IPublishableParser parser) => { return parser.parseReal("value"); });
				}
				else // simple type can't handle deeper address
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			case Address.strVec:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1) // full vector replace
				{
					IList<String> newVal = t.make_strVec();
					parser.parseSimpleVector("value", Publishable.makeParser(newVal));
					if(!Enumerable.SequenceEqual(newVal, t.strVec))
					{
						t.strVec = newVal;
						currentChanged = true;
					}
				}
				else if(addr.Length == offset + 2) // action over one of the elements
				{
					int index = (int)addr[offset + 1];
					currentChanged = PublisherVectorWrapper<String>.parseVectorActionSimple(parser, t.strVec, index,
						(IPublishableParser parser) => { return parser.parseString("value"); });
				}
				else // simple type can't handle deeper address
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			case Address.structVec:
			{
				bool currentChanged = false;
				if(addr.Length == offset + 1) // full vector replace
				{
					IList<point3D> newVal = t.make_structVec();
					parser.parseVector("value",
						(IPublishableParser parser, int index) =>
						{
							parser.parseStructBegin();
							point3D val = t.make_structVec_element();
							point3D_subs.parseForStateSync(parser, val);
							newVal.Add(val);
							parser.parseStructEnd();
						}
					);
					if(!Enumerable.SequenceEqual(newVal, t.structVec))
					{
						t.structVec = newVal;
						currentChanged = true;
					}
				}
				else if(addr.Length == offset + 2) // action over one of the elements
				{
					int index = (int)addr[offset + 1];
					currentChanged = PublisherVectorWrapper<point3D>.parseVectorActionSimple(parser, t.structVec, index,
						(IPublishableParser parser) =>
						{
							point3D newVal = t.make_structVec_element();
							parser.parsePublishableStructBegin("value");
							point3D_subs.parseForStateSync(parser, newVal);
							parser.parsePublishableStructEnd();
							return newVal;
						}
					);
				}
				else if(addr.Length > offset + 2) // let child continue parsing
				{
					int index = (int)addr[offset + 1];
					currentChanged = point3D_subs.parse(parser, t.structVec[index], addr, offset + 2);
				}
				else
					throw new Exception();

				if(currentChanged)
				{
					changed = true;
					// TODO
				}
			}
			break;
			default:
				throw new Exception();
		}
		return changed;
	}
	public String stateSubscriberName() { return "publishable_seven"; }
	public UInt64 stateTypeID() { return 7; }
	public void applyGmqMessageWithUpdates(IPublishableParser parser) { applyMessageWithUpdates(parser); }
	public void applyJsonMessageWithUpdates(IPublishableParser parser) { applyMessageWithUpdates(parser); }
	public void applyGmqStateSyncMessage(IPublishableParser parser) { applyStateSyncMessage(parser); }
	public void applyJsonStateSyncMessage(IPublishableParser parser) { applyStateSyncMessage(parser); }
	public void applyMessageWithUpdates(IPublishableParser parser)
	{
		parser.parseStateUpdateMessageBegin();
		UInt64[] addr = null;
		while(parser.parseAddress(ref addr))
		{
			publishable_seven_subs.parse(parser, this.t, addr, 0);
			parser.parseAddressEnd();
			addr = null;
		}
		parser.parseStateUpdateMessageEnd();
	}
	public void applyStateSyncMessage(IPublishableParser parser)
	{
		parser.parseStructBegin();
		publishable_seven_subs.parseForStateSync(parser, this.t);
		parser.parseStructEnd();
	}
} // class publishable_seven_subs

public class publishable_seven_publ : publishable_seven, StatePublisherBase
{
	publishable_seven t;
	IPublishableComposer composer;
	UInt64[] address;
	enum Address { intVec = 0, uintVec = 1, realVec = 2, strVec = 3, structVec = 4 };
	public publishable_seven_publ(publishable_seven t, IPublishableComposer composer, UInt64[] address)
	{
		this.t = t;
		this.composer = composer;
		this.address = address;
	}
	public IList<Int64> intVec
	{
		get
		{
			return new PublisherVectorWrapper<Int64>(t.intVec, composer,
				Publishable.makeAddress(address, (UInt64)Address.intVec),
				(IPublishableComposer composer, Int64 val) => { composer.composeInteger("value", val, false); },
				null
			);
		}
		set
		{
			t.intVec = value;
			composer.composeAddress(address, (UInt64)Address.intVec);
			composer.composeSimpleVector("value", Publishable.makeComposer(value), false);
			composer.composeAddressEnd();
		}
	}
	public IList<Int64> make_intVec() { return t.make_intVec(); }
	public IList<UInt64> uintVec
	{
		get
		{
			return new PublisherVectorWrapper<UInt64>(t.uintVec, composer,
				Publishable.makeAddress(address, (UInt64)Address.uintVec),
				(IPublishableComposer composer, UInt64 val) => { composer.composeUnsigned("value", val, false); },
				null
			);
		}
		set
		{
			t.uintVec = value;
			composer.composeAddress(address, (UInt64)Address.uintVec);
			composer.composeSimpleVector("value", Publishable.makeComposer(value), false);
			composer.composeAddressEnd();
		}
	}
	public IList<UInt64> make_uintVec() { return t.make_uintVec(); }
	public IList<Double> realVec
	{
		get
		{
			return new PublisherVectorWrapper<Double>(t.realVec, composer,
				Publishable.makeAddress(address, (UInt64)Address.realVec),
				(IPublishableComposer composer, Double val) => { composer.composeReal("value", val, false); },
				null
			);
		}
		set
		{
			t.realVec = value;
			composer.composeAddress(address, (UInt64)Address.realVec);
			composer.composeSimpleVector("value", Publishable.makeComposer(value), false);
			composer.composeAddressEnd();
		}
	}
	public IList<Double> make_realVec() { return t.make_realVec(); }
	public IList<String> strVec
	{
		get
		{
			return new PublisherVectorWrapper<String>(t.strVec, composer,
				Publishable.makeAddress(address, (UInt64)Address.strVec),
				(IPublishableComposer composer, String val) => { composer.composeString("value", val, false); },
				null
			);
		}
		set
		{
			t.strVec = value;
			composer.composeAddress(address, (UInt64)Address.strVec);
			composer.composeSimpleVector("value", Publishable.makeComposer(value), false);
			composer.composeAddressEnd();
		}
	}
	public IList<String> make_strVec() { return t.make_strVec(); }
	public IList<point3D> structVec
	{
		get
		{
			return new PublisherVectorWrapper<point3D>(t.structVec, composer,
				Publishable.makeAddress(address, (UInt64)Address.structVec),
				(IPublishableComposer composer, point3D val) =>
				{
					composer.composePublishableStructBegin("value");
					point3D_publ.compose(composer, val);
					composer.composePublishableStructEnd(false);
				},
				(point3D val, IPublishableComposer composer, UInt64[] addr) =>
				{ return new point3D_publ(val, composer, addr); }
			);
		}
		set
		{
			t.structVec = value;
			composer.composeAddress(address, (UInt64)Address.structVec);
			composer.composeVector("value", value.Count,
				(IPublishableComposer composer, int ordinal) => { point3D_publ.compose(composer, value[ordinal]); },
				false);
			composer.composeAddressEnd();
		}
	}
	public IList<point3D> make_structVec() { return t.make_structVec(); }
	public point3D make_structVec_element() { return t.make_structVec_element(); }
	public static void compose(IPublishableComposer composer, publishable_seven t)
	{
		composer.composeSimpleVector("intVec", Publishable.makeComposer(t.intVec), true);
		composer.composeSimpleVector("uintVec", Publishable.makeComposer(t.uintVec), true);
		composer.composeSimpleVector("realVec", Publishable.makeComposer(t.realVec), true);
		composer.composeSimpleVector("strVec", Publishable.makeComposer(t.strVec), true);
		composer.composeVector("structVec", t.structVec.Count,
			(IPublishableComposer composer, int ordinal) => { point3D_publ.compose(composer, t.structVec[ordinal]); }, false);
	}
	public String statePublisherName() { return "publishable_seven"; }
	public UInt64 stateTypeID() { return 7; }
	public void generateStateSyncMessage(IPublishableComposer composer)
	{
		composer.composeStructBegin();
		publishable_seven_publ.compose(composer, this);
		composer.composeStructEnd();
	}
	public void startTick(BufferT buff)
	{
		composer.startTick(buff);
		composer.composeStateUpdateMessageBegin();
	}
	public BufferT endTick()
	{
		composer.composeStateUpdateMessageEnd();
		return composer.endTick();
	}
} // class publishable_seven_publ



} // namespace publishable


} // namespace mtest

