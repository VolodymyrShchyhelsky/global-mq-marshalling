//////////////////////////////////////////////////////////////
//
//  Do not edit! file automatically generated by idl_compiler
//
//////////////////////////////////////////////////////////////

using globalmq.marshalling;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.Linq;

namespace mtest
{

	//////////////////////////////////////////////////////////////
	//
	//                 Structures
	//
	//////////////////////////////////////////////////////////////

//**********************************************************************
// DISCRIMINATED_UNION "du_one" Targets: (2 cases)
//  CASE one (3 parameters)(3 parameters)
//    1. REAL D1 (REQUIRED)
//    2. REAL D2 (REQUIRED)
//    3. REAL D3 (REQUIRED)
//  CASE two (1 parameters)(1 parameters)
//    1. VECTOR<REAL> Data (REQUIRED)
//**********************************************************************

	public interface Idu_one : IEquivalenceComparable<Idu_one>
	{
		public enum Variants
		{
			one = 1,
			two = 2,
			unknown
		}
		Variants currentVariant();
		void setCurrentVariant(Variants v);

		// IDL CASE one:
		Double D1 { get; set; }
		Double D2 { get; set; }
		Double D3 { get; set; }

		// IDL CASE two:
		IList<Double> Data { get; set; }
	} // interface Idu_one

	public class du_one : Idu_one, IEquatable<du_one>
	{
		Object mem;

		public override bool Equals(object obj)
		{
			return Equals(obj as du_one);
		}
		public static bool operator ==(du_one left, du_one right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(du_one left, du_one right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(du_one other)
		{
			if (ReferenceEquals(this, other))
				return true;
			else if (ReferenceEquals(null, other))
				return false;
			else
				return this.mem.Equals(other.mem);
		}
		public bool isEquivalent(Idu_one other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else if (currentVariant() != other.currentVariant())
				return false;
			else
			{
				switch(currentVariant())
				{
				case Idu_one.Variants.one:
					return
						this.D1 == other.D1 &&
						this.D2 == other.D2 &&
						this.D3 == other.D3;
				case Idu_one.Variants.two:
					return
						Enumerable.SequenceEqual(this.Data, other.Data);
				default: return true; // both unknown
				}
			}
		}
		public Idu_one.Variants currentVariant()
		{
			if(this.mem == null)
				return Idu_one.Variants.unknown;
			else if(this.mem is CASE_one)
				return Idu_one.Variants.one;
			else if(this.mem is CASE_two)
				return Idu_one.Variants.two;
			else
				return Idu_one.Variants.unknown;
		}
		public void setCurrentVariant(Idu_one.Variants v)
		{
			switch(v)
			{
			case Idu_one.Variants.one:
				this.mem = new CASE_one();
				break;
			case Idu_one.Variants.two:
				this.mem = new CASE_two();
				break;
			default:
				this.mem = null;
				break;
			}
		}

		// IDL CASE one:
		public Double D1
		{
			get { return ((CASE_one)this.mem).D1; }
			set { ((CASE_one)this.mem).D1 = value; }
		}
		public Double D2
		{
			get { return ((CASE_one)this.mem).D2; }
			set { ((CASE_one)this.mem).D2 = value; }
		}
		public Double D3
		{
			get { return ((CASE_one)this.mem).D3; }
			set { ((CASE_one)this.mem).D3 = value; }
		}

		// IDL CASE two:
		public IList<Double> Data
		{
			get { return ((CASE_two)this.mem).Data; }
			set { ((CASE_two)this.mem).Data = value; }
		}

		// IDL CASE one:
		public class CASE_one : IEquatable<CASE_one>
		{
			public Double D1 { get; set; }
			public Double D2 { get; set; }
			public Double D3 { get; set; }
			public CASE_one() { }
			public CASE_one(Double D1, Double D2, Double D3)
			{
				this.D1 = D1;
				this.D2 = D2;
				this.D3 = D3;
			}
			public override bool Equals(object obj)
			{
				return Equals(obj as CASE_one);
			}
			public static bool operator ==(CASE_one left, CASE_one right)
			{
				if (ReferenceEquals(left, right))
					return true;
				else if (ReferenceEquals(left, null))
					return false;
				else if (ReferenceEquals(null, right))
					return false;
				else
					return left.Equals(right);
			}
			public static bool operator !=(CASE_one left, CASE_one right)
			{
				return !(left == right);
			}
			public override int GetHashCode()
			{
				// TODO
				throw new InvalidOperationException();
			}
			public bool Equals(CASE_one other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.D1 == other.D1 &&
						this.D2 == other.D2 &&
						this.D3 == other.D3;
			}
		} // class CASE_one


		// IDL CASE two:
		public class CASE_two : IEquatable<CASE_two>
		{
			List<Double> _Data = new List<Double>();
			public IList<Double> Data
			{
				get { return _Data; }
				set
				{
					if(value == null)
						throw new ArgumentNullException();
					_Data = (List<Double>)value;
				}
			}
			public CASE_two() { }
			public CASE_two(IList<Double> Data)
			{
				this.Data = Data;
			}
			public override bool Equals(object obj)
			{
				return Equals(obj as CASE_two);
			}
			public static bool operator ==(CASE_two left, CASE_two right)
			{
				if (ReferenceEquals(left, right))
					return true;
				else if (ReferenceEquals(left, null))
					return false;
				else if (ReferenceEquals(null, right))
					return false;
				else
					return left.Equals(right);
			}
			public static bool operator !=(CASE_two left, CASE_two right)
			{
				return !(left == right);
			}
			public override int GetHashCode()
			{
				// TODO
				throw new InvalidOperationException();
			}
			public bool Equals(CASE_two other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						Enumerable.SequenceEqual(this.Data, other.Data);
			}
		} // class CASE_two

	} // class du_one

	public class du_one_readonly : Idu_one
	{
		protected Idu_one _data;
		public du_one_readonly(Idu_one data) { this._data = data; }
		public Idu_one.Variants currentVariant() { return this._data.currentVariant(); }
		public void setCurrentVariant(Idu_one.Variants v) { throw new InvalidOperationException(); }

		// IDL CASE one:
		public Double D1
		{
			get { return this._data.D1; }
			set { throw new InvalidOperationException(); }
		}
		public Double D2
		{
			get { return this._data.D2; }
			set { throw new InvalidOperationException(); }
		}
		public Double D3
		{
			get { return this._data.D3; }
			set { throw new InvalidOperationException(); }
		}

		// IDL CASE two:
		public IList<Double> Data
		{
			get { return new VectorWrapper<Double>(this._data.Data, null); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(Idu_one other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
	} // class du_one_readonly

	public interface Istruct_dictionary : IEquivalenceComparable<Istruct_dictionary>
	{
		IDictionary<String, String> dictionary_one { get; set; }
	} // interface struct_dictionary

	public class struct_dictionary : Istruct_dictionary, IEquatable<struct_dictionary>
	{
		Dictionary<String, String> _dictionary_one = new Dictionary<String, String>();
		public IDictionary<String, String> dictionary_one
		{
			get { return _dictionary_one; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_dictionary_one = (Dictionary<String, String>)value;
			}
		}
		public struct_dictionary() { }
		public struct_dictionary(IDictionary<String, String> dictionary_one)
		{
			this.dictionary_one = dictionary_one;
		}
		public override bool Equals(object obj)
		{
			return Equals(obj as struct_dictionary);
		}
		public static bool operator ==(struct_dictionary left, struct_dictionary right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(struct_dictionary left, struct_dictionary right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(struct_dictionary other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					Enumerable.SequenceEqual(this.dictionary_one, other.dictionary_one);
		}
		public bool isEquivalent(Istruct_dictionary other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					Enumerable.SequenceEqual(this.dictionary_one, other.dictionary_one);
		}
	} // class struct_dictionary

	public class struct_dictionary_readonly : Istruct_dictionary
	{
		protected Istruct_dictionary _data;
		public struct_dictionary_readonly(Istruct_dictionary data) { this._data = data; }
		public IDictionary<String, String> dictionary_one
		{
			get { return new DictionaryWrapper<String, String>(this._data.dictionary_one, null); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(Istruct_dictionary other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
	} // class struct_dictionary_readonly

	public interface ISimpleStruct : IEquivalenceComparable<ISimpleStruct>
	{
		Int64 id { get; set; }
		String name { get; set; }
	} // interface SimpleStruct

	public class SimpleStruct : ISimpleStruct, IEquatable<SimpleStruct>
	{
		public Int64 id { get; set; }
		String _name = String.Empty;
		public String name
		{
			get { return _name; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_name = value;
			}
		}
		public SimpleStruct() { }
		public SimpleStruct(Int64 id, String name)
		{
			this.id = id;
			this.name = name;
		}
		public override bool Equals(object obj)
		{
			return Equals(obj as SimpleStruct);
		}
		public static bool operator ==(SimpleStruct left, SimpleStruct right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(SimpleStruct left, SimpleStruct right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(SimpleStruct other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.id == other.id &&
					this.name == other.name;
		}
		public bool isEquivalent(ISimpleStruct other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.id == other.id &&
					this.name == other.name;
		}
	} // class SimpleStruct

	public class SimpleStruct_readonly : ISimpleStruct
	{
		protected ISimpleStruct _data;
		public SimpleStruct_readonly(ISimpleStruct data) { this._data = data; }
		public Int64 id
		{
			get { return this._data.id; }
			set { throw new InvalidOperationException(); }
		}
		public String name
		{
			get { return this._data.name; }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(ISimpleStruct other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
	} // class SimpleStruct_readonly

	//////////////////////////////////////////////////////////////
	//
	//                 Messages
	//
	//////////////////////////////////////////////////////////////

	public class struct_dictionary_message
	{
		public static void compose(JsonComposer composer, IDictionary<String, String> dictionary_one)
		{
			composer.append( "{\n  ");
			composer.addNamePart("dictionary_one");
			Dictionary_String_String_message.compose(composer, dictionary_one);
			composer.append( "\n}" );
		}
		public static void compose(GmqComposer composer, IDictionary<String, String> dictionary_one)
		{
			Dictionary_String_String_message.compose(composer, dictionary_one);
		}
		public static void compose(JsonComposer composer, Istruct_dictionary val)
		{
			compose(composer, val.dictionary_one);
		}
		public static void compose(GmqComposer composer, Istruct_dictionary val)
		{
			compose(composer, val.dictionary_one);
		}
		public static void parse(JsonParser parser, Istruct_dictionary val)		{
			parser.skipDelimiter( '{' );
			while (true)
			{
				string key;
				parser.readKeyFromJson( out key );
				if ( key == "dictionary_one" )
				Dictionary_String_String_message.parse(parser, val.dictionary_one);

				parser.skipSpacesEtc();
				if ( parser.isDelimiter( ',' ) )
				{
					parser.skipDelimiter( ',' );
					continue;
				}
				if ( parser.isDelimiter( '}' ) )
				{
					parser.skipDelimiter( '}' );
					break;
				}
				throw new FormatException(); // bad format
			}
		}
		public static void parse(GmqParser parser, Istruct_dictionary val)
		{
		Dictionary_String_String_message.parse(parser, val.dictionary_one);
		}
	public class Dictionary_String_String_message
	{
		public static void compose(JsonComposer composer, IDictionary<String, String> val)
		{
			composer.append( "{\n  ");
			int i = 0;
			foreach(KeyValuePair<String, String> each in val)
			{
				if (i != 0)
					composer.append(", \n  ");
				composer.append('{');
				composer.composeString(each.Key);
				composer.append(',');
				composer.composeString(each.Value);
				composer.append('}');
				++i;
			}
			composer.append("\n}");
		}
		public static void compose(GmqComposer composer, IDictionary<String, String> val)
		{
			composer.composeUnsignedInteger((UInt64)val.Count);
			foreach(KeyValuePair<String, String> each in val)
			{
				composer.composeString(each.Key);
				composer.composeString(each.Value);
			}
		}
		public static void parse(JsonParser parser, IDictionary<String, String> res)
		{
			parser.skipDelimiter('{');
			if (parser.isDelimiter('}'))
			{
				parser.skipDelimiter('}');
				return;
			}
			while(true)
			{
				parser.skipDelimiter('{');
				String key;
				parser.parseString(out key);
				parser.skipDelimiter(',');
				String val;
				parser.parseString(out val);
				parser.skipDelimiter('}');
				res.Add(key, val);
				if (parser.isDelimiter(','))
				{
					parser.skipDelimiter(',');
					continue;
				}
				if (parser.isDelimiter('}'))
				{
					parser.skipDelimiter('}');
					break;
				}
			}
		}
		public static void parse(GmqParser parser, IDictionary<String, String> res)
		{
			int sz;
			parser.parseUnsignedInteger(out sz);
			for(int i = 0; i < sz; ++i)
			{
				String key;
				parser.parseString(out key);
				String val;
				parser.parseString(out val);
				res.Add(key, val);
			}
		}
	} // class Dictionary_String_String_message

	} // class struct_dictionary_message

	public class SimpleStruct_message
	{
		public static void compose(JsonComposer composer, Int64 id, String name)
		{
			composer.append( "{\n  ");
			composer.addNamePart("id");
			composer.composeSignedInteger(id);
			composer.append( ",\n  " );
			composer.addNamePart("name");
			composer.composeString(name);
			composer.append( "\n}" );
		}
		public static void compose(GmqComposer composer, Int64 id, String name)
		{
			composer.composeSignedInteger(id);
			composer.composeString(name);
		}
		public static void compose(JsonComposer composer, ISimpleStruct val)
		{
			compose(composer, val.id, val.name);
		}
		public static void compose(GmqComposer composer, ISimpleStruct val)
		{
			compose(composer, val.id, val.name);
		}
		public static void parse(JsonParser parser, ISimpleStruct val)		{
			parser.skipDelimiter( '{' );
			while (true)
			{
				string key;
				parser.readKeyFromJson( out key );
				if ( key == "id" )
				{
					Int64 tmp;
					parser.parseSignedInteger(out tmp);
					val.id = tmp;
				}
				else if ( key == "name" )
				{
					String tmp;
					parser.parseString(out tmp);
					val.name = tmp;
				}

				parser.skipSpacesEtc();
				if ( parser.isDelimiter( ',' ) )
				{
					parser.skipDelimiter( ',' );
					continue;
				}
				if ( parser.isDelimiter( '}' ) )
				{
					parser.skipDelimiter( '}' );
					break;
				}
				throw new FormatException(); // bad format
			}
		}
		public static void parse(GmqParser parser, ISimpleStruct val)
		{
		{
			Int64 tmp;
			parser.parseSignedInteger(out tmp);
			val.id = tmp;
		}
		{
			String tmp;
			parser.parseString(out tmp);
			val.name = tmp;
		}
		}
	} // class SimpleStruct_message

//////////////////////////////////////////////////////////////
//
//  Scopes:
//
//  gmq_scope
//  {
//    SimpleGmqMessage
//    message_dictionary_gmq
//  }
//
//  json_scope
//  {
//    SimpleJsonMessage
//    message_dictionary_json
//  }
//
//////////////////////////////////////////////////////////////

	public class gmq_scope
	{
		public enum MsgId
		{
			SimpleGmqMessage = 1,
			message_dictionary_gmq = 9
		}

		public static MessageHandler makeMessageHandler( MsgId id, MessageHandler.HandlerDelegate handler )
		{
			return new MessageHandler((ulong)id, handler);
		}
		public static MessageHandler makeDefaultMessageHandler( MessageHandler.HandlerDelegate handler)
		{
			return new MessageHandler(MessageHandler.DefaultHandler, handler);
		}
		public static void handleMessage( BufferT buffer, params MessageHandler[] handlers )
		{
			handleMessage(buffer.getReadIterator(), handlers);
		}
		public static void handleMessage( ReadIteratorT riter, params MessageHandler[] handlers )
		{
			GmqParser parser = new GmqParser( riter );
			MessageHandler.gmq_handle( parser, handlers );
		}

		public interface ISimpleGmqMessage : IEquivalenceComparable<ISimpleGmqMessage>
		{
			ISimpleStruct data { get; set; }
		} // interface SimpleGmqMessage

		public class SimpleGmqMessage : ISimpleGmqMessage, IEquatable<SimpleGmqMessage>
		{
			SimpleStruct _data = new SimpleStruct();
			public ISimpleStruct data
			{
				get { return _data; }
				set
				{
					if(value == null)
						throw new ArgumentNullException();
					_data = (SimpleStruct)value;
				}
			}
			public SimpleGmqMessage() { }
			public SimpleGmqMessage(ISimpleStruct data)
			{
				this.data = data;
			}
			public override bool Equals(object obj)
			{
				return Equals(obj as SimpleGmqMessage);
			}
			public static bool operator ==(SimpleGmqMessage left, SimpleGmqMessage right)
			{
				if (ReferenceEquals(left, right))
					return true;
				else if (ReferenceEquals(left, null))
					return false;
				else if (ReferenceEquals(null, right))
					return false;
				else
					return left.Equals(right);
			}
			public static bool operator !=(SimpleGmqMessage left, SimpleGmqMessage right)
			{
				return !(left == right);
			}
			public override int GetHashCode()
			{
				// TODO
				throw new InvalidOperationException();
			}
			public bool Equals(SimpleGmqMessage other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.data.Equals(other.data);
			}
			public bool isEquivalent(ISimpleGmqMessage other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.data.isEquivalent(other.data);
			}
		} // class SimpleGmqMessage

		public class SimpleGmqMessage_message
		{
			public static void compose(JsonComposer composer, ISimpleStruct data)
			{
				composer.append( "{\n  ");
				composer.addNamePart("data");
				SimpleStruct_message.compose(composer, data);
				composer.append( "\n}" );
			}
			public static void compose(GmqComposer composer, ISimpleStruct data)
			{
				SimpleStruct_message.compose(composer, data);
			}
			public static void compose(JsonComposer composer, ISimpleGmqMessage val)
			{
				compose(composer, val.data);
			}
			public static void compose(GmqComposer composer, ISimpleGmqMessage val)
			{
				compose(composer, val.data);
			}
			public static void parse(JsonParser parser, ISimpleGmqMessage val)			{
				parser.skipDelimiter( '{' );
				while (true)
				{
					string key;
					parser.readKeyFromJson( out key );
					if ( key == "data" )
					SimpleStruct_message.parse(parser, val.data);

					parser.skipSpacesEtc();
					if ( parser.isDelimiter( ',' ) )
					{
						parser.skipDelimiter( ',' );
						continue;
					}
					if ( parser.isDelimiter( '}' ) )
					{
						parser.skipDelimiter( '}' );
						break;
					}
					throw new FormatException(); // bad format
				}
			}
			public static void parse(GmqParser parser, ISimpleGmqMessage val)
			{
			SimpleStruct_message.parse(parser, val.data);
			}
		} // class SimpleGmqMessage_message

		public static void composeMessage_SimpleGmqMessage(BufferT buffer, ISimpleStruct data)
		{
			GmqComposer composer = new GmqComposer(buffer);

			composer.composeUnsignedInteger((UInt64)MsgId.SimpleGmqMessage);
			SimpleGmqMessage_message.compose(composer, data);
		}

		public static SimpleGmqMessage parseMessage_SimpleGmqMessage(ParserBase parser)
		{
			SimpleGmqMessage tmp = new SimpleGmqMessage();
			if (parser is GmqParser gmqP)
				SimpleGmqMessage_message.parse(gmqP, tmp);
			else if (parser is JsonParser jsonP)
				SimpleGmqMessage_message.parse(jsonP, tmp);
			else
				throw new ArgumentException();
			return tmp;
		}
		public static void composeMessage_message_dictionary_gmq(BufferT buffer, IDictionary<String, String> dictionary_one)
		{
			GmqComposer composer = new GmqComposer(buffer);

			composer.composeUnsignedInteger((UInt64)MsgId.message_dictionary_gmq);
			struct_dictionary_message.compose(composer, dictionary_one);
		}

		public static struct_dictionary parseMessage_message_dictionary_gmq(ParserBase parser)
		{
			struct_dictionary tmp = new struct_dictionary();
			if (parser is GmqParser gmqP)
				struct_dictionary_message.parse(gmqP, tmp);
			else if (parser is JsonParser jsonP)
				struct_dictionary_message.parse(jsonP, tmp);
			else
				throw new ArgumentException();
			return tmp;
		}
	} // class gmq_scope

	public class json_scope
	{
		public enum MsgId
		{
			SimpleJsonMessage = 1,
			message_dictionary_json = 9
		}

		public static MessageHandler makeMessageHandler( MsgId id, MessageHandler.HandlerDelegate handler )
		{
			return new MessageHandler((ulong)id, handler);
		}
		public static MessageHandler makeDefaultMessageHandler( MessageHandler.HandlerDelegate handler)
		{
			return new MessageHandler(MessageHandler.DefaultHandler, handler);
		}
		public static void handleMessage( BufferT buffer, params MessageHandler[] handlers )
		{
			handleMessage(buffer.getReadIterator(), handlers);
		}
		public static void handleMessage( ReadIteratorT riter, params MessageHandler[] handlers )
		{
			JsonParser parser = new JsonParser( riter );
			MessageHandler.json_handle( parser, handlers );
		}

		public interface ISimpleJsonMessage : IEquivalenceComparable<ISimpleJsonMessage>
		{
			ISimpleStruct data { get; set; }
		} // interface SimpleJsonMessage

		public class SimpleJsonMessage : ISimpleJsonMessage, IEquatable<SimpleJsonMessage>
		{
			SimpleStruct _data = new SimpleStruct();
			public ISimpleStruct data
			{
				get { return _data; }
				set
				{
					if(value == null)
						throw new ArgumentNullException();
					_data = (SimpleStruct)value;
				}
			}
			public SimpleJsonMessage() { }
			public SimpleJsonMessage(ISimpleStruct data)
			{
				this.data = data;
			}
			public override bool Equals(object obj)
			{
				return Equals(obj as SimpleJsonMessage);
			}
			public static bool operator ==(SimpleJsonMessage left, SimpleJsonMessage right)
			{
				if (ReferenceEquals(left, right))
					return true;
				else if (ReferenceEquals(left, null))
					return false;
				else if (ReferenceEquals(null, right))
					return false;
				else
					return left.Equals(right);
			}
			public static bool operator !=(SimpleJsonMessage left, SimpleJsonMessage right)
			{
				return !(left == right);
			}
			public override int GetHashCode()
			{
				// TODO
				throw new InvalidOperationException();
			}
			public bool Equals(SimpleJsonMessage other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.data.Equals(other.data);
			}
			public bool isEquivalent(ISimpleJsonMessage other)
			{
				if (ReferenceEquals(other, null))
					return false;
				else if (ReferenceEquals(this, other))
					return true;
				else
					return
						this.data.isEquivalent(other.data);
			}
		} // class SimpleJsonMessage

		public class SimpleJsonMessage_message
		{
			public static void compose(JsonComposer composer, ISimpleStruct data)
			{
				composer.append( "{\n  ");
				composer.addNamePart("data");
				SimpleStruct_message.compose(composer, data);
				composer.append( "\n}" );
			}
			public static void compose(GmqComposer composer, ISimpleStruct data)
			{
				SimpleStruct_message.compose(composer, data);
			}
			public static void compose(JsonComposer composer, ISimpleJsonMessage val)
			{
				compose(composer, val.data);
			}
			public static void compose(GmqComposer composer, ISimpleJsonMessage val)
			{
				compose(composer, val.data);
			}
			public static void parse(JsonParser parser, ISimpleJsonMessage val)			{
				parser.skipDelimiter( '{' );
				while (true)
				{
					string key;
					parser.readKeyFromJson( out key );
					if ( key == "data" )
					SimpleStruct_message.parse(parser, val.data);

					parser.skipSpacesEtc();
					if ( parser.isDelimiter( ',' ) )
					{
						parser.skipDelimiter( ',' );
						continue;
					}
					if ( parser.isDelimiter( '}' ) )
					{
						parser.skipDelimiter( '}' );
						break;
					}
					throw new FormatException(); // bad format
				}
			}
			public static void parse(GmqParser parser, ISimpleJsonMessage val)
			{
			SimpleStruct_message.parse(parser, val.data);
			}
		} // class SimpleJsonMessage_message

		public static void composeMessage_SimpleJsonMessage(BufferT buffer, ISimpleStruct data)
		{
			JsonComposer composer = new JsonComposer(buffer);

			composer.append("{\n  ");
			composer.addNamePart("msgid");
			composer.composeUnsignedInteger((UInt64)MsgId.SimpleJsonMessage);
			composer.append(",\n  ");
			composer.addNamePart("msgbody");
			SimpleJsonMessage_message.compose(composer, data);
			composer.append("\n}");
		}

		public static SimpleJsonMessage parseMessage_SimpleJsonMessage(ParserBase parser)
		{
			SimpleJsonMessage tmp = new SimpleJsonMessage();
			if (parser is GmqParser gmqP)
				SimpleJsonMessage_message.parse(gmqP, tmp);
			else if (parser is JsonParser jsonP)
				SimpleJsonMessage_message.parse(jsonP, tmp);
			else
				throw new ArgumentException();
			return tmp;
		}
		public static void composeMessage_message_dictionary_json(BufferT buffer, IDictionary<String, String> dictionary_one)
		{
			JsonComposer composer = new JsonComposer(buffer);

			composer.append("{\n  ");
			composer.addNamePart("msgid");
			composer.composeUnsignedInteger((UInt64)MsgId.message_dictionary_json);
			composer.append(",\n  ");
			composer.addNamePart("msgbody");
			struct_dictionary_message.compose(composer, dictionary_one);
			composer.append("\n}");
		}

		public static struct_dictionary parseMessage_message_dictionary_json(ParserBase parser)
		{
			struct_dictionary tmp = new struct_dictionary();
			if (parser is GmqParser gmqP)
				struct_dictionary_message.parse(gmqP, tmp);
			else if (parser is JsonParser jsonP)
				struct_dictionary_message.parse(jsonP, tmp);
			else
				throw new ArgumentException();
			return tmp;
		}
	} // class json_scope

	//////////////////////////////////////////////////////////////
	//
	//                 Publishables
	//
	//////////////////////////////////////////////////////////////

	public class du_one_subscriber : Idu_one
	{

		/////////////////////////////////  begin user override section /////////////////////////////////


		// IDL CASE one:

		// IDL CASE two:
		public virtual void notifyUpdated_CurrentVariant(Idu_one.Variants old) { }

		// IDL CASE one:
		public virtual void notifyUpdated_D1(Double old) { }
		public virtual void notifyUpdated_D2(Double old) { }
		public virtual void notifyUpdated_D3(Double old) { }

		// IDL CASE two:
		public virtual void notifyUpdated_Data() { }
		public virtual void notifyElementUpdated_Data(int index, Double old) { }
		public virtual void notifyInserted_Data(int index) { }
		public virtual void notifyErased_Data(int index, Double oldVal) { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected Idu_one _data;
		enum Address
		{
			CurrentVariant = 0,

			// IDL CASE one:
			D1 = 1,
			D2 = 2,
			D3 = 3,

			// IDL CASE two:
			Data = 1
		};
		public du_one_subscriber(Idu_one data) { this._data = data; }
		public Idu_one.Variants currentVariant() { return this._data.currentVariant(); }
		public void setCurrentVariant(Idu_one.Variants v) { throw new InvalidOperationException(); }
		bool update_CurrentVariant(IPublishableParser parser, String name)
		{
			Idu_one.Variants newVal = (Idu_one.Variants)parser.parseUnsigned(name);
			if (newVal != this._data.currentVariant())
			{
				Idu_one.Variants oldVal = this._data.currentVariant();
				this._data.setCurrentVariant(newVal);
				this._reset_handlers();
				notifyUpdated_CurrentVariant(oldVal);
				return true;
			}
			else
				return false;
		}

		// IDL CASE one:
		public Double D1
		{
			get { return this._data.D1; }
			set { throw new InvalidOperationException(); }
		}
		bool update_D1(IPublishableParser parser, String name)
		{
			Double newVal = parser.parseReal(name);
			if (newVal != this._data.D1)
			{
				Double oldVal = this._data.D1;
				this._data.D1 = newVal;
				notifyUpdated_D1(oldVal);
				return true;
			}
			else
				return false;
		}
		public Double D2
		{
			get { return this._data.D2; }
			set { throw new InvalidOperationException(); }
		}
		bool update_D2(IPublishableParser parser, String name)
		{
			Double newVal = parser.parseReal(name);
			if (newVal != this._data.D2)
			{
				Double oldVal = this._data.D2;
				this._data.D2 = newVal;
				notifyUpdated_D2(oldVal);
				return true;
			}
			else
				return false;
		}
		public Double D3
		{
			get { return this._data.D3; }
			set { throw new InvalidOperationException(); }
		}
		bool update_D3(IPublishableParser parser, String name)
		{
			Double newVal = parser.parseReal(name);
			if (newVal != this._data.D3)
			{
				Double oldVal = this._data.D3;
				this._data.D3 = newVal;
				notifyUpdated_D3(oldVal);
				return true;
			}
			else
				return false;
		}

		// IDL CASE two:
		public IList<Double> Data
		{
			get { return new ReadOnlyCollection<Double>(this._data.Data); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(Idu_one other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, Idu_one data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static du_one parseForStateSync(IPublishableParser parser)
		{
			du_one data = new du_one();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, Idu_one data)
		{
			parser.parseStructBegin();
			Idu_one.Variants newVal = (Idu_one.Variants)parser.parseUnsigned("caseId");
			data.setCurrentVariant(newVal);
				// mb: get it back from data, in case is an unknown value
				switch(data.currentVariant())
				{
					case Idu_one.Variants.one:
						CASE_one_subscriber.parseForStateSync(parser, "caseData", data);
						break;
					case Idu_one.Variants.two:
						CASE_two_subscriber.parseForStateSync(parser, "caseData", data);
						break;
					default:
						break; //TODO: actually skip any caseData
				}
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, du_one_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			parser.parseStructBegin();
			bool changed = subscriber.update_CurrentVariant(parser, "caseId");
				switch(subscriber.currentVariant())
				{
					case Idu_one.Variants.one:
						changed = CASE_one_subscriber.parse(parser, "caseData", subscriber) | changed;
						break;
					case Idu_one.Variants.two:
						changed = CASE_two_subscriber.parse(parser, "caseData", subscriber) | changed;
						break;
					default:
						break; //TODO: actually skip any caseData
				}
			parser.parseStructEnd();
			return changed;
		}
		public static bool parse(IPublishableParser parser, du_one_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			if( (Address)addr[offset] == Address.CurrentVariant)
			{
				if(addr.Length != offset + 1)
					throw new Exception();
				changed = subscriber.update_CurrentVariant(parser, "value") | changed;
			}
			else
			{
				switch(subscriber.currentVariant())
				{
					case Idu_one.Variants.one:
						changed = CASE_one_subscriber.parse(parser, subscriber, addr, offset) | changed;
						break;
					case Idu_one.Variants.two:
						changed = CASE_two_subscriber.parse(parser, subscriber, addr, offset) | changed;
						break;
					default:
						break; //TODO: actually skip any deeper data
				}
			}
			return changed;
		}
		void _reset_handlers()
		{

			// IDL CASE one:

			// IDL CASE two:
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(Idu_one data)
		{
			this._data = data;
			_reset_handlers();
		}

		// IDL CASE one:
		public class CASE_one_subscriber
		{
			public static void parseForStateSync(IPublishableParser parser, String expectedName, Idu_one data)
			{
				parser.parseKey(expectedName);
				parseForStateSync(parser, data);
			}
			public static du_one parseForStateSync(IPublishableParser parser)
			{
				du_one data = new du_one();
				parseForStateSync(parser, data);
				return data;
			}
			static void parseForStateSync(IPublishableParser parser, Idu_one data)
			{
				parser.parseStructBegin();
				data.D1 = parser.parseReal("D1");
				data.D2 = parser.parseReal("D2");
				data.D3 = parser.parseReal("D3");
				parser.parseStructEnd();
			}
			public static bool parse(IPublishableParser parser, String expectedName, du_one_subscriber subscriber)
			{
				parser.parseKey(expectedName);
				parser.parseStructBegin();
				bool changed = false;
				changed = subscriber.update_D1(parser, "D1") | changed;
				changed = subscriber.update_D2(parser, "D2") | changed;
				changed = subscriber.update_D3(parser, "D3") | changed;
				parser.parseStructEnd();
				return changed;
			}
			public static bool parse(IPublishableParser parser, du_one_subscriber subscriber, UInt64[] addr, int offset)
			{
				bool changed = false;
				switch ((Address)addr[offset])
				{
					case Address.D1:
					{
						if(addr.Length != offset + 1)
							throw new Exception();
						changed = subscriber.update_D1(parser, "value") | changed;
						break;
					}
					case Address.D2:
					{
						if(addr.Length != offset + 1)
							throw new Exception();
						changed = subscriber.update_D2(parser, "value") | changed;
						break;
					}
					case Address.D3:
					{
						if(addr.Length != offset + 1)
							throw new Exception();
						changed = subscriber.update_D3(parser, "value") | changed;
						break;
					}
					default:
						throw new Exception();
				}
				return changed;
			}
		} // class CASE_one_subscriber


		// IDL CASE two:
		public class CASE_two_subscriber
		{
			public static void parseForStateSync(IPublishableParser parser, String expectedName, Idu_one data)
			{
				parser.parseKey(expectedName);
				parseForStateSync(parser, data);
			}
			public static du_one parseForStateSync(IPublishableParser parser)
			{
				du_one data = new du_one();
				parseForStateSync(parser, data);
				return data;
			}
			static void parseForStateSync(IPublishableParser parser, Idu_one data)
			{
				parser.parseStructBegin();
				parser.parseVector2("Data", data.Data, Double_subscriber.parseForStateSync);
				parser.parseStructEnd();
			}
			public static bool parse(IPublishableParser parser, String expectedName, du_one_subscriber subscriber)
			{
				parser.parseKey(expectedName);
				parser.parseStructBegin();
				bool changed = false;
				{
					IList<Double> newVal = new List<Double>();
					parser.parseVector2("Data", newVal, Double_subscriber.parseForStateSync);
					if(!Enumerable.SequenceEqual(newVal, subscriber._data.Data))
					{
						subscriber._data.Data = newVal;
						changed = true;
						subscriber.notifyUpdated_Data();
					}
				}
				parser.parseStructEnd();
				return changed;
			}
			public static bool parse(IPublishableParser parser, du_one_subscriber subscriber, UInt64[] addr, int offset)
			{
				bool changed = false;
				switch ((Address)addr[offset])
				{
					case Address.Data:
					{
						bool currentChanged = false;
						if(addr.Length == offset + 1) // full vector replace
						{
							IList<Double> newVal = new List<Double>();
							parser.parseVector2("value", newVal, Double_subscriber.parseForStateSync);
							if(!Enumerable.SequenceEqual(newVal, subscriber._data.Data))
							{
								subscriber._data.Data = newVal;
								currentChanged = true;
							}
						}
						else if(addr.Length == offset + 2) // action over one of the elements
						{
							int index = (int)addr[offset + 1];
							Publishable.ActionOnVector action = (Publishable.ActionOnVector)parser.parseActionInPublishable();
							switch (action)
							{
							case Publishable.ActionOnVector.update_at:
							{
								Double newVal = parser.parseReal("value");
								if (!subscriber._data.Data[index].Equals(newVal))
								{
									Double oldVal = subscriber._data.Data[index];
									subscriber._data.Data[index] = newVal;
									currentChanged = true;
									subscriber.notifyElementUpdated_Data(index, oldVal);
								}
								break;
							}
							case Publishable.ActionOnVector.insert_single_before:
							{
								Double newVal = parser.parseReal("value");
								subscriber._data.Data.Insert(index, newVal);
								currentChanged = true;
								subscriber.notifyInserted_Data(index);
								break;
							}
							case Publishable.ActionOnVector.remove_at:
							{
								Double oldVal = subscriber._data.Data[index];
								subscriber._data.Data.RemoveAt(index);
								currentChanged = true;
								subscriber.notifyErased_Data(index, oldVal);
								break;
							}
							default:
								throw new Exception();
							}
						}
						else // simple type can't handle deeper address
							throw new Exception();

						if(currentChanged)
						{
							changed = true;
							subscriber.notifyUpdated_Data();
						}
						break;
					}
					default:
						throw new Exception();
				}
				return changed;
			}
		} // class CASE_two_subscriber

	} // class du_one_subscriber

	public class du_one_publisher : Idu_one
	{
		Idu_one t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			CurrentVariant = 0,

			// IDL CASE one:
			D1 = 1,
			D2 = 2,
			D3 = 3,

			// IDL CASE two:
			Data = 1
		};
		public du_one_publisher(Idu_one t, IPublishableComposer composer, UInt64[] address)
		{
			this.t = t;
			this.composer = composer;
			this.address = address;
		}
		public Idu_one.Variants currentVariant() { return t.currentVariant(); }
		public void setCurrentVariant(Idu_one.Variants v)
		{
			t.setCurrentVariant(v);
			composer.composeAddress(address, (UInt64)Address.CurrentVariant);
			composer.composeUnsigned("value", (UInt64)v, false);
			composer.composeAddressEnd();
		}

		// IDL CASE one:
		public Double D1
		{
			get { return t.D1; }
			set
			{
				t.D1 = value;
				composer.composeAddress(address, (UInt64)Address.D1);
				composer.composeReal("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public Double D2
		{
			get { return t.D2; }
			set
			{
				t.D2 = value;
				composer.composeAddress(address, (UInt64)Address.D2);
				composer.composeReal("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public Double D3
		{
			get { return t.D3; }
			set
			{
				t.D3 = value;
				composer.composeAddress(address, (UInt64)Address.D3);
				composer.composeReal("value", value, false);
				composer.composeAddressEnd();
			}
		}

		// IDL CASE two:
		public IList<Double> Data
		{
			get
			{
				return new PublisherVectorWrapper<Double>(t.Data, composer,
					Publishable.makeAddress(address, (UInt64)Address.Data),
					(IPublishableComposer composer, Double v) => { composer.composeReal("value", v, false); },
					null
				);
			}
			set
			{
				t.Data = value;
				composer.composeAddress(address, (UInt64)Address.Data);
				composer.composeVector2("value", value,
					(IPublishableComposer composer, Double v) => { composer.composeReal(null, v, false); }, false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(Idu_one other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, Idu_one val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, Idu_one t)
		{
			composer.composeStructBegin();
			Idu_one.Variants c = t.currentVariant();
				composer.composeUnsigned("caseId", (UInt64)c, true);
				switch(c)
				{
					case Idu_one.Variants.one:
						CASE_one_publisher.compose(composer, "caseData", t, false);
						break;
					case Idu_one.Variants.two:
						CASE_two_publisher.compose(composer, "caseData", t, false);
						break;
					default:
						break;
				}
			composer.composeStructEnd();
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(Idu_one data) { this.t = data; }

		// IDL CASE one:
		public class CASE_one_publisher
		{
			public static void compose(IPublishableComposer composer, String name, Idu_one val, bool separator)
			{
				composer.composeKey(name);
				compose(composer, val);
				composer.addSeparator(separator);
			}
			public static void compose(IPublishableComposer composer, Idu_one t)
			{
				composer.composeStructBegin();
				composer.composeReal("D1", t.D1, true);
				composer.composeReal("D2", t.D2, true);
				composer.composeReal("D3", t.D3, false);
				composer.composeStructEnd();
			}
		} // class CASE_one_publisher


		// IDL CASE two:
		public class CASE_two_publisher
		{
			public static void compose(IPublishableComposer composer, String name, Idu_one val, bool separator)
			{
				composer.composeKey(name);
				compose(composer, val);
				composer.addSeparator(separator);
			}
			public static void compose(IPublishableComposer composer, Idu_one t)
			{
				composer.composeStructBegin();
				composer.composeVector2("Data", t.Data,
					(IPublishableComposer composer, Double v) => { composer.composeReal(null, v, false); },
					false);
				composer.composeStructEnd();
			}
		} // class CASE_two_publisher

	} // class du_one_publisher

	public class struct_dictionary_subscriber : Istruct_dictionary
	{

		/////////////////////////////////  begin user override section /////////////////////////////////

		public virtual void notifyUpdated_dictionary_one() { }
		public virtual void notifyValueUpdated_dictionary_one(String key, String oldValue) { }
		public virtual void notifyInserted_dictionary_one(String key, String newValue) { }
		public virtual void notifyRemoved_dictionary_one(String key, String oldValue) { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected Istruct_dictionary _data;
		enum Address
		{
			dictionary_one = 0
		}
		public struct_dictionary_subscriber(Istruct_dictionary data) { this._data = data; }
		public IDictionary<String, String> dictionary_one
		{
			get { return new ReadOnlyDictionary<String, String>(this._data.dictionary_one); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(Istruct_dictionary other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, Istruct_dictionary data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static struct_dictionary parseForStateSync(IPublishableParser parser)
		{
			struct_dictionary data = new struct_dictionary();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, Istruct_dictionary data)
		{
			parser.parseStructBegin();
			parser.parseDictionary("dictionary_one", data.dictionary_one,
				String_subscriber.parseForStateSync,
				String_subscriber.parseForStateSync
			);
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, struct_dictionary_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			parser.parseStructBegin();
			bool changed = false;
			{
				Dictionary<String, String> newVal = new Dictionary<String, String>();
			parser.parseDictionary("dictionary_one", newVal,
				String_subscriber.parseForStateSync,
				String_subscriber.parseForStateSync
			);
				if(!Enumerable.SequenceEqual(newVal, subscriber._data.dictionary_one))
				{
					subscriber._data.dictionary_one = newVal;
					changed = true;
					subscriber.notifyUpdated_dictionary_one();
				}
			}
			parser.parseStructEnd();
			return changed;
		}
		public static bool parse(IPublishableParser parser, struct_dictionary_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			switch ((Address)addr[offset])
			{
				case Address.dictionary_one:
				{
					bool currentChanged = false;
					if(addr.Length == offset + 1) // full dictionary replace
					{
						Dictionary<String, String> newVal = new Dictionary<String, String>();
						parser.parseDictionary("value", newVal,
							String_subscriber.parseForStateSync,
							String_subscriber.parseForStateSync
						);
						if(!Enumerable.SequenceEqual(newVal, subscriber._data.dictionary_one))
						{
							subscriber._data.dictionary_one = newVal;
							currentChanged = true;
						}
					}
					else if(addr.Length == offset + 2) // action over one of the elements
					{
						Publishable.ActionOnDictionary action = (Publishable.ActionOnDictionary)addr[offset + 1];
						switch (action)
						{
						case Publishable.ActionOnDictionary.update_value:
						{
							String key = parser.parseString("key");
							String newVal = parser.parseString("value");
							String oldVal = subscriber._data.dictionary_one[key];
							subscriber._data.dictionary_one[key] = newVal;
							if (newVal != oldVal)
							{
								currentChanged = true;
								subscriber.notifyValueUpdated_dictionary_one(key, oldVal);
							}
							break;
						}
						case Publishable.ActionOnDictionary.insert:
						{
							String key = parser.parseString("key");
							String newVal = parser.parseString("value");
							subscriber._data.dictionary_one.Add(key, newVal);
							currentChanged = true;
							subscriber.notifyInserted_dictionary_one(key, newVal);
							break;
						}
						case Publishable.ActionOnDictionary.remove:
						{
							String key = parser.parseString("key");
							String oldVal = subscriber._data.dictionary_one[key];
							subscriber._data.dictionary_one.Remove(key);
							currentChanged = true;
							subscriber.notifyRemoved_dictionary_one(key, oldVal);
							break;
						}
						default:
							throw new Exception();
						}
					}
					else // simple type can't handle deeper address
						throw new Exception();

					if(currentChanged)
					{
						changed = true;
						subscriber.notifyUpdated_dictionary_one();
					}
					break;
				}
				default:
					throw new Exception();
			}
			return changed;
		}
		public void _reset_handlers()
		{
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(Istruct_dictionary data)
		{
			this._data = data;
			this._reset_handlers();
		}
	} // class struct_dictionary_subscriber

	public class struct_dictionary_publisher : Istruct_dictionary

	{
		Istruct_dictionary t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			dictionary_one = 0
		}
		public struct_dictionary_publisher(Istruct_dictionary t, IPublishableComposer composer, UInt64[] address)
		{
			this.t = t;
			this.composer = composer;
			this.address = address;
		}
		public IDictionary<String, String> dictionary_one
		{
			get
			{
				return new PublisherDictionaryWrapper<String,String>(t.dictionary_one, composer,
					Publishable.makeAddress(address, (UInt64)Address.dictionary_one),
					(IPublishableComposer composer, String k, bool s) => { composer.composeString("key", k, s); },
					(IPublishableComposer composer, String v) => { composer.composeString("value", v, false); },
					null
				);
			}
			set
			{
				t.dictionary_one = value;
				composer.composeAddress(address, (UInt64)Address.dictionary_one);
				composer.composeDictionary("value", value,
					(IPublishableComposer composer, String k) => { composer.composeString(null, k, false); },
					(IPublishableComposer composer, String v) => { composer.composeString(null, v, false); },
					false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(Istruct_dictionary other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, Istruct_dictionary val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, Istruct_dictionary t)
		{
			composer.composeStructBegin();
			composer.composeDictionary("dictionary_one", t.dictionary_one,
				(IPublishableComposer composer, String v) => { composer.composeString(null, v, false); },
				(IPublishableComposer composer, String v) => { composer.composeString(null, v, false); },
				false);
			composer.composeStructEnd();
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(Istruct_dictionary data) { this.t = data; }
	} // class struct_dictionary_publisher

	public class SimpleStruct_subscriber : ISimpleStruct
	{

		/////////////////////////////////  begin user override section /////////////////////////////////

		public virtual void notifyUpdated_id(Int64 old) { }
		public virtual void notifyUpdated_name(String old) { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected ISimpleStruct _data;
		enum Address
		{
			id = 0,
			name = 1
		}
		public SimpleStruct_subscriber(ISimpleStruct data) { this._data = data; }
		public Int64 id
		{
			get { return this._data.id; }
			set { throw new InvalidOperationException(); }
		}
		bool update_id(IPublishableParser parser, String name)
		{
			Int64 newVal = parser.parseInteger(name);
			if (newVal != this._data.id)
			{
				Int64 oldVal = this._data.id;
				this._data.id = newVal;
				notifyUpdated_id(oldVal);
				return true;
			}
			else
				return false;
		}
		public String name
		{
			get { return this._data.name; }
			set { throw new InvalidOperationException(); }
		}
		bool update_name(IPublishableParser parser, String name)
		{
			String newVal = parser.parseString(name);
			if (newVal != this._data.name)
			{
				String oldVal = this._data.name;
				this._data.name = newVal;
				notifyUpdated_name(oldVal);
				return true;
			}
			else
				return false;
		}
		public bool isEquivalent(ISimpleStruct other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, ISimpleStruct data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static SimpleStruct parseForStateSync(IPublishableParser parser)
		{
			SimpleStruct data = new SimpleStruct();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, ISimpleStruct data)
		{
			parser.parseStructBegin();
			data.id = parser.parseInteger("id");
			data.name = parser.parseString("name");
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, SimpleStruct_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			parser.parseStructBegin();
			bool changed = false;
			changed = subscriber.update_id(parser, "id") | changed;
			changed = subscriber.update_name(parser, "name") | changed;
			parser.parseStructEnd();
			return changed;
		}
		public static bool parse(IPublishableParser parser, SimpleStruct_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			switch ((Address)addr[offset])
			{
				case Address.id:
				{
					if(addr.Length != offset + 1)
						throw new Exception();
					changed = subscriber.update_id(parser, "value") | changed;
					break;
				}
				case Address.name:
				{
					if(addr.Length != offset + 1)
						throw new Exception();
					changed = subscriber.update_name(parser, "value") | changed;
					break;
				}
				default:
					throw new Exception();
			}
			return changed;
		}
		public void _reset_handlers()
		{
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(ISimpleStruct data)
		{
			this._data = data;
			this._reset_handlers();
		}
	} // class SimpleStruct_subscriber

	public class SimpleStruct_publisher : ISimpleStruct

	{
		ISimpleStruct t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			id = 0,
			name = 1
		}
		public SimpleStruct_publisher(ISimpleStruct t, IPublishableComposer composer, UInt64[] address)
		{
			this.t = t;
			this.composer = composer;
			this.address = address;
		}
		public Int64 id
		{
			get { return t.id; }
			set
			{
				t.id = value;
				composer.composeAddress(address, (UInt64)Address.id);
				composer.composeInteger("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public String name
		{
			get { return t.name; }
			set
			{
				t.name = value;
				composer.composeAddress(address, (UInt64)Address.name);
				composer.composeString("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(ISimpleStruct other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, ISimpleStruct val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, ISimpleStruct t)
		{
			composer.composeStructBegin();
			composer.composeInteger("id", t.id, true);
			composer.composeString("name", t.name, false);
			composer.composeStructEnd();
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(ISimpleStruct data) { this.t = data; }
	} // class SimpleStruct_publisher

	public interface ISimplePublisher : IEquivalenceComparable<ISimplePublisher>
	{
		ISimpleStruct data { get; set; }
	} // interface SimplePublisher

	public class SimplePublisher : ISimplePublisher, IEquatable<SimplePublisher>
	{
		SimpleStruct _data = new SimpleStruct();
		public ISimpleStruct data
		{
			get { return _data; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_data = (SimpleStruct)value;
			}
		}
		public SimplePublisher() { }
		public SimplePublisher(ISimpleStruct data)
		{
			this.data = data;
		}
		public override bool Equals(object obj)
		{
			return Equals(obj as SimplePublisher);
		}
		public static bool operator ==(SimplePublisher left, SimplePublisher right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(SimplePublisher left, SimplePublisher right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(SimplePublisher other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.data.Equals(other.data);
		}
		public bool isEquivalent(ISimplePublisher other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.data.isEquivalent(other.data);
		}
	} // class SimplePublisher

//**********************************************************************
// PUBLISHABLE SimplePublisher (1 parameters)
// 1. STRUCT SimpleStruct data
//**********************************************************************

	public class SimplePublisher_subscriber : ISimplePublisher, StateSubscriberBase
	{

		/////////////////////////////////  begin user override section /////////////////////////////////

		public virtual SimpleStruct_subscriber makeHandler_data(ISimpleStruct data) { return new SimpleStruct_subscriber(data); }
		public virtual void notifyFullyUpdated() { }
		public virtual void notifyUpdated() { }
		public virtual void notifyUpdated_data() { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected ISimplePublisher _data;
		enum Address
		{
			data = 0
		}
		public SimplePublisher_subscriber() { this._data = new SimplePublisher(); }
		SimpleStruct_subscriber data_handler;
		SimpleStruct_subscriber lazy_data_handler()
		{ // mb: lazy because can't call virtual 'makeHandler' in ctor
			if (data_handler == null)
				data_handler = makeHandler_data(this._data.data);
			return data_handler;
		}
		public ISimpleStruct data
		{
			get { return lazy_data_handler(); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(ISimplePublisher other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, ISimplePublisher data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static SimplePublisher parseForStateSync(IPublishableParser parser)
		{
			SimplePublisher data = new SimplePublisher();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, ISimplePublisher data)
		{
			parser.parseStructBegin();
			SimpleStruct_subscriber.parseForStateSync(parser, "data", data.data);
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, SimplePublisher_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			parser.parseStructBegin();
			bool changed = false;
			{
				bool currentChanged = SimpleStruct_subscriber.parse(parser, "data", subscriber.lazy_data_handler());
				if(currentChanged)
				{
						changed = true;
						subscriber.notifyUpdated_data();
				}
			}
			parser.parseStructEnd();
			return changed;
		}
		public static bool parse(IPublishableParser parser, SimplePublisher_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			switch ((Address)addr[offset])
			{
				case Address.data:
				{
					bool currentChanged = false;
					if(addr.Length == offset + 1) // full element replace
						currentChanged = SimpleStruct_subscriber.parse(parser, "value", subscriber.lazy_data_handler());
					else if(addr.Length > offset + 1) // let child continue parsing
						currentChanged = SimpleStruct_subscriber.parse(parser, subscriber.lazy_data_handler(), addr, offset + 1);
					else
						throw new Exception();

					if(currentChanged)
					{
						changed = true;
						subscriber.notifyUpdated_data();
					}
					break;
				}
				default:
					throw new Exception();
			}
			return changed;
		}
		public String stateSubscriberName() { return "SimplePublisher"; }
		public UInt64 stateTypeID() { return 1; }
		public void applyMessageWithUpdates(IPublishableParser parser)
		{
			parser.parseStateUpdateMessageBegin();
			UInt64[] addr = null;
			bool changed = false;
			while(parser.parseAddress(ref addr))
			{
				changed = SimplePublisher_subscriber.parse(parser, this, addr, 0) | changed;
				parser.parseAddressEnd();
				addr = null;
			}
			parser.parseStateUpdateMessageEnd();
			if(changed)
				this.notifyUpdated();
		}
		public void applyStateSyncMessage(IPublishableParser parser)
		{
			SimplePublisher val = SimplePublisher_subscriber.parseForStateSync(parser);
			this._data = val;
			this._reset_handlers();
			this.notifyFullyUpdated();
		}
		public void _reset_handlers()
		{
			this.data_handler = null;
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(ISimplePublisher data)
		{
			this._data = data;
			this._reset_handlers();
		}
	} // class SimplePublisher_subscriber

	public class SimplePublisher_publisher : ISimplePublisher, StatePublisherBase

	{
		ISimplePublisher t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			data = 0
		}
		public SimplePublisher_publisher()
		{
			this.t = new SimplePublisher();
			this.composer = null;
			this.address = new UInt64[] { };
		}
		public ISimpleStruct data
		{
			get { return new SimpleStruct_publisher(t.data, composer, Publishable.makeAddress(address, (UInt64)Address.data)); }
			set
			{
				t.data = value;
				composer.composeAddress(address, (UInt64)Address.data);
				SimpleStruct_publisher.compose(composer, "value", value, false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(ISimplePublisher other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, ISimplePublisher val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, ISimplePublisher t)
		{
			composer.composeStructBegin();
			SimpleStruct_publisher.compose(composer, "data", t.data, false);
			composer.composeStructEnd();
		}
		public int idx { get; set; } // for use in pools, etc
		public String statePublisherName() { return "SimplePublisher"; }
		public UInt64 stateTypeID() { return 1; }
		public void generateStateSyncMessage(IPublishableComposer composer)
		{
			SimplePublisher_publisher.compose(composer, this.t);
		}
		public void startTick(IPublishableComposer composer)
		{
			this.composer = composer;
			composer.composeStateUpdateMessageBegin();
		}
		public IPublishableComposer endTick()
		{
			composer.composeStateUpdateMessageEnd();
			IPublishableComposer tmp = composer;
			this.composer = null;
			return tmp;
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(ISimplePublisher data) { this.t = data; }
	} // class SimplePublisher_publisher

	public class SimplePublisher_concentrator : SimplePublisher_subscriber, StateConcentratorBase
	{
		public static void compose(IPublishableComposer composer, String name, ISimplePublisher val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, ISimplePublisher t)
		{
			composer.composeStructBegin();
			SimpleStruct_publisher.compose(composer, "data", t.data, false);
			composer.composeStructEnd();
		}
		public void generateStateSyncMessage(IPublishableComposer composer)
		{
			SimplePublisher_publisher.compose(composer, this._data);
		}
	} // class SimplePublisher_concentrator

	public interface Ipublishable_dunion : IEquivalenceComparable<Ipublishable_dunion>
	{
		String name { get; set; }
		Idu_one anUnion { get; set; }
	} // interface publishable_dunion

	public class publishable_dunion : Ipublishable_dunion, IEquatable<publishable_dunion>
	{
		String _name = String.Empty;
		public String name
		{
			get { return _name; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_name = value;
			}
		}
		du_one _anUnion = new du_one();
		public Idu_one anUnion
		{
			get { return _anUnion; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_anUnion = (du_one)value;
			}
		}
		public publishable_dunion() { }
		public publishable_dunion(String name, Idu_one anUnion)
		{
			this.name = name;
			this.anUnion = anUnion;
		}
		public override bool Equals(object obj)
		{
			return Equals(obj as publishable_dunion);
		}
		public static bool operator ==(publishable_dunion left, publishable_dunion right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(publishable_dunion left, publishable_dunion right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(publishable_dunion other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.name == other.name &&
					this.anUnion.Equals(other.anUnion);
		}
		public bool isEquivalent(Ipublishable_dunion other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.name == other.name &&
					this.anUnion.isEquivalent(other.anUnion);
		}
	} // class publishable_dunion

//**********************************************************************
// PUBLISHABLE publishable_dunion (2 parameters)
// 1. CHARACTER_STRING name
// 2. DISCRIMINATED_UNION anUnion
//**********************************************************************

	public class publishable_dunion_subscriber : Ipublishable_dunion, StateSubscriberBase
	{

		/////////////////////////////////  begin user override section /////////////////////////////////

		public virtual du_one_subscriber makeHandler_anUnion(Idu_one data) { return new du_one_subscriber(data); }
		public virtual void notifyFullyUpdated() { }
		public virtual void notifyUpdated() { }
		public virtual void notifyUpdated_name(String old) { }
		public virtual void notifyUpdated_anUnion() { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected Ipublishable_dunion _data;
		enum Address
		{
			name = 0,
			anUnion = 1
		}
		public publishable_dunion_subscriber() { this._data = new publishable_dunion(); }
		public String name
		{
			get { return this._data.name; }
			set { throw new InvalidOperationException(); }
		}
		bool update_name(IPublishableParser parser, String name)
		{
			String newVal = parser.parseString(name);
			if (newVal != this._data.name)
			{
				String oldVal = this._data.name;
				this._data.name = newVal;
				notifyUpdated_name(oldVal);
				return true;
			}
			else
				return false;
		}
		du_one_subscriber anUnion_handler;
		du_one_subscriber lazy_anUnion_handler()
		{ // mb: lazy because can't call virtual 'makeHandler' in ctor
			if (anUnion_handler == null)
				anUnion_handler = makeHandler_anUnion(this._data.anUnion);
			return anUnion_handler;
		}
		public Idu_one anUnion
		{
			get { return lazy_anUnion_handler(); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(Ipublishable_dunion other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, Ipublishable_dunion data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static publishable_dunion parseForStateSync(IPublishableParser parser)
		{
			publishable_dunion data = new publishable_dunion();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, Ipublishable_dunion data)
		{
			parser.parseStructBegin();
			data.name = parser.parseString("name");
			du_one_subscriber.parseForStateSync(parser, "anUnion", data.anUnion);
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, publishable_dunion_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			parser.parseStructBegin();
			bool changed = false;
			changed = subscriber.update_name(parser, "name") | changed;
			{
				bool currentChanged = du_one_subscriber.parse(parser, "anUnion", subscriber.lazy_anUnion_handler());
				if(currentChanged)
				{
						changed = true;
						subscriber.notifyUpdated_anUnion();
				}
			}
			parser.parseStructEnd();
			return changed;
		}
		public static bool parse(IPublishableParser parser, publishable_dunion_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			switch ((Address)addr[offset])
			{
				case Address.name:
				{
					if(addr.Length != offset + 1)
						throw new Exception();
					changed = subscriber.update_name(parser, "value") | changed;
					break;
				}
				case Address.anUnion:
				{
					bool currentChanged = false;
					if(addr.Length == offset + 1) // full element replace
						currentChanged = du_one_subscriber.parse(parser, "value", subscriber.lazy_anUnion_handler());
					else if(addr.Length > offset + 1) // let child continue parsing
						currentChanged = du_one_subscriber.parse(parser, subscriber.lazy_anUnion_handler(), addr, offset + 1);
					else
						throw new Exception();

					if(currentChanged)
					{
						changed = true;
						subscriber.notifyUpdated_anUnion();
					}
					break;
				}
				default:
					throw new Exception();
			}
			return changed;
		}
		public String stateSubscriberName() { return "publishable_dunion"; }
		public UInt64 stateTypeID() { return 8; }
		public void applyMessageWithUpdates(IPublishableParser parser)
		{
			parser.parseStateUpdateMessageBegin();
			UInt64[] addr = null;
			bool changed = false;
			while(parser.parseAddress(ref addr))
			{
				changed = publishable_dunion_subscriber.parse(parser, this, addr, 0) | changed;
				parser.parseAddressEnd();
				addr = null;
			}
			parser.parseStateUpdateMessageEnd();
			if(changed)
				this.notifyUpdated();
		}
		public void applyStateSyncMessage(IPublishableParser parser)
		{
			publishable_dunion val = publishable_dunion_subscriber.parseForStateSync(parser);
			this._data = val;
			this._reset_handlers();
			this.notifyFullyUpdated();
		}
		public void _reset_handlers()
		{
			this.anUnion_handler = null;
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(Ipublishable_dunion data)
		{
			this._data = data;
			this._reset_handlers();
		}
	} // class publishable_dunion_subscriber

	public class publishable_dunion_publisher : Ipublishable_dunion, StatePublisherBase

	{
		Ipublishable_dunion t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			name = 0,
			anUnion = 1
		}
		public publishable_dunion_publisher()
		{
			this.t = new publishable_dunion();
			this.composer = null;
			this.address = new UInt64[] { };
		}
		public String name
		{
			get { return t.name; }
			set
			{
				t.name = value;
				composer.composeAddress(address, (UInt64)Address.name);
				composer.composeString("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public Idu_one anUnion
		{
			get { return new du_one_publisher(t.anUnion, composer, Publishable.makeAddress(address, (UInt64)Address.anUnion)); }
			set
			{
				t.anUnion = value;
				composer.composeAddress(address, (UInt64)Address.anUnion);
				du_one_publisher.compose(composer, "value", value, false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(Ipublishable_dunion other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, Ipublishable_dunion val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, Ipublishable_dunion t)
		{
			composer.composeStructBegin();
			composer.composeString("name", t.name, true);
			du_one_publisher.compose(composer, "anUnion", t.anUnion, false);
			composer.composeStructEnd();
		}
		public int idx { get; set; } // for use in pools, etc
		public String statePublisherName() { return "publishable_dunion"; }
		public UInt64 stateTypeID() { return 8; }
		public void generateStateSyncMessage(IPublishableComposer composer)
		{
			publishable_dunion_publisher.compose(composer, this.t);
		}
		public void startTick(IPublishableComposer composer)
		{
			this.composer = composer;
			composer.composeStateUpdateMessageBegin();
		}
		public IPublishableComposer endTick()
		{
			composer.composeStateUpdateMessageEnd();
			IPublishableComposer tmp = composer;
			this.composer = null;
			return tmp;
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(Ipublishable_dunion data) { this.t = data; }
	} // class publishable_dunion_publisher

	public class publishable_dunion_concentrator : publishable_dunion_subscriber, StateConcentratorBase
	{
		public static void compose(IPublishableComposer composer, String name, Ipublishable_dunion val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, Ipublishable_dunion t)
		{
			composer.composeStructBegin();
			composer.composeString("name", t.name, true);
			du_one_publisher.compose(composer, "anUnion", t.anUnion, false);
			composer.composeStructEnd();
		}
		public void generateStateSyncMessage(IPublishableComposer composer)
		{
			publishable_dunion_publisher.compose(composer, this._data);
		}
	} // class publishable_dunion_concentrator

	public interface Ipublishable_dictionary : IEquivalenceComparable<Ipublishable_dictionary>
	{
		String name { get; set; }
		Istruct_dictionary data { get; set; }
	} // interface publishable_dictionary

	public class publishable_dictionary : Ipublishable_dictionary, IEquatable<publishable_dictionary>
	{
		String _name = String.Empty;
		public String name
		{
			get { return _name; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_name = value;
			}
		}
		struct_dictionary _data = new struct_dictionary();
		public Istruct_dictionary data
		{
			get { return _data; }
			set
			{
				if(value == null)
					throw new ArgumentNullException();
				_data = (struct_dictionary)value;
			}
		}
		public publishable_dictionary() { }
		public publishable_dictionary(String name, Istruct_dictionary data)
		{
			this.name = name;
			this.data = data;
		}
		public override bool Equals(object obj)
		{
			return Equals(obj as publishable_dictionary);
		}
		public static bool operator ==(publishable_dictionary left, publishable_dictionary right)
		{
			if (ReferenceEquals(left, right))
				return true;
			else if (ReferenceEquals(left, null))
				return false;
			else if (ReferenceEquals(null, right))
				return false;
			else
				return left.Equals(right);
		}
		public static bool operator !=(publishable_dictionary left, publishable_dictionary right)
		{
			return !(left == right);
		}
		public override int GetHashCode()
		{
			// TODO
			throw new InvalidOperationException();
		}
		public bool Equals(publishable_dictionary other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.name == other.name &&
					this.data.Equals(other.data);
		}
		public bool isEquivalent(Ipublishable_dictionary other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return
					this.name == other.name &&
					this.data.isEquivalent(other.data);
		}
	} // class publishable_dictionary

//**********************************************************************
// PUBLISHABLE publishable_dictionary (2 parameters)
// 1. CHARACTER_STRING name
// 2. STRUCT struct_dictionary data
//**********************************************************************

	public class publishable_dictionary_subscriber : Ipublishable_dictionary, StateSubscriberBase
	{

		/////////////////////////////////  begin user override section /////////////////////////////////

		public virtual struct_dictionary_subscriber makeHandler_data(Istruct_dictionary data) { return new struct_dictionary_subscriber(data); }
		public virtual void notifyFullyUpdated() { }
		public virtual void notifyUpdated() { }
		public virtual void notifyUpdated_name(String old) { }
		public virtual void notifyUpdated_data() { }

		/////////////////////////////////   end user override section  /////////////////////////////////


		protected Ipublishable_dictionary _data;
		enum Address
		{
			name = 0,
			data = 1
		}
		public publishable_dictionary_subscriber() { this._data = new publishable_dictionary(); }
		public String name
		{
			get { return this._data.name; }
			set { throw new InvalidOperationException(); }
		}
		bool update_name(IPublishableParser parser, String name)
		{
			String newVal = parser.parseString(name);
			if (newVal != this._data.name)
			{
				String oldVal = this._data.name;
				this._data.name = newVal;
				notifyUpdated_name(oldVal);
				return true;
			}
			else
				return false;
		}
		struct_dictionary_subscriber data_handler;
		struct_dictionary_subscriber lazy_data_handler()
		{ // mb: lazy because can't call virtual 'makeHandler' in ctor
			if (data_handler == null)
				data_handler = makeHandler_data(this._data.data);
			return data_handler;
		}
		public Istruct_dictionary data
		{
			get { return lazy_data_handler(); }
			set { throw new InvalidOperationException(); }
		}
		public bool isEquivalent(Ipublishable_dictionary other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return _data.isEquivalent(other);
		}
		public static void parseForStateSync(IPublishableParser parser, String expectedName, Ipublishable_dictionary data)
		{
			parser.parseKey(expectedName);
			parseForStateSync(parser, data);
		}
		public static publishable_dictionary parseForStateSync(IPublishableParser parser)
		{
			publishable_dictionary data = new publishable_dictionary();
			parseForStateSync(parser, data);
			return data;
		}
		static void parseForStateSync(IPublishableParser parser, Ipublishable_dictionary data)
		{
			parser.parseStructBegin();
			data.name = parser.parseString("name");
			struct_dictionary_subscriber.parseForStateSync(parser, "data", data.data);
			parser.parseStructEnd();
		}
		public static bool parse(IPublishableParser parser, String expectedName, publishable_dictionary_subscriber subscriber)
		{
			parser.parseKey(expectedName);
			parser.parseStructBegin();
			bool changed = false;
			changed = subscriber.update_name(parser, "name") | changed;
			{
				bool currentChanged = struct_dictionary_subscriber.parse(parser, "data", subscriber.lazy_data_handler());
				if(currentChanged)
				{
						changed = true;
						subscriber.notifyUpdated_data();
				}
			}
			parser.parseStructEnd();
			return changed;
		}
		public static bool parse(IPublishableParser parser, publishable_dictionary_subscriber subscriber, UInt64[] addr, int offset)
		{
			bool changed = false;
			switch ((Address)addr[offset])
			{
				case Address.name:
				{
					if(addr.Length != offset + 1)
						throw new Exception();
					changed = subscriber.update_name(parser, "value") | changed;
					break;
				}
				case Address.data:
				{
					bool currentChanged = false;
					if(addr.Length == offset + 1) // full element replace
						currentChanged = struct_dictionary_subscriber.parse(parser, "value", subscriber.lazy_data_handler());
					else if(addr.Length > offset + 1) // let child continue parsing
						currentChanged = struct_dictionary_subscriber.parse(parser, subscriber.lazy_data_handler(), addr, offset + 1);
					else
						throw new Exception();

					if(currentChanged)
					{
						changed = true;
						subscriber.notifyUpdated_data();
					}
					break;
				}
				default:
					throw new Exception();
			}
			return changed;
		}
		public String stateSubscriberName() { return "publishable_dictionary"; }
		public UInt64 stateTypeID() { return 9; }
		public void applyMessageWithUpdates(IPublishableParser parser)
		{
			parser.parseStateUpdateMessageBegin();
			UInt64[] addr = null;
			bool changed = false;
			while(parser.parseAddress(ref addr))
			{
				changed = publishable_dictionary_subscriber.parse(parser, this, addr, 0) | changed;
				parser.parseAddressEnd();
				addr = null;
			}
			parser.parseStateUpdateMessageEnd();
			if(changed)
				this.notifyUpdated();
		}
		public void applyStateSyncMessage(IPublishableParser parser)
		{
			publishable_dictionary val = publishable_dictionary_subscriber.parseForStateSync(parser);
			this._data = val;
			this._reset_handlers();
			this.notifyFullyUpdated();
		}
		public void _reset_handlers()
		{
			this.data_handler = null;
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(Ipublishable_dictionary data)
		{
			this._data = data;
			this._reset_handlers();
		}
	} // class publishable_dictionary_subscriber

	public class publishable_dictionary_publisher : Ipublishable_dictionary, StatePublisherBase

	{
		Ipublishable_dictionary t;
		IPublishableComposer composer;
		UInt64[] address;
		enum Address
		{
			name = 0,
			data = 1
		}
		public publishable_dictionary_publisher()
		{
			this.t = new publishable_dictionary();
			this.composer = null;
			this.address = new UInt64[] { };
		}
		public String name
		{
			get { return t.name; }
			set
			{
				t.name = value;
				composer.composeAddress(address, (UInt64)Address.name);
				composer.composeString("value", value, false);
				composer.composeAddressEnd();
			}
		}
		public Istruct_dictionary data
		{
			get { return new struct_dictionary_publisher(t.data, composer, Publishable.makeAddress(address, (UInt64)Address.data)); }
			set
			{
				t.data = value;
				composer.composeAddress(address, (UInt64)Address.data);
				struct_dictionary_publisher.compose(composer, "value", value, false);
				composer.composeAddressEnd();
			}
		}
		public bool isEquivalent(Ipublishable_dictionary other)
		{
			if (ReferenceEquals(other, null))
				return false;
			else if (ReferenceEquals(this, other))
				return true;
			else
				return t.isEquivalent(other);
		}
		public static void compose(IPublishableComposer composer, String name, Ipublishable_dictionary val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, Ipublishable_dictionary t)
		{
			composer.composeStructBegin();
			composer.composeString("name", t.name, true);
			struct_dictionary_publisher.compose(composer, "data", t.data, false);
			composer.composeStructEnd();
		}
		public int idx { get; set; } // for use in pools, etc
		public String statePublisherName() { return "publishable_dictionary"; }
		public UInt64 stateTypeID() { return 9; }
		public void generateStateSyncMessage(IPublishableComposer composer)
		{
			publishable_dictionary_publisher.compose(composer, this.t);
		}
		public void startTick(IPublishableComposer composer)
		{
			this.composer = composer;
			composer.composeStateUpdateMessageBegin();
		}
		public IPublishableComposer endTick()
		{
			composer.composeStateUpdateMessageEnd();
			IPublishableComposer tmp = composer;
			this.composer = null;
			return tmp;
		}
		/// <summary>This method is for testing and debugging only. Do not use!</summary>
		public void debugOnlySetData(Ipublishable_dictionary data) { this.t = data; }
	} // class publishable_dictionary_publisher

	public class publishable_dictionary_concentrator : publishable_dictionary_subscriber, StateConcentratorBase
	{
		public static void compose(IPublishableComposer composer, String name, Ipublishable_dictionary val, bool separator)
		{
			composer.composeKey(name);
			compose(composer, val);
			composer.addSeparator(separator);
		}
		public static void compose(IPublishableComposer composer, Ipublishable_dictionary t)
		{
			composer.composeStructBegin();
			composer.composeString("name", t.name, true);
			struct_dictionary_publisher.compose(composer, "data", t.data, false);
			composer.composeStructEnd();
		}
		public void generateStateSyncMessage(IPublishableComposer composer)
		{
			publishable_dictionary_publisher.compose(composer, this._data);
		}
	} // class publishable_dictionary_concentrator

	public class StateConcentratorFactory : IStateConcentratorFactory
	{
		public StateConcentratorBase createConcentrator(UInt64 typeID)
		{
			switch(typeID)
			{
			case 1:
				return new SimplePublisher_concentrator();
			case 8:
				return new publishable_dunion_concentrator();
			case 9:
				return new publishable_dictionary_concentrator();
			default:
				return null;
			}
		}
	} // class StateConcentratorFactory


} // namespace mtest

