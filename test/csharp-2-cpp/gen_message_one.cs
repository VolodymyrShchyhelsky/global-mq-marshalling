//////////////////////////////////////////////////////////////
//
//  Do not edit! file automatically generated by idl_compiler
//
//////////////////////////////////////////////////////////////

using globalmq.marshalling;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace mtest
{


//**********************************************************************
// STRUCT "point3D" Targets: JSON GMQ (3 parameters)
//  1. INTEGER x (REQUIRED)
//  2. INTEGER y (REQUIRED)
//  3. INTEGER z (REQUIRED)
//**********************************************************************

public class point3D : IEquatable<point3D>
{
	public Int64 x;
	public Int64 y;
	public Int64 z;

	public override bool Equals(object obj)
	{
		return obj is point3D d && Equals(d);
	}
	public static bool operator ==(point3D left, point3D right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(point3D left, point3D right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(point3D other)
	{
		return
			this.x == other.x &&
			this.y == other.y &&
			this.z == other.z;
	}
	public static void compose(ComposerBase composer, Int64 x, Int64 y, Int64 z)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, x, y, z);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, x, y, z);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( ",\n  " );
		composer.addNamePart("z");
		composer.composeSignedInteger(z);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
		composer.composeSignedInteger(z);
	}
	public static point3D parse(ParserBase parser)
	{
		point3D tmp = new point3D();
		parse(parser,
			x: ref tmp.x,
			y: ref tmp.y,
			z: ref tmp.z
		);
		return tmp;
	}
	private static void parse(ParserBase parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref x, ref y, ref z);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref x, ref y, ref z);
		else
			throw new ArgumentException();
	}
	private static void parse(JsonParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
				parser.parseSignedInteger(out x);
			else if ( key == "y" )
				parser.parseSignedInteger(out y);
			else if ( key == "z" )
				parser.parseSignedInteger(out z);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	private static void parse(GmqParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		parser.parseSignedInteger(out x);
		parser.parseSignedInteger(out y);
		parser.parseSignedInteger(out z);
	}
} // class point3D

//**********************************************************************
// STRUCT "point" NONEXTENDABLE Targets: JSON GMQ (2 parameters)
//  1. INTEGER x (REQUIRED)
//  2. INTEGER y (REQUIRED)
//**********************************************************************

public class point : IEquatable<point>
{
	public Int64 x;
	public Int64 y;

	public override bool Equals(object obj)
	{
		return obj is point d && Equals(d);
	}
	public static bool operator ==(point left, point right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(point left, point right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(point other)
	{
		return
			this.x == other.x &&
			this.y == other.y;
	}
	public static void compose(ComposerBase composer, Int64 x, Int64 y)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, x, y);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, x, y);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 x, Int64 y)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
	}
	public static point parse(ParserBase parser)
	{
		point tmp = new point();
		parse(parser,
			x: ref tmp.x,
			y: ref tmp.y
		);
		return tmp;
	}
	private static void parse(ParserBase parser, ref Int64 x, ref Int64 y)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref x, ref y);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref x, ref y);
		else
			throw new ArgumentException();
	}
	private static void parse(JsonParser parser, ref Int64 x, ref Int64 y)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
				parser.parseSignedInteger(out x);
			else if ( key == "y" )
				parser.parseSignedInteger(out y);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	private static void parse(GmqParser parser, ref Int64 x, ref Int64 y)
	{
		parser.parseSignedInteger(out x);
		parser.parseSignedInteger(out y);
	}
} // class point

//**********************************************************************
// STRUCT "message_one" Targets: JSON GMQ (10 parameters)
//  1. INTEGER firstParam (REQUIRED)
//  2. VECTOR<INTEGER> secondParam (REQUIRED)
//  3. VECTOR< STRUCT point3D> thirdParam (REQUIRED)
//  4. UINTEGER forthParam (REQUIRED)
//  5. CHARACTER_STRING fifthParam (REQUIRED)
//  6. VECTOR<NONEXTENDABLE STRUCT point> sixthParam (REQUIRED)
//  7. REAL seventhParam (REQUIRED)
//  8. STRUCT NONEXTENDABLE point eighthParam (REQUIRED)
//  9. STRUCT point3D ninethParam (REQUIRED)
//  10. VECTOR<REAL> tenthParam (REQUIRED)
//**********************************************************************

public class message_one : IEquatable<message_one>
{
	public Int64 firstParam;
	public IList<Int64> secondParam;
	public IList<point3D> thirdParam;
	public UInt64 forthParam;
	public String fifthParam;
	public IList<point> sixthParam;
	public Double seventhParam;
	public point eighthParam;
	public point3D ninethParam;
	public IList<Double> tenthParam;

	public override bool Equals(object obj)
	{
		return obj is message_one d && Equals(d);
	}
	public static bool operator ==(message_one left, message_one right)
	{
		return left.Equals(right);
	}
	public static bool operator !=(message_one left, message_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(message_one other)
	{
		return
			this.firstParam == other.firstParam &&
			Enumerable.SequenceEqual(this.secondParam, other.secondParam) &&
			Enumerable.SequenceEqual(this.thirdParam, other.thirdParam) &&
			this.forthParam == other.forthParam &&
			this.fifthParam == other.fifthParam &&
			Enumerable.SequenceEqual(this.sixthParam, other.sixthParam) &&
			this.seventhParam == other.seventhParam &&
			this.eighthParam.Equals(other.eighthParam) &&
			this.ninethParam.Equals(other.ninethParam) &&
			Enumerable.SequenceEqual(this.tenthParam, other.tenthParam);
	}
	public static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		if (composer is GmqComposer gmqC)
			compose(gmqC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		else if (composer is JsonComposer jsonC)
			compose(jsonC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		else
			throw new ArgumentException();
	}
	public static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		composer.append( "{\n  ");
		composer.addNamePart("firstParam");
		composer.composeSignedInteger(firstParam);
		composer.append( ",\n  " );
		composer.addNamePart("secondParam");
		secondParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("thirdParam");
		thirdParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("forthParam");
		composer.composeUnsignedInteger(forthParam);
		composer.append( ",\n  " );
		composer.addNamePart("fifthParam");
		composer.composeString(fifthParam);
		composer.append( ",\n  " );
		composer.addNamePart("sixthParam");
		sixthParam.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("seventhParam");
		composer.composeReal(seventhParam);
		composer.append( ",\n  " );
		composer.addNamePart("eighthParam");
		eighthParam.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("ninethParam");
		ninethParam.compose(composer);
		composer.append( ",\n  " );
		composer.addNamePart("tenthParam");
		tenthParam.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		composer.composeSignedInteger(firstParam);
		secondParam.composeGmq(composer);
		thirdParam.composeGmq(composer);
		composer.composeUnsignedInteger(forthParam);
		composer.composeString(fifthParam);
		sixthParam.composeGmq(composer);
		composer.composeReal(seventhParam);
		eighthParam.compose(composer);
		ninethParam.compose(composer);
		tenthParam.composeGmq(composer);
	}
	public static message_one parse(ParserBase parser)
	{
		message_one tmp = new message_one();
		parse(parser,
			firstParam: ref tmp.firstParam,
			secondParam: new CollectionWrapperForParsing(
				() => { tmp.secondParam = new List<Int64>(); },
				(ParserBase parser, int ordinal) => { Int64 val; parser.parseSignedInteger(out val); tmp.secondParam.Add(val); }),
			thirdParam: new CollectionWrapperForParsing(
				() => { tmp.thirdParam = new List<point3D>(); },
				(ParserBase parser, int ordinal) => { point3D val = point3D.parse(parser); tmp.thirdParam.Add(val); }),
			forthParam: ref tmp.forthParam,
			fifthParam: ref tmp.fifthParam,
			sixthParam: new CollectionWrapperForParsing(
				() => { tmp.sixthParam = new List<point>(); },
				(ParserBase parser, int ordinal) => { point val = point.parse(parser); tmp.sixthParam.Add(val); }),
			seventhParam: ref tmp.seventhParam,
			eighthParam: new MessageWrapperForParsing(
				(ParserBase parser) => { point.parse(parser, out tmp.eighthParam); }),
			ninethParam: new MessageWrapperForParsing(
				(ParserBase parser) => { point3D.parse(parser, out tmp.ninethParam); }),
			tenthParam: new CollectionWrapperForParsing(
				() => { tmp.tenthParam = new List<Double>(); },
				(ParserBase parser, int ordinal) => { Double val; parser.parseReal(out val); tmp.tenthParam.Add(val); })
		);
		return tmp;
	}
	private static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		if (parser is GmqParser gmqP)
			parse(gmqP, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
		else if (parser is JsonParser jsonP)
			parse(jsonP, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
		else
			throw new ArgumentException();
	}
	private static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "firstParam" )
				parser.parseSignedInteger(out firstParam);
			else if ( key == "secondParam" )
				secondParam.parseJson(parser);
			else if ( key == "thirdParam" )
				thirdParam.parseJson(parser);
			else if ( key == "forthParam" )
				parser.parseUnsignedInteger(out forthParam);
			else if ( key == "fifthParam" )
				parser.parseString(out fifthParam);
			else if ( key == "sixthParam" )
				sixthParam.parseJson(parser);
			else if ( key == "seventhParam" )
				parser.parseReal(out seventhParam);
			else if ( key == "eighthParam" )
				eighthParam.parse(parser);
			else if ( key == "ninethParam" )
				ninethParam.parse(parser);
			else if ( key == "tenthParam" )
				tenthParam.parseJson(parser);

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	private static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		parser.parseSignedInteger(out firstParam);
		secondParam.parseGmq(parser);
		thirdParam.parseGmq(parser);
		parser.parseUnsignedInteger(out forthParam);
		parser.parseString(out fifthParam);
		sixthParam.parseGmq(parser);
		parser.parseReal(out seventhParam);
		eighthParam.parse(parser);
		ninethParam.parse(parser);
		tenthParam.parseGmq(parser);
	}
} // class message_one

//////////////////////////////////////////////////////////////
//
//  Scopes:
//
//  test_gmq
//  {
//    point3D_alias
//    message_one_gmq
//  }
//
//  test_json
//  {
//    point_alias
//    message_one_json
//  }
//
//////////////////////////////////////////////////////////////

public class test_gmq
{
	public static void handleMessage( BufferT buffer, MessageHandlerArray handlers )
	{
		ReadIteratorT riter = buffer.getReadIterator();
		handleMessage(riter, handlers);
	}
	public static void handleMessage( ReadIteratorT riter, MessageHandlerArray handlers )
	{
		GmqParser parser = new GmqParser( riter );
		handlers.handleGmq(parser);
	}

//**********************************************************************
// MESSAGE "point3D_alias" Targets: GMQ (0 parameters)
//**********************************************************************

public class point3D_alias : point3D
{
public static UInt64 MsgId = 1;
	public new static void compose(ComposerBase composer, Int64 x, Int64 y, Int64 z)
	{
		point3D.compose(composer, x, y, z);
	}
	public new static void parse(ParserBase parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		point3D.parse(parser, ref x, ref y, ref z);
	}
	public new static void compose(GmqComposer composer, Int64 x, Int64 y, Int64 z)
	{
		point3D.compose(composer, x, y, z);
	}
	public new static void parse(GmqParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		point3D.parse(parser, ref x, ref y, ref z);
	}
	public new static void compose(JsonComposer composer, Int64 x, Int64 y, Int64 z)
	{
		point3D.compose(composer, x, y, z);
	}
	public new static void parse(JsonParser parser, ref Int64 x, ref Int64 y, ref Int64 z)
	{
		point3D.parse(parser, ref x, ref y, ref z);
	}
	public static void composeMessage(ComposerBase composer, Int64 x, Int64 y, Int64 z)
	{
		if (composer is GmqComposer gmqC)
		{
			gmqC.composeUnsignedInteger(MsgId);
			compose(gmqC, x, y, z);
		}
		else if (composer is JsonComposer jsonC)
		{
			jsonC.append("{\n  ");
			jsonC.addNamePart("msgid");
			jsonC.composeUnsignedInteger(MsgId);
			jsonC.append(",\n  ");
			jsonC.addNamePart("msgbody");
			compose(jsonC, x, y, z);
			jsonC.append("\n}");
		}
		else
			throw new ArgumentException();
	}
} // class point3D_alias

//**********************************************************************
// MESSAGE "message_one_gmq" Targets: GMQ (0 parameters)
//**********************************************************************

public class message_one_gmq : message_one
{
public static UInt64 MsgId = 1;
	public new static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		message_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		message_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		message_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		message_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		message_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		message_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public static void composeMessage(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		if (composer is GmqComposer gmqC)
		{
			gmqC.composeUnsignedInteger(MsgId);
			compose(gmqC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		}
		else if (composer is JsonComposer jsonC)
		{
			jsonC.append("{\n  ");
			jsonC.addNamePart("msgid");
			jsonC.composeUnsignedInteger(MsgId);
			jsonC.append(",\n  ");
			jsonC.addNamePart("msgbody");
			compose(jsonC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
			jsonC.append("\n}");
		}
		else
			throw new ArgumentException();
	}
} // class message_one_gmq

} // class test_gmq

public class test_json
{
	public static void handleMessage( BufferT buffer, MessageHandlerArray handlers )
	{
		ReadIteratorT riter = buffer.getReadIterator();
		handleMessage(riter, handlers);
	}
	public static void handleMessage( ReadIteratorT riter, MessageHandlerArray handlers )
	{
		JsonParser parser = new JsonParser( riter );
		handlers.handleJson(parser);
	}

//**********************************************************************
// MESSAGE "point_alias" Targets: JSON (0 parameters)
//**********************************************************************

public class point_alias : point
{
public static UInt64 MsgId = 2;
	public new static void compose(ComposerBase composer, Int64 x, Int64 y)
	{
		point.compose(composer, x, y);
	}
	public new static void parse(ParserBase parser, ref Int64 x, ref Int64 y)
	{
		point.parse(parser, ref x, ref y);
	}
	public new static void compose(GmqComposer composer, Int64 x, Int64 y)
	{
		point.compose(composer, x, y);
	}
	public new static void parse(GmqParser parser, ref Int64 x, ref Int64 y)
	{
		point.parse(parser, ref x, ref y);
	}
	public new static void compose(JsonComposer composer, Int64 x, Int64 y)
	{
		point.compose(composer, x, y);
	}
	public new static void parse(JsonParser parser, ref Int64 x, ref Int64 y)
	{
		point.parse(parser, ref x, ref y);
	}
	public static void composeMessage(ComposerBase composer, Int64 x, Int64 y)
	{
		if (composer is GmqComposer gmqC)
		{
			gmqC.composeUnsignedInteger(MsgId);
			compose(gmqC, x, y);
		}
		else if (composer is JsonComposer jsonC)
		{
			jsonC.append("{\n  ");
			jsonC.addNamePart("msgid");
			jsonC.composeUnsignedInteger(MsgId);
			jsonC.append(",\n  ");
			jsonC.addNamePart("msgbody");
			compose(jsonC, x, y);
			jsonC.append("\n}");
		}
		else
			throw new ArgumentException();
	}
} // class point_alias

//**********************************************************************
// MESSAGE "message_one_json" Targets: JSON (0 parameters)
//**********************************************************************

public class message_one_json : message_one
{
public static UInt64 MsgId = 2;
	public new static void compose(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		message_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void parse(ParserBase parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		message_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(GmqComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		message_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void parse(GmqParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		message_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void compose(JsonComposer composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		message_one.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public new static void parse(JsonParser parser, ref Int64 firstParam, ICollectionParse secondParam, ICollectionParse thirdParam, ref UInt64 forthParam, ref String fifthParam, ICollectionParse sixthParam, ref Double seventhParam, IMessageParse eighthParam, IMessageParse ninethParam, ICollectionParse tenthParam)
	{
		message_one.parse(parser, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
	}
	public static void composeMessage(ComposerBase composer, Int64 firstParam, ICollectionCompose secondParam, ICollectionCompose thirdParam, UInt64 forthParam, String fifthParam, ICollectionCompose sixthParam, Double seventhParam, IMessageCompose eighthParam, IMessageCompose ninethParam, ICollectionCompose tenthParam)
	{
		if (composer is GmqComposer gmqC)
		{
			gmqC.composeUnsignedInteger(MsgId);
			compose(gmqC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		}
		else if (composer is JsonComposer jsonC)
		{
			jsonC.append("{\n  ");
			jsonC.addNamePart("msgid");
			jsonC.composeUnsignedInteger(MsgId);
			jsonC.append(",\n  ");
			jsonC.addNamePart("msgbody");
			compose(jsonC, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
			jsonC.append("\n}");
		}
		else
			throw new ArgumentException();
	}
} // class message_one_json

} // class test_json


} // namespace mtest

