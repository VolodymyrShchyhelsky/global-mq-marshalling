//////////////////////////////////////////////////////////////
//
//  Do not edit! file automatically generated by idl_compiler
//
//////////////////////////////////////////////////////////////

using globalmq.marshalling;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

namespace mtest
{

//////////////////////////////////////////////////////////////
//
//                 Structures
//
//////////////////////////////////////////////////////////////

public interface Ipoint3D : IEquivalenceComparable<Ipoint3D>
{
	Int64 x { get; set; }
	Int64 y { get; set; }
	Int64 z { get; set; }
} // interface point3D

public class point3D : Ipoint3D, IEquatable<point3D>
{
	public Int64 x { get; set; }
	public Int64 y { get; set; }
	public Int64 z { get; set; }
	public point3D() { }
	public point3D(Int64 x, Int64 y, Int64 z)
	{
		this.x = x;
		this.y = y;
		this.z = z;
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as point3D);
	}
	public static bool operator ==(point3D left, point3D right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(point3D left, point3D right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(point3D other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.x == other.x &&
				this.y == other.y &&
				this.z == other.z;
	}
	public bool isEquivalent(Ipoint3D other)
	{
		if (other == null)
			return false;
		else if (ReferenceEquals(this, other))
			return true;
		else
			return
				this.x == other.x &&
				this.y == other.y &&
				this.z == other.z;
	}
} // class point3D

public interface Ipoint : IEquivalenceComparable<Ipoint>
{
	Int64 x { get; set; }
	Int64 y { get; set; }
} // interface point

public class point : Ipoint, IEquatable<point>
{
	public Int64 x { get; set; }
	public Int64 y { get; set; }
	public point() { }
	public point(Int64 x, Int64 y)
	{
		this.x = x;
		this.y = y;
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as point);
	}
	public static bool operator ==(point left, point right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(point left, point right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(point other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.x == other.x &&
				this.y == other.y;
	}
	public bool isEquivalent(Ipoint other)
	{
		if (other == null)
			return false;
		else if (ReferenceEquals(this, other))
			return true;
		else
			return
				this.x == other.x &&
				this.y == other.y;
	}
} // class point

public interface Imessage_one : IEquivalenceComparable<Imessage_one>
{
	Int64 firstParam { get; set; }
	IList<Int64> secondParam { get; set; }
	IList<Ipoint3D> thirdParam { get; set; }
	UInt64 forthParam { get; set; }
	String fifthParam { get; set; }
	IList<Ipoint> sixthParam { get; set; }
	Double seventhParam { get; set; }
	Ipoint eighthParam { get; set; }
	Ipoint3D ninethParam { get; set; }
	IList<Double> tenthParam { get; set; }
} // interface message_one

public class message_one : Imessage_one, IEquatable<message_one>
{
	public Int64 firstParam { get; set; }
	List<Int64> _secondParam = new List<Int64>();
	public IList<Int64> secondParam
	{
		get { return _secondParam; }
		set
		{
			if(value == null)
				throw new ArgumentNullException();
			_secondParam = (List<Int64>)value;
		}
	}
	List<Ipoint3D> _thirdParam = new List<Ipoint3D>();
	public IList<Ipoint3D> thirdParam
	{
		get { return _thirdParam; }
		set
		{
			if(value == null)
				throw new ArgumentNullException();
			List<Ipoint3D> tmp = (List<Ipoint3D>)value;
			tmp.ForEach((Ipoint3D each) => { if(!(each is point3D)) throw new InvalidCastException(); });
			_thirdParam = tmp;
		}
	}
	public UInt64 forthParam { get; set; }
	String _fifthParam = String.Empty;
	public String fifthParam
	{
		get { return _fifthParam; }
		set
		{
			if(value == null)
				throw new ArgumentNullException();
			_fifthParam = value;
		}
	}
	List<Ipoint> _sixthParam = new List<Ipoint>();
	public IList<Ipoint> sixthParam
	{
		get { return _sixthParam; }
		set
		{
			if(value == null)
				throw new ArgumentNullException();
			List<Ipoint> tmp = (List<Ipoint>)value;
			tmp.ForEach((Ipoint each) => { if(!(each is point)) throw new InvalidCastException(); });
			_sixthParam = tmp;
		}
	}
	public Double seventhParam { get; set; }
	point _eighthParam = new point();
	public Ipoint eighthParam
	{
		get { return _eighthParam; }
		set
		{
			if(value == null)
				throw new ArgumentNullException();
			_eighthParam = (point)value;
		}
	}
	point3D _ninethParam = new point3D();
	public Ipoint3D ninethParam
	{
		get { return _ninethParam; }
		set
		{
			if(value == null)
				throw new ArgumentNullException();
			_ninethParam = (point3D)value;
		}
	}
	List<Double> _tenthParam = new List<Double>();
	public IList<Double> tenthParam
	{
		get { return _tenthParam; }
		set
		{
			if(value == null)
				throw new ArgumentNullException();
			_tenthParam = (List<Double>)value;
		}
	}
	public message_one() { }
	public message_one(Int64 firstParam, IList<Int64> secondParam, IList<Ipoint3D> thirdParam, UInt64 forthParam, String fifthParam, IList<Ipoint> sixthParam, Double seventhParam, Ipoint eighthParam, Ipoint3D ninethParam, IList<Double> tenthParam)
	{
		this.firstParam = firstParam;
		this.secondParam = secondParam;
		this.thirdParam = thirdParam;
		this.forthParam = forthParam;
		this.fifthParam = fifthParam;
		this.sixthParam = sixthParam;
		this.seventhParam = seventhParam;
		this.eighthParam = eighthParam;
		this.ninethParam = ninethParam;
		this.tenthParam = tenthParam;
	}
	public override bool Equals(object obj)
	{
		return Equals(obj as message_one);
	}
	public static bool operator ==(message_one left, message_one right)
	{
		if (ReferenceEquals(left, right))
			return true;
		else if (ReferenceEquals(left, null))
			return false;
		else if (ReferenceEquals(null, right))
			return false;
		else
			return left.Equals(right);
	}
	public static bool operator !=(message_one left, message_one right)
	{
		return !(left == right);
	}
	public override int GetHashCode()
	{
		// TODO
		throw new InvalidOperationException();
	}
	public bool Equals(message_one other)
	{
		if (ReferenceEquals(this, other))
			return true;
		else if (ReferenceEquals(null, other))
			return false;
		else
			return
				this.firstParam == other.firstParam &&
				Enumerable.SequenceEqual(this.secondParam, other.secondParam) &&
				Enumerable.SequenceEqual(this.thirdParam, other.thirdParam) &&
				this.forthParam == other.forthParam &&
				this.fifthParam == other.fifthParam &&
				Enumerable.SequenceEqual(this.sixthParam, other.sixthParam) &&
				this.seventhParam == other.seventhParam &&
				this.eighthParam.Equals(other.eighthParam) &&
				this.ninethParam.Equals(other.ninethParam) &&
				Enumerable.SequenceEqual(this.tenthParam, other.tenthParam);
	}
	public bool isEquivalent(Imessage_one other)
	{
		if (other == null)
			return false;
		else if (ReferenceEquals(this, other))
			return true;
		else
			return
				this.firstParam == other.firstParam &&
				Enumerable.SequenceEqual(this.secondParam, other.secondParam) &&
				EquivalenceComparer.areEquivalent(this.thirdParam, other.thirdParam) &&
				this.forthParam == other.forthParam &&
				this.fifthParam == other.fifthParam &&
				EquivalenceComparer.areEquivalent(this.sixthParam, other.sixthParam) &&
				this.seventhParam == other.seventhParam &&
				this.eighthParam.isEquivalent(other.eighthParam) &&
				this.ninethParam.isEquivalent(other.ninethParam) &&
				Enumerable.SequenceEqual(this.tenthParam, other.tenthParam);
	}
} // class message_one

//////////////////////////////////////////////////////////////
//
//                 Messages
//
//////////////////////////////////////////////////////////////

public class point3D_message
{
	public static void compose(JsonComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( ",\n  " );
		composer.addNamePart("z");
		composer.composeSignedInteger(z);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y, Int64 z)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
		composer.composeSignedInteger(z);
	}
	public static void compose(JsonComposer composer, Ipoint3D val)
	{
		compose(composer, val.x, val.y, val.z);
	}
	public static void compose(GmqComposer composer, Ipoint3D val)
	{
		compose(composer, val.x, val.y, val.z);
	}
	public static void parse(JsonParser parser, Ipoint3D val)	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
			{
				Int64 tmp;
				parser.parseSignedInteger(out tmp);
				val.x = tmp;
			}
			else if ( key == "y" )
			{
				Int64 tmp;
				parser.parseSignedInteger(out tmp);
				val.y = tmp;
			}
			else if ( key == "z" )
			{
				Int64 tmp;
				parser.parseSignedInteger(out tmp);
				val.z = tmp;
			}

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	public static void parse(GmqParser parser, Ipoint3D val)
	{
	{
		Int64 tmp;
		parser.parseSignedInteger(out tmp);
		val.x = tmp;
	}
	{
		Int64 tmp;
		parser.parseSignedInteger(out tmp);
		val.y = tmp;
	}
	{
		Int64 tmp;
		parser.parseSignedInteger(out tmp);
		val.z = tmp;
	}
	}
} // class point3D_message

public class point_message
{
	public static void compose(JsonComposer composer, Int64 x, Int64 y)
	{
		composer.append( "{\n  ");
		composer.addNamePart("x");
		composer.composeSignedInteger(x);
		composer.append( ",\n  " );
		composer.addNamePart("y");
		composer.composeSignedInteger(y);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 x, Int64 y)
	{
		composer.composeSignedInteger(x);
		composer.composeSignedInteger(y);
	}
	public static void compose(JsonComposer composer, Ipoint val)
	{
		compose(composer, val.x, val.y);
	}
	public static void compose(GmqComposer composer, Ipoint val)
	{
		compose(composer, val.x, val.y);
	}
	public static void parse(JsonParser parser, Ipoint val)	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "x" )
			{
				Int64 tmp;
				parser.parseSignedInteger(out tmp);
				val.x = tmp;
			}
			else if ( key == "y" )
			{
				Int64 tmp;
				parser.parseSignedInteger(out tmp);
				val.y = tmp;
			}

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	public static void parse(GmqParser parser, Ipoint val)
	{
	{
		Int64 tmp;
		parser.parseSignedInteger(out tmp);
		val.x = tmp;
	}
	{
		Int64 tmp;
		parser.parseSignedInteger(out tmp);
		val.y = tmp;
	}
	}
} // class point_message

public class message_one_message
{
	public static void compose(JsonComposer composer, Int64 firstParam, IList<Int64> secondParam, IList<Ipoint3D> thirdParam, UInt64 forthParam, String fifthParam, IList<Ipoint> sixthParam, Double seventhParam, Ipoint eighthParam, Ipoint3D ninethParam, IList<Double> tenthParam)
	{
		composer.append( "{\n  ");
		composer.addNamePart("firstParam");
		composer.composeSignedInteger(firstParam);
		composer.append( ",\n  " );
		composer.addNamePart("secondParam");
		JsonCollectionComposer<Int64> secondParam_wrapper = JsonCollectionComposer<Int64>.make(secondParam);
		secondParam_wrapper.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("thirdParam");
		JsonCollectionComposer<Ipoint3D> thirdParam_wrapper = new JsonCollectionComposer<Ipoint3D>(
			thirdParam, point3D_message.compose);
		thirdParam_wrapper.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("forthParam");
		composer.composeUnsignedInteger(forthParam);
		composer.append( ",\n  " );
		composer.addNamePart("fifthParam");
		composer.composeString(fifthParam);
		composer.append( ",\n  " );
		composer.addNamePart("sixthParam");
		JsonCollectionComposer<Ipoint> sixthParam_wrapper = new JsonCollectionComposer<Ipoint>(
			sixthParam, point_message.compose);
		sixthParam_wrapper.composeJson(composer);
		composer.append( ",\n  " );
		composer.addNamePart("seventhParam");
		composer.composeReal(seventhParam);
		composer.append( ",\n  " );
		composer.addNamePart("eighthParam");
		point_message.compose(composer, eighthParam);
		composer.append( ",\n  " );
		composer.addNamePart("ninethParam");
		point3D_message.compose(composer, ninethParam);
		composer.append( ",\n  " );
		composer.addNamePart("tenthParam");
		JsonCollectionComposer<Double> tenthParam_wrapper = JsonCollectionComposer<Double>.make(tenthParam);
		tenthParam_wrapper.composeJson(composer);
		composer.append( "\n}" );
	}
	public static void compose(GmqComposer composer, Int64 firstParam, IList<Int64> secondParam, IList<Ipoint3D> thirdParam, UInt64 forthParam, String fifthParam, IList<Ipoint> sixthParam, Double seventhParam, Ipoint eighthParam, Ipoint3D ninethParam, IList<Double> tenthParam)
	{
		composer.composeSignedInteger(firstParam);
		GmqCollectionComposer<Int64> secondParam_wrapper = GmqCollectionComposer<Int64>.make(secondParam);
		secondParam_wrapper.composeGmq(composer);
		GmqCollectionComposer<Ipoint3D> thirdParam_wrapper = new GmqCollectionComposer<Ipoint3D>(
			thirdParam, point3D_message.compose);
		thirdParam_wrapper.composeGmq(composer);
		composer.composeUnsignedInteger(forthParam);
		composer.composeString(fifthParam);
		GmqCollectionComposer<Ipoint> sixthParam_wrapper = new GmqCollectionComposer<Ipoint>(
			sixthParam, point_message.compose);
		sixthParam_wrapper.composeGmq(composer);
		composer.composeReal(seventhParam);
		point_message.compose(composer, eighthParam);
		point3D_message.compose(composer, ninethParam);
		GmqCollectionComposer<Double> tenthParam_wrapper = GmqCollectionComposer<Double>.make(tenthParam);
		tenthParam_wrapper.composeGmq(composer);
	}
	public static void compose(JsonComposer composer, Imessage_one val)
	{
		compose(composer, val.firstParam, val.secondParam, val.thirdParam, val.forthParam, val.fifthParam, val.sixthParam, val.seventhParam, val.eighthParam, val.ninethParam, val.tenthParam);
	}
	public static void compose(GmqComposer composer, Imessage_one val)
	{
		compose(composer, val.firstParam, val.secondParam, val.thirdParam, val.forthParam, val.fifthParam, val.sixthParam, val.seventhParam, val.eighthParam, val.ninethParam, val.tenthParam);
	}
	public static void parse(JsonParser parser, Imessage_one val)	{
		parser.skipDelimiter( '{' );
		while (true)
		{
			string key;
			parser.readKeyFromJson( out key );
			if ( key == "firstParam" )
			{
				Int64 tmp;
				parser.parseSignedInteger(out tmp);
				val.firstParam = tmp;
			}
			else if ( key == "secondParam" )
			{
				JsonCollectionParser tmp = new JsonCollectionParser(
					(JsonParser parser, int ordinal) =>
					{ Int64 t; parser.parseSignedInteger(out t); val.secondParam.Add(t); });
				tmp.parseJson(parser);
			}
			else if ( key == "thirdParam" )
			{
				JsonCollectionParser tmp = new JsonCollectionParser(
					(JsonParser parser, int ordinal) =>
				{ point3D t = new point3D(); point3D_message.parse(parser, t); val.thirdParam.Add(t); });
				tmp.parseJson(parser);
			}
			else if ( key == "forthParam" )
			{
				UInt64 tmp;
				parser.parseUnsignedInteger(out tmp);
				val.forthParam = tmp;
			}
			else if ( key == "fifthParam" )
			{
				String tmp;
				parser.parseString(out tmp);
				val.fifthParam = tmp;
			}
			else if ( key == "sixthParam" )
			{
				JsonCollectionParser tmp = new JsonCollectionParser(
					(JsonParser parser, int ordinal) =>
				{ point t = new point(); point_message.parse(parser, t); val.sixthParam.Add(t); });
				tmp.parseJson(parser);
			}
			else if ( key == "seventhParam" )
			{
				Double tmp;
				parser.parseReal(out tmp);
				val.seventhParam = tmp;
			}
			else if ( key == "eighthParam" )
			{
				point_message.parse(parser, val.eighthParam);
			}
			else if ( key == "ninethParam" )
			{
				point3D_message.parse(parser, val.ninethParam);
			}
			else if ( key == "tenthParam" )
			{
				JsonCollectionParser tmp = new JsonCollectionParser(
					(JsonParser parser, int ordinal) =>
				{ Double t; parser.parseReal(out t); val.tenthParam.Add(t); });
				tmp.parseJson(parser);
			}

			parser.skipSpacesEtc();
			if ( parser.isDelimiter( ',' ) )
			{
				parser.skipDelimiter( ',' );
				continue;
			}
			if ( parser.isDelimiter( '}' ) )
			{
				parser.skipDelimiter( '}' );
				break;
			}
			throw new FormatException(); // bad format
		}
	}
	public static void parse(GmqParser parser, Imessage_one val)
	{
	{
		Int64 tmp;
		parser.parseSignedInteger(out tmp);
		val.firstParam = tmp;
	}
	{
				GmqCollectionParser tmp = new GmqCollectionParser(
					(GmqParser parser, int ordinal) =>
						{ Int64 t; parser.parseSignedInteger(out t); val.secondParam.Add(t); });
				tmp.parseGmq(parser);
	}
	{
				GmqCollectionParser tmp = new GmqCollectionParser(
					(GmqParser parser, int ordinal) =>
						{ point3D t = new point3D(); point3D_message.parse(parser, t); val.thirdParam.Add(t); });
				tmp.parseGmq(parser);
	}
	{
		UInt64 tmp;
		parser.parseUnsignedInteger(out tmp);
		val.forthParam = tmp;
	}
	{
		String tmp;
		parser.parseString(out tmp);
		val.fifthParam = tmp;
	}
	{
				GmqCollectionParser tmp = new GmqCollectionParser(
					(GmqParser parser, int ordinal) =>
						{ point t = new point(); point_message.parse(parser, t); val.sixthParam.Add(t); });
				tmp.parseGmq(parser);
	}
	{
		Double tmp;
		parser.parseReal(out tmp);
		val.seventhParam = tmp;
	}
	{
		point_message.parse(parser, val.eighthParam);
	}
	{
		point3D_message.parse(parser, val.ninethParam);
	}
	{
				GmqCollectionParser tmp = new GmqCollectionParser(
					(GmqParser parser, int ordinal) =>
						{ Double t; parser.parseReal(out t); val.tenthParam.Add(t); });
				tmp.parseGmq(parser);
	}
	}
} // class message_one_message

//////////////////////////////////////////////////////////////
//
//  Scopes:
//
//  test_gmq
//  {
//    point3D_alias
//    message_one_gmq
//  }
//
//  test_json
//  {
//    point_alias
//    message_one_json
//  }
//
//////////////////////////////////////////////////////////////

public class test_gmq
{
	public enum MsgId { point3D_alias = 1, message_one_gmq = 1 }

	public static MessageHandler makeMessageHandler( MsgId id, MessageHandler.HandlerDelegate handler )
	{
		return new MessageHandler((ulong)id, handler);
	}
	public static MessageHandler makeDefaultMessageHandler( MessageHandler.HandlerDelegate handler)
	{
		return new MessageHandler(MessageHandler.DefaultHandler, handler);
	}
	public static void handleMessage( BufferT buffer, params MessageHandler[] handlers )
	{
		handleMessage(buffer.getReadIterator(), handlers);
	}
	public static void handleMessage( ReadIteratorT riter, params MessageHandler[] handlers )
	{
		GmqParser parser = new GmqParser( riter );
		MessageHandler.gmq_handle( parser, handlers );
	}

	public static void composeMessage_point3D_alias(BufferT buffer, Int64 x, Int64 y, Int64 z)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgId.point3D_alias);
		point3D_message.compose(composer, x, y, z);
	}

	public static point3D parseMessage_point3D_alias(ParserBase parser)
	{
		point3D tmp = new point3D();
		if (parser is GmqParser gmqP)
			point3D_message.parse(gmqP, tmp);
		else if (parser is JsonParser jsonP)
			point3D_message.parse(jsonP, tmp);
		else
			throw new ArgumentException();
		return tmp;
	}
	public static void composeMessage_message_one_gmq(BufferT buffer, Int64 firstParam, IList<Int64> secondParam, IList<Ipoint3D> thirdParam, UInt64 forthParam, String fifthParam, IList<Ipoint> sixthParam, Double seventhParam, Ipoint eighthParam, Ipoint3D ninethParam, IList<Double> tenthParam)
	{
		GmqComposer composer = new GmqComposer(buffer);

		composer.composeUnsignedInteger((UInt64)MsgId.message_one_gmq);
		message_one_message.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
	}

	public static message_one parseMessage_message_one_gmq(ParserBase parser)
	{
		message_one tmp = new message_one();
		if (parser is GmqParser gmqP)
			message_one_message.parse(gmqP, tmp);
		else if (parser is JsonParser jsonP)
			message_one_message.parse(jsonP, tmp);
		else
			throw new ArgumentException();
		return tmp;
	}
} // class test_gmq

public class test_json
{
	public enum MsgId { point_alias = 2, message_one_json = 2 }

	public static MessageHandler makeMessageHandler( MsgId id, MessageHandler.HandlerDelegate handler )
	{
		return new MessageHandler((ulong)id, handler);
	}
	public static MessageHandler makeDefaultMessageHandler( MessageHandler.HandlerDelegate handler)
	{
		return new MessageHandler(MessageHandler.DefaultHandler, handler);
	}
	public static void handleMessage( BufferT buffer, params MessageHandler[] handlers )
	{
		handleMessage(buffer.getReadIterator(), handlers);
	}
	public static void handleMessage( ReadIteratorT riter, params MessageHandler[] handlers )
	{
		JsonParser parser = new JsonParser( riter );
		MessageHandler.json_handle( parser, handlers );
	}

	public static void composeMessage_point_alias(BufferT buffer, Int64 x, Int64 y)
	{
		JsonComposer composer = new JsonComposer(buffer);

		composer.append("{\n  ");
		composer.addNamePart("msgid");
		composer.composeUnsignedInteger((UInt64)MsgId.point_alias);
		composer.append(",\n  ");
		composer.addNamePart("msgbody");
		point_message.compose(composer, x, y);
		composer.append("\n}");
	}

	public static point parseMessage_point_alias(ParserBase parser)
	{
		point tmp = new point();
		if (parser is GmqParser gmqP)
			point_message.parse(gmqP, tmp);
		else if (parser is JsonParser jsonP)
			point_message.parse(jsonP, tmp);
		else
			throw new ArgumentException();
		return tmp;
	}
	public static void composeMessage_message_one_json(BufferT buffer, Int64 firstParam, IList<Int64> secondParam, IList<Ipoint3D> thirdParam, UInt64 forthParam, String fifthParam, IList<Ipoint> sixthParam, Double seventhParam, Ipoint eighthParam, Ipoint3D ninethParam, IList<Double> tenthParam)
	{
		JsonComposer composer = new JsonComposer(buffer);

		composer.append("{\n  ");
		composer.addNamePart("msgid");
		composer.composeUnsignedInteger((UInt64)MsgId.message_one_json);
		composer.append(",\n  ");
		composer.addNamePart("msgbody");
		message_one_message.compose(composer, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
		composer.append("\n}");
	}

	public static message_one parseMessage_message_one_json(ParserBase parser)
	{
		message_one tmp = new message_one();
		if (parser is GmqParser gmqP)
			message_one_message.parse(gmqP, tmp);
		else if (parser is JsonParser jsonP)
			message_one_message.parse(jsonP, tmp);
		else
			throw new ArgumentException();
		return tmp;
	}
} // class test_json

//////////////////////////////////////////////////////////////
//
//                 Publishables
//
//////////////////////////////////////////////////////////////


} // namespace mtest

