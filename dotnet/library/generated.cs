/*
 * Copyright (c) 2021, OLogN Technologies AG
 * All rights reserved.
 * 
 */

// mb: all code in this file should be automatically generated by 
// idl compiler. We are currently hand writting it.





//**********************************************************************
// STRUCT "point" NONEXTENDABLE Targets: JSON GMQ (2 parameters)
// 1. INTEGER x (REQUIRED)
// 2. INTEGER y (REQUIRED)

//**********************************************************************

using globalmq.marshalling;
using System;

public class mtest
{
    public enum MessageName  { message_one = 1, message_two = 2 }
    public static void STRUCT_point_compose(ComposerBase composer, Int64 x, Int64 y)
    {
        if (composer is GmqComposer gmq)
        {
            gmq.composeSignedInteger(x);
            gmq.composeSignedInteger(y);
        }
        else if (composer is JsonComposer json)
        {
            json.append("{\n  ");
            json.addNamePart("x");
            json.composeSignedInteger(x);
            json.append(",\n  ");
            json.addNamePart("y");
            json.composeSignedInteger(y);
            json.append("\n}");
        }
        else
        {
            throw new Exception();//TODO unknown composer
        }
    }

    public static void STRUCT_point_parse(ParserBase parser, out Int64 x, out Int64 y)
    {
        if (parser is GmqParser gmq)
        {
            gmq.parseSignedInteger(out x);
            gmq.parseSignedInteger(out y);
        }
        else if (parser is JsonParser json)
        {
            x = 0;
            y = 0;
            json.skipDelimiter('{');
            while (true)
            {
                string key;
                json.readKeyFromJson(out key);
                if (key == "x")
                    json.parseSignedInteger(out x);
                else if (key == "y")
                    json.parseSignedInteger(out y);

                json.skipSpacesEtc();
                if (json.isDelimiter(','))
                {
                    json.skipDelimiter(',');
                    continue;
                }
                if (json.isDelimiter('}'))
                {
                    json.skipDelimiter('}');
                    break;
                }
                throw new Exception(); // bad format
            }
        }
        else
        {
            throw new Exception();//TODO unknown parser
        }
    }

    //**********************************************************************
    // STRUCT "point3D" Targets: JSON GMQ (3 parameters)
    // 1. INTEGER x (REQUIRED)
    // 2. INTEGER y (REQUIRED)
    // 3. INTEGER z (REQUIRED)

    //**********************************************************************

    public static void STRUCT_point3D_compose(ComposerBase composer, Int64 x, Int64 y, Int64 z)
    {
        if (composer is GmqComposer gmq)
        {
            gmq.composeSignedInteger(x);
            gmq.composeSignedInteger(y);
            gmq.composeSignedInteger(z);
        }
        else if (composer is JsonComposer json)
        {
            json.append("{\n  ");
            json.addNamePart("x");
            json.composeSignedInteger(x);
            json.append(",\n  ");
            json.addNamePart("y");
            json.composeSignedInteger(y);
            json.append(",\n  ");
            json.addNamePart("z");
            json.composeSignedInteger(z);
            json.append("\n}");
        }
        else
        {
            throw new Exception();//TODO unknown composer
        }
    }

    public static void STRUCT_point3D_parse(ParserBase parser, out Int32 x, out Int32 y, out Int32 z)
    {
        if (parser is GmqParser gmq)
        {
            gmq.parseSignedInteger(out x);
            gmq.parseSignedInteger(out y);
            gmq.parseSignedInteger(out z);
        }
        else if (parser is JsonParser json)
        {
            x = 0;
            y = 0;
            z = 0;
            json.skipDelimiter('{');
            while (true)
            {
                string key;
                json.readKeyFromJson(out key);
                if (key == "x")
                    json.parseSignedInteger(out x);
                else if (key == "y")
                    json.parseSignedInteger(out y);
                else if (key == "z")
                    json.parseSignedInteger(out z);

                json.skipSpacesEtc();
                if (json.isDelimiter(','))
                {
                    json.skipDelimiter(',');
                    continue;
                }
                if (json.isDelimiter('}'))
                {
                    json.skipDelimiter('}');
                    break;
                }
                throw new Exception(); // bad format
            }
        }
        else
        {
            throw new Exception();//TODO unknown parser
        }

    }

    //**********************************************************************
    // MESSAGE "message_one" Targets: GMQ (10 parameters)
    // 1. INTEGER firstParam (REQUIRED)
    // 2. VECTOR<INTEGER> secondParam (REQUIRED)
    // 3. VECTOR< STRUCT point3D> thirdParam (REQUIRED)
    // 4. UINTEGER forthParam (REQUIRED)
    // 5. CHARACTER_STRING fifthParam (REQUIRED)
    // 6. VECTOR<NONEXTENDABLE STRUCT point> sixthParam (REQUIRED)
    // 7. REAL seventhParam (REQUIRED)
    // 8. STRUCT NONEXTENDABLE point eighthParam (REQUIRED)
    // 9. STRUCT point3D ninethParam (REQUIRED)
    // 10. VECTOR<REAL> tenthParam (REQUIRED)

    //**********************************************************************

    public static void MESSAGE_message_one_compose(ComposerBase composer, Int64 firstParam, ICompose secondParam, ICompose thirdParam,
            UInt64 forthParam, string fifthParam, ICompose sixthParam, Double seventhParam, ICompose eighthParam, ICompose ninethParam, ICompose tenthParam)
    {
        if (composer is GmqComposer gmq)
            MESSAGE_message_one_compose(gmq, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
        if (composer is JsonComposer json)
            MESSAGE_message_one_compose(json, firstParam, secondParam, thirdParam, forthParam, fifthParam, sixthParam, seventhParam, eighthParam, ninethParam, tenthParam);
        else
            throw new Exception(); //TODO
    }

    public static void MESSAGE_message_one_compose(JsonComposer composer, Int64 firstParam, ICompose secondParam, ICompose thirdParam,
            UInt64 forthParam, string fifthParam, ICompose sixthParam, Double seventhParam, ICompose eighthParam, ICompose ninethParam, ICompose tenthParam)
    {

	    composer.append( "{\n  " );
        composer.addNamePart("firstParam");
	    composer.composeSignedInteger(firstParam);
	    composer.append( ",\n  ");
        composer.addNamePart("secondParam");
        json.composeParamToJson(composer, secondParam);
	    composer.append( ",\n  ");
        composer.addNamePart("thirdParam");
        json.composeParamToJson(composer, thirdParam);
        composer.append( ",\n  ");
        composer.addNamePart("forthParam");
        composer.composeUnsignedInteger(forthParam);
	    composer.append( ",\n  " );
        composer.addNamePart("fifthParam");
        composer.composeString(fifthParam);
	    composer.append( ",\n  " );
        composer.addNamePart("sixthParam");
        json.composeParamToJson(composer, sixthParam);
	    composer.append( ",\n  " );
        composer.addNamePart("seventhParam");
        composer.composeReal(seventhParam);
        composer.append( ",\n  " );
        composer.addNamePart("eighthParam");
        json.composeParamToJson(composer, eighthParam);
	    composer.append( ",\n  " );
        composer.addNamePart("ninethParam");
        json.composeParamToJson(composer, ninethParam);
        composer.append( ",\n  " );
        composer.addNamePart("tenthParam");
        json.composeParamToJson(composer, tenthParam);
        composer.append( "\n}" );
}

    public static void MESSAGE_message_one_compose(GmqComposer composer, Int64 firstParam, ICompose secondParam, ICompose thirdParam,
        UInt64 forthParam, string fifthParam, ICompose sixthParam, Double seventhParam, ICompose eighthParam, ICompose ninethParam, ICompose tenthParam)
    {
        composer.composeSignedInteger(firstParam);
        gmq.composeParamToGmq(composer, secondParam);
        gmq.composeParamToGmq(composer, thirdParam);
        composer.composeUnsignedInteger(forthParam);
        composer.composeString(fifthParam);
        gmq.composeParamToGmq(composer, sixthParam);
        composer.composeReal(seventhParam);
        gmq.composeParamToGmq(composer, eighthParam);
        gmq.composeParamToGmq(composer, ninethParam);
        gmq.composeParamToGmq(composer, tenthParam);
    }

    public static void MESSAGE_message_one_parse(ParserBase parser, ref Int64 firstParam, IParse secondParam, IParse thirdParam,
            ref UInt64 forthParam, ref string fifthParam, IParse sixthParam, ref Double seventhParam, IParse eighthParam, IParse ninethParam, IParse tenthParam)
    {
        if (parser is GmqParser gmq)
            MESSAGE_message_one_parse(gmq, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
        if (parser is JsonParser json)
            MESSAGE_message_one_parse(json, ref firstParam, secondParam, thirdParam, ref forthParam, ref fifthParam, sixthParam, ref seventhParam, eighthParam, ninethParam, tenthParam);
        else
            throw new Exception(); //TODO
    }

    public static void MESSAGE_message_one_parse(JsonParser parser, ref Int64 firstParam, IParse secondParam, IParse thirdParam,
        ref UInt64 forthParam, ref string fifthParam, IParse sixthParam, ref Double seventhParam, IParse eighthParam, IParse ninethParam, IParse tenthParam)
    {
        parser.skipDelimiter('{');
        while (true)
        {
            string key;
            parser.readKeyFromJson(out key);
            if (key == "firstParam")
                parser.parseSignedInteger(out firstParam);
            else if (key == "secondParam")
                json.parseJsonEntry(parser, secondParam);
            else if (key == "thirdParam")
                json.parseJsonEntry(parser, thirdParam);
            else if (key == "forthParam")
                parser.parseUnsignedInteger(out forthParam);
            else if (key == "fifthParam")
                parser.parseString(out fifthParam);
            else if (key == "sixthParam")
                json.parseJsonEntry(parser, sixthParam);
            else if (key == "seventhParam")
                parser.parseReal(out seventhParam);
            else if (key == "eighthParam")
                json.parseJsonEntry(parser, eighthParam);
            else if (key == "ninethParam")
                json.parseJsonEntry(parser, ninethParam);
            else if (key == "tenthParam")
                json.parseJsonEntry(parser, tenthParam);

            parser.skipSpacesEtc();
            if (parser.isDelimiter(','))
            {
                parser.skipDelimiter(',');
                continue;
            }
            if (parser.isDelimiter('}'))
            {
                parser.skipDelimiter('}');
                break;
            }
            throw new Exception();// bad format
        }

    }
    public static void MESSAGE_message_one_parse(GmqParser parser, ref Int64 firstParam, IParse secondParam, IParse thirdParam,
    ref UInt64 forthParam, ref string fifthParam, IParse sixthParam, ref Double seventhParam, IParse eighthParam, IParse ninethParam, IParse tenthParam)
    {
        parser.parseSignedInteger(out firstParam);
        gmq.parseGmqParam(parser, secondParam);
        gmq.parseGmqParam(parser, thirdParam);
        parser.parseUnsignedInteger(out forthParam);
        parser.parseString(out fifthParam);
        gmq.parseGmqParam(parser, sixthParam);
        parser.parseReal(out seventhParam);
        gmq.parseGmqParam(parser, eighthParam);
        gmq.parseGmqParam(parser, ninethParam);
        gmq.parseGmqParam(parser, tenthParam);
    }

    public static void handleMessage(ParserBase parser, params MessageHandler[] handlers)
    {
        if (parser is GmqParser gmq)
            handleMessage(gmq, handlers);
        if (parser is JsonParser json)
            handleMessage(json, handlers);
        else
            throw new Exception(); //TODO
    }

    public static void handleMessage(GmqParser parser, params MessageHandler[] handlers)
    {
        UInt64 msgID;
        parser.parseUnsignedInteger(out msgID);
        implHandleMessage(parser, msgID, handlers);
    }


    public static void handleMessage(JsonParser parser, params MessageHandler[] handlers)
    {
        parser.skipDelimiter('{');
        string key;
        parser.readKeyFromJson(out key);
        if (key != "msgid")
            throw new Exception(); // bad format
        UInt64 msgID;
        parser.parseUnsignedInteger(out msgID);
        parser.skipSpacesEtc();
        parser.skipDelimiter(',');
        parser.readKeyFromJson(out key);
        if (key != "msgbody")
            throw new Exception(); // bad format

        bool handled = implHandleMessage(parser, msgID, handlers);

        //TODO what to do if not handled???
        if (handled)
            parser.skipDelimiter('}');
    }


    static bool implHandleMessage(ParserBase parser, UInt64 msgID, MessageHandler[] handlers)
    {
        // TODO improve
        MessageHandler defaultHandler = null;

        for (int i = 0; i != handlers.Length; ++i)
        {
            if (msgID == handlers[i].msgID)
            {
                handlers[i].handle(parser);
                return true;
            }
            else if (handlers[i].msgID == MessageHandler.DefaultHandler)
            {
                defaultHandler = handlers[i];
            }
        }

        if (defaultHandler != null)
        {
            defaultHandler.handle(parser);
            return true;
        }

        return false;
    }

    //TODO Message handler should be constructible only from this methods
    public MessageHandler makeMessageHandler(MessageName msgID, MessageHandler.HandlerDelegate handler)
    {
        return new MessageHandler((UInt64)msgID, handler);
    }
    public MessageHandler defaultMessageHandler(MessageHandler.HandlerDelegate handler)
    {
        return new MessageHandler(MessageHandler.DefaultHandler, handler);
    }
}
